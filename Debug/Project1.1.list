
Project1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7f4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a48  0800c908  0800c908  0001c908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d350  0800d350  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800d350  0800d350  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d350  0800d350  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d350  0800d350  0001d350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d354  0800d354  0001d354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800d358  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002440  200001f4  0800d54c  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002634  0800d54c  00022634  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010412  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d0d  00000000  00000000  0003062f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  00033340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d80  00000000  00000000  00034218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000da3e  00000000  00000000  00034f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000038db  00000000  00000000  000429d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000462b1  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005060  00000000  00000000  00046304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c8ec 	.word	0x0800c8ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	0800c8ec 	.word	0x0800c8ec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_fmul>:
 8000b28:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b2c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b30:	bf1e      	ittt	ne
 8000b32:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b36:	ea92 0f0c 	teqne	r2, ip
 8000b3a:	ea93 0f0c 	teqne	r3, ip
 8000b3e:	d06f      	beq.n	8000c20 <__aeabi_fmul+0xf8>
 8000b40:	441a      	add	r2, r3
 8000b42:	ea80 0c01 	eor.w	ip, r0, r1
 8000b46:	0240      	lsls	r0, r0, #9
 8000b48:	bf18      	it	ne
 8000b4a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b4e:	d01e      	beq.n	8000b8e <__aeabi_fmul+0x66>
 8000b50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b54:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b58:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b5c:	fba0 3101 	umull	r3, r1, r0, r1
 8000b60:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b64:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b68:	bf3e      	ittt	cc
 8000b6a:	0049      	lslcc	r1, r1, #1
 8000b6c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b70:	005b      	lslcc	r3, r3, #1
 8000b72:	ea40 0001 	orr.w	r0, r0, r1
 8000b76:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000b7a:	2afd      	cmp	r2, #253	; 0xfd
 8000b7c:	d81d      	bhi.n	8000bba <__aeabi_fmul+0x92>
 8000b7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000b82:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b86:	bf08      	it	eq
 8000b88:	f020 0001 	biceq.w	r0, r0, #1
 8000b8c:	4770      	bx	lr
 8000b8e:	f090 0f00 	teq	r0, #0
 8000b92:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b96:	bf08      	it	eq
 8000b98:	0249      	lsleq	r1, r1, #9
 8000b9a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b9e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ba2:	3a7f      	subs	r2, #127	; 0x7f
 8000ba4:	bfc2      	ittt	gt
 8000ba6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000baa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bae:	4770      	bxgt	lr
 8000bb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb4:	f04f 0300 	mov.w	r3, #0
 8000bb8:	3a01      	subs	r2, #1
 8000bba:	dc5d      	bgt.n	8000c78 <__aeabi_fmul+0x150>
 8000bbc:	f112 0f19 	cmn.w	r2, #25
 8000bc0:	bfdc      	itt	le
 8000bc2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000bc6:	4770      	bxle	lr
 8000bc8:	f1c2 0200 	rsb	r2, r2, #0
 8000bcc:	0041      	lsls	r1, r0, #1
 8000bce:	fa21 f102 	lsr.w	r1, r1, r2
 8000bd2:	f1c2 0220 	rsb	r2, r2, #32
 8000bd6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bda:	ea5f 0031 	movs.w	r0, r1, rrx
 8000bde:	f140 0000 	adc.w	r0, r0, #0
 8000be2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000be6:	bf08      	it	eq
 8000be8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bec:	4770      	bx	lr
 8000bee:	f092 0f00 	teq	r2, #0
 8000bf2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000bf6:	bf02      	ittt	eq
 8000bf8:	0040      	lsleq	r0, r0, #1
 8000bfa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000bfe:	3a01      	subeq	r2, #1
 8000c00:	d0f9      	beq.n	8000bf6 <__aeabi_fmul+0xce>
 8000c02:	ea40 000c 	orr.w	r0, r0, ip
 8000c06:	f093 0f00 	teq	r3, #0
 8000c0a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c0e:	bf02      	ittt	eq
 8000c10:	0049      	lsleq	r1, r1, #1
 8000c12:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c16:	3b01      	subeq	r3, #1
 8000c18:	d0f9      	beq.n	8000c0e <__aeabi_fmul+0xe6>
 8000c1a:	ea41 010c 	orr.w	r1, r1, ip
 8000c1e:	e78f      	b.n	8000b40 <__aeabi_fmul+0x18>
 8000c20:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c24:	ea92 0f0c 	teq	r2, ip
 8000c28:	bf18      	it	ne
 8000c2a:	ea93 0f0c 	teqne	r3, ip
 8000c2e:	d00a      	beq.n	8000c46 <__aeabi_fmul+0x11e>
 8000c30:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c34:	bf18      	it	ne
 8000c36:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c3a:	d1d8      	bne.n	8000bee <__aeabi_fmul+0xc6>
 8000c3c:	ea80 0001 	eor.w	r0, r0, r1
 8000c40:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	4770      	bx	lr
 8000c46:	f090 0f00 	teq	r0, #0
 8000c4a:	bf17      	itett	ne
 8000c4c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c50:	4608      	moveq	r0, r1
 8000c52:	f091 0f00 	teqne	r1, #0
 8000c56:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c5a:	d014      	beq.n	8000c86 <__aeabi_fmul+0x15e>
 8000c5c:	ea92 0f0c 	teq	r2, ip
 8000c60:	d101      	bne.n	8000c66 <__aeabi_fmul+0x13e>
 8000c62:	0242      	lsls	r2, r0, #9
 8000c64:	d10f      	bne.n	8000c86 <__aeabi_fmul+0x15e>
 8000c66:	ea93 0f0c 	teq	r3, ip
 8000c6a:	d103      	bne.n	8000c74 <__aeabi_fmul+0x14c>
 8000c6c:	024b      	lsls	r3, r1, #9
 8000c6e:	bf18      	it	ne
 8000c70:	4608      	movne	r0, r1
 8000c72:	d108      	bne.n	8000c86 <__aeabi_fmul+0x15e>
 8000c74:	ea80 0001 	eor.w	r0, r0, r1
 8000c78:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c8a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_fdiv>:
 8000c90:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c94:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c98:	bf1e      	ittt	ne
 8000c9a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c9e:	ea92 0f0c 	teqne	r2, ip
 8000ca2:	ea93 0f0c 	teqne	r3, ip
 8000ca6:	d069      	beq.n	8000d7c <__aeabi_fdiv+0xec>
 8000ca8:	eba2 0203 	sub.w	r2, r2, r3
 8000cac:	ea80 0c01 	eor.w	ip, r0, r1
 8000cb0:	0249      	lsls	r1, r1, #9
 8000cb2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cb6:	d037      	beq.n	8000d28 <__aeabi_fdiv+0x98>
 8000cb8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cbc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cc0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cc4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	bf38      	it	cc
 8000ccc:	005b      	lslcc	r3, r3, #1
 8000cce:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000cd2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	bf24      	itt	cs
 8000cda:	1a5b      	subcs	r3, r3, r1
 8000cdc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ce0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ce4:	bf24      	itt	cs
 8000ce6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000cea:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000cee:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000cf2:	bf24      	itt	cs
 8000cf4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000cf8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000cfc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d00:	bf24      	itt	cs
 8000d02:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d06:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d0a:	011b      	lsls	r3, r3, #4
 8000d0c:	bf18      	it	ne
 8000d0e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d12:	d1e0      	bne.n	8000cd6 <__aeabi_fdiv+0x46>
 8000d14:	2afd      	cmp	r2, #253	; 0xfd
 8000d16:	f63f af50 	bhi.w	8000bba <__aeabi_fmul+0x92>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d20:	bf08      	it	eq
 8000d22:	f020 0001 	biceq.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d2c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d30:	327f      	adds	r2, #127	; 0x7f
 8000d32:	bfc2      	ittt	gt
 8000d34:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d38:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3c:	4770      	bxgt	lr
 8000d3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d42:	f04f 0300 	mov.w	r3, #0
 8000d46:	3a01      	subs	r2, #1
 8000d48:	e737      	b.n	8000bba <__aeabi_fmul+0x92>
 8000d4a:	f092 0f00 	teq	r2, #0
 8000d4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d52:	bf02      	ittt	eq
 8000d54:	0040      	lsleq	r0, r0, #1
 8000d56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d5a:	3a01      	subeq	r2, #1
 8000d5c:	d0f9      	beq.n	8000d52 <__aeabi_fdiv+0xc2>
 8000d5e:	ea40 000c 	orr.w	r0, r0, ip
 8000d62:	f093 0f00 	teq	r3, #0
 8000d66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d6a:	bf02      	ittt	eq
 8000d6c:	0049      	lsleq	r1, r1, #1
 8000d6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d72:	3b01      	subeq	r3, #1
 8000d74:	d0f9      	beq.n	8000d6a <__aeabi_fdiv+0xda>
 8000d76:	ea41 010c 	orr.w	r1, r1, ip
 8000d7a:	e795      	b.n	8000ca8 <__aeabi_fdiv+0x18>
 8000d7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d80:	ea92 0f0c 	teq	r2, ip
 8000d84:	d108      	bne.n	8000d98 <__aeabi_fdiv+0x108>
 8000d86:	0242      	lsls	r2, r0, #9
 8000d88:	f47f af7d 	bne.w	8000c86 <__aeabi_fmul+0x15e>
 8000d8c:	ea93 0f0c 	teq	r3, ip
 8000d90:	f47f af70 	bne.w	8000c74 <__aeabi_fmul+0x14c>
 8000d94:	4608      	mov	r0, r1
 8000d96:	e776      	b.n	8000c86 <__aeabi_fmul+0x15e>
 8000d98:	ea93 0f0c 	teq	r3, ip
 8000d9c:	d104      	bne.n	8000da8 <__aeabi_fdiv+0x118>
 8000d9e:	024b      	lsls	r3, r1, #9
 8000da0:	f43f af4c 	beq.w	8000c3c <__aeabi_fmul+0x114>
 8000da4:	4608      	mov	r0, r1
 8000da6:	e76e      	b.n	8000c86 <__aeabi_fmul+0x15e>
 8000da8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dac:	bf18      	it	ne
 8000dae:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db2:	d1ca      	bne.n	8000d4a <__aeabi_fdiv+0xba>
 8000db4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000db8:	f47f af5c 	bne.w	8000c74 <__aeabi_fmul+0x14c>
 8000dbc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000dc0:	f47f af3c 	bne.w	8000c3c <__aeabi_fmul+0x114>
 8000dc4:	e75f      	b.n	8000c86 <__aeabi_fmul+0x15e>
 8000dc6:	bf00      	nop

08000dc8 <__gesf2>:
 8000dc8:	f04f 3cff 	mov.w	ip, #4294967295
 8000dcc:	e006      	b.n	8000ddc <__cmpsf2+0x4>
 8000dce:	bf00      	nop

08000dd0 <__lesf2>:
 8000dd0:	f04f 0c01 	mov.w	ip, #1
 8000dd4:	e002      	b.n	8000ddc <__cmpsf2+0x4>
 8000dd6:	bf00      	nop

08000dd8 <__cmpsf2>:
 8000dd8:	f04f 0c01 	mov.w	ip, #1
 8000ddc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000de0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000de4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000de8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dec:	bf18      	it	ne
 8000dee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000df2:	d011      	beq.n	8000e18 <__cmpsf2+0x40>
 8000df4:	b001      	add	sp, #4
 8000df6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000dfa:	bf18      	it	ne
 8000dfc:	ea90 0f01 	teqne	r0, r1
 8000e00:	bf58      	it	pl
 8000e02:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e06:	bf88      	it	hi
 8000e08:	17c8      	asrhi	r0, r1, #31
 8000e0a:	bf38      	it	cc
 8000e0c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e10:	bf18      	it	ne
 8000e12:	f040 0001 	orrne.w	r0, r0, #1
 8000e16:	4770      	bx	lr
 8000e18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e1c:	d102      	bne.n	8000e24 <__cmpsf2+0x4c>
 8000e1e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e22:	d105      	bne.n	8000e30 <__cmpsf2+0x58>
 8000e24:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e28:	d1e4      	bne.n	8000df4 <__cmpsf2+0x1c>
 8000e2a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e2e:	d0e1      	beq.n	8000df4 <__cmpsf2+0x1c>
 8000e30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop

08000e38 <__aeabi_cfrcmple>:
 8000e38:	4684      	mov	ip, r0
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	4661      	mov	r1, ip
 8000e3e:	e7ff      	b.n	8000e40 <__aeabi_cfcmpeq>

08000e40 <__aeabi_cfcmpeq>:
 8000e40:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e42:	f7ff ffc9 	bl	8000dd8 <__cmpsf2>
 8000e46:	2800      	cmp	r0, #0
 8000e48:	bf48      	it	mi
 8000e4a:	f110 0f00 	cmnmi.w	r0, #0
 8000e4e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e50 <__aeabi_fcmpeq>:
 8000e50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e54:	f7ff fff4 	bl	8000e40 <__aeabi_cfcmpeq>
 8000e58:	bf0c      	ite	eq
 8000e5a:	2001      	moveq	r0, #1
 8000e5c:	2000      	movne	r0, #0
 8000e5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e62:	bf00      	nop

08000e64 <__aeabi_fcmplt>:
 8000e64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e68:	f7ff ffea 	bl	8000e40 <__aeabi_cfcmpeq>
 8000e6c:	bf34      	ite	cc
 8000e6e:	2001      	movcc	r0, #1
 8000e70:	2000      	movcs	r0, #0
 8000e72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e76:	bf00      	nop

08000e78 <__aeabi_fcmple>:
 8000e78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e7c:	f7ff ffe0 	bl	8000e40 <__aeabi_cfcmpeq>
 8000e80:	bf94      	ite	ls
 8000e82:	2001      	movls	r0, #1
 8000e84:	2000      	movhi	r0, #0
 8000e86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e8a:	bf00      	nop

08000e8c <__aeabi_fcmpge>:
 8000e8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e90:	f7ff ffd2 	bl	8000e38 <__aeabi_cfrcmple>
 8000e94:	bf94      	ite	ls
 8000e96:	2001      	movls	r0, #1
 8000e98:	2000      	movhi	r0, #0
 8000e9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_fcmpgt>:
 8000ea0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea4:	f7ff ffc8 	bl	8000e38 <__aeabi_cfrcmple>
 8000ea8:	bf34      	ite	cc
 8000eaa:	2001      	movcc	r0, #1
 8000eac:	2000      	movcs	r0, #0
 8000eae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eb2:	bf00      	nop

08000eb4 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2110      	movs	r1, #16
 8000ebc:	4803      	ldr	r0, [pc, #12]	; (8000ecc <SELECT+0x18>)
 8000ebe:	f002 fc19 	bl	80036f4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	f001 fc84 	bl	80027d0 <HAL_Delay>
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40010800 	.word	0x40010800

08000ed0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	2110      	movs	r1, #16
 8000ed8:	4803      	ldr	r0, [pc, #12]	; (8000ee8 <DESELECT+0x18>)
 8000eda:	f002 fc0b 	bl	80036f4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ede:	2001      	movs	r0, #1
 8000ee0:	f001 fc76 	bl	80027d0 <HAL_Delay>
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40010800 	.word	0x40010800

08000eec <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000ef6:	bf00      	nop
 8000ef8:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <SPI_TxByte+0x30>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d1f8      	bne.n	8000ef8 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000f06:	1df9      	adds	r1, r7, #7
 8000f08:	2364      	movs	r3, #100	; 0x64
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	4803      	ldr	r0, [pc, #12]	; (8000f1c <SPI_TxByte+0x30>)
 8000f0e:	f003 fa09 	bl	8004324 <HAL_SPI_Transmit>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20002340 	.word	0x20002340

08000f20 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	460b      	mov	r3, r1
 8000f2a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f2c:	bf00      	nop
 8000f2e:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <SPI_TxBuffer+0x30>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	f003 0302 	and.w	r3, r3, #2
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d1f8      	bne.n	8000f2e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000f3c:	887a      	ldrh	r2, [r7, #2]
 8000f3e:	2364      	movs	r3, #100	; 0x64
 8000f40:	6879      	ldr	r1, [r7, #4]
 8000f42:	4803      	ldr	r0, [pc, #12]	; (8000f50 <SPI_TxBuffer+0x30>)
 8000f44:	f003 f9ee 	bl	8004324 <HAL_SPI_Transmit>
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20002340 	.word	0x20002340

08000f54 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000f5a:	23ff      	movs	r3, #255	; 0xff
 8000f5c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f5e:	bf00      	nop
 8000f60:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <SPI_RxByte+0x34>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d1f8      	bne.n	8000f60 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000f6e:	1dba      	adds	r2, r7, #6
 8000f70:	1df9      	adds	r1, r7, #7
 8000f72:	2364      	movs	r3, #100	; 0x64
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	2301      	movs	r3, #1
 8000f78:	4803      	ldr	r0, [pc, #12]	; (8000f88 <SPI_RxByte+0x34>)
 8000f7a:	f003 fb17 	bl	80045ac <HAL_SPI_TransmitReceive>

	return data;
 8000f7e:	79bb      	ldrb	r3, [r7, #6]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20002340 	.word	0x20002340

08000f8c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000f94:	f7ff ffde 	bl	8000f54 <SPI_RxByte>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	701a      	strb	r2, [r3, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <SD_ReadyWait+0x30>)
 8000fb0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fb4:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000fb6:	f7ff ffcd 	bl	8000f54 <SPI_RxByte>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	2bff      	cmp	r3, #255	; 0xff
 8000fc2:	d004      	beq.n	8000fce <SD_ReadyWait+0x26>
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <SD_ReadyWait+0x30>)
 8000fc6:	881b      	ldrh	r3, [r3, #0]
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d1f3      	bne.n	8000fb6 <SD_ReadyWait+0xe>

	return res;
 8000fce:	79fb      	ldrb	r3, [r7, #7]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	200023e4 	.word	0x200023e4

08000fdc <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000fe2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000fe6:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000fe8:	f7ff ff72 	bl	8000ed0 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000fec:	2300      	movs	r3, #0
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	e005      	b.n	8000ffe <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000ff2:	20ff      	movs	r0, #255	; 0xff
 8000ff4:	f7ff ff7a 	bl	8000eec <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	2b09      	cmp	r3, #9
 8001002:	ddf6      	ble.n	8000ff2 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001004:	f7ff ff56 	bl	8000eb4 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001008:	2340      	movs	r3, #64	; 0x40
 800100a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 800101c:	2395      	movs	r3, #149	; 0x95
 800101e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001020:	463b      	mov	r3, r7
 8001022:	2106      	movs	r1, #6
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff7b 	bl	8000f20 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800102a:	e002      	b.n	8001032 <SD_PowerOn+0x56>
	{
		cnt--;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	3b01      	subs	r3, #1
 8001030:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001032:	f7ff ff8f 	bl	8000f54 <SPI_RxByte>
 8001036:	4603      	mov	r3, r0
 8001038:	2b01      	cmp	r3, #1
 800103a:	d002      	beq.n	8001042 <SD_PowerOn+0x66>
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1f4      	bne.n	800102c <SD_PowerOn+0x50>
	}

	DESELECT();
 8001042:	f7ff ff45 	bl	8000ed0 <DESELECT>
	SPI_TxByte(0XFF);
 8001046:	20ff      	movs	r0, #255	; 0xff
 8001048:	f7ff ff50 	bl	8000eec <SPI_TxByte>

	PowerFlag = 1;
 800104c:	4b03      	ldr	r3, [pc, #12]	; (800105c <SD_PowerOn+0x80>)
 800104e:	2201      	movs	r2, #1
 8001050:	701a      	strb	r2, [r3, #0]
}
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000211 	.word	0x20000211

08001060 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001064:	4b03      	ldr	r3, [pc, #12]	; (8001074 <SD_PowerOff+0x14>)
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000211 	.word	0x20000211

08001078 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800107c:	4b02      	ldr	r3, [pc, #8]	; (8001088 <SD_CheckPower+0x10>)
 800107e:	781b      	ldrb	r3, [r3, #0]
}
 8001080:	4618      	mov	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr
 8001088:	20000211 	.word	0x20000211

0800108c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001096:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <SD_RxDataBlock+0x5c>)
 8001098:	22c8      	movs	r2, #200	; 0xc8
 800109a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 800109c:	f7ff ff5a 	bl	8000f54 <SPI_RxByte>
 80010a0:	4603      	mov	r3, r0
 80010a2:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	2bff      	cmp	r3, #255	; 0xff
 80010a8:	d104      	bne.n	80010b4 <SD_RxDataBlock+0x28>
 80010aa:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <SD_RxDataBlock+0x5c>)
 80010ac:	881b      	ldrh	r3, [r3, #0]
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1f3      	bne.n	800109c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	2bfe      	cmp	r3, #254	; 0xfe
 80010b8:	d001      	beq.n	80010be <SD_RxDataBlock+0x32>
 80010ba:	2300      	movs	r3, #0
 80010bc:	e00f      	b.n	80010de <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	1c5a      	adds	r2, r3, #1
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff61 	bl	8000f8c <SPI_RxBytePtr>
	} while(len--);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	1e5a      	subs	r2, r3, #1
 80010ce:	603a      	str	r2, [r7, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1f4      	bne.n	80010be <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 80010d4:	f7ff ff3e 	bl	8000f54 <SPI_RxByte>
	SPI_RxByte();
 80010d8:	f7ff ff3c 	bl	8000f54 <SPI_RxByte>

	return TRUE;
 80010dc:	2301      	movs	r3, #1
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200023e2 	.word	0x200023e2

080010ec <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80010fc:	f7ff ff54 	bl	8000fa8 <SD_ReadyWait>
 8001100:	4603      	mov	r3, r0
 8001102:	2bff      	cmp	r3, #255	; 0xff
 8001104:	d001      	beq.n	800110a <SD_TxDataBlock+0x1e>
 8001106:	2300      	movs	r3, #0
 8001108:	e02f      	b.n	800116a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800110a:	78fb      	ldrb	r3, [r7, #3]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff feed 	bl	8000eec <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001112:	78fb      	ldrb	r3, [r7, #3]
 8001114:	2bfd      	cmp	r3, #253	; 0xfd
 8001116:	d020      	beq.n	800115a <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001118:	f44f 7100 	mov.w	r1, #512	; 0x200
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff feff 	bl	8000f20 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001122:	f7ff ff17 	bl	8000f54 <SPI_RxByte>
		SPI_RxByte();
 8001126:	f7ff ff15 	bl	8000f54 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800112a:	e00b      	b.n	8001144 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800112c:	f7ff ff12 	bl	8000f54 <SPI_RxByte>
 8001130:	4603      	mov	r3, r0
 8001132:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	f003 031f 	and.w	r3, r3, #31
 800113a:	2b05      	cmp	r3, #5
 800113c:	d006      	beq.n	800114c <SD_TxDataBlock+0x60>
			i++;
 800113e:	7bbb      	ldrb	r3, [r7, #14]
 8001140:	3301      	adds	r3, #1
 8001142:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001144:	7bbb      	ldrb	r3, [r7, #14]
 8001146:	2b40      	cmp	r3, #64	; 0x40
 8001148:	d9f0      	bls.n	800112c <SD_TxDataBlock+0x40>
 800114a:	e000      	b.n	800114e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800114c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800114e:	bf00      	nop
 8001150:	f7ff ff00 	bl	8000f54 <SPI_RxByte>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d0fa      	beq.n	8001150 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800115a:	7bfb      	ldrb	r3, [r7, #15]
 800115c:	f003 031f 	and.w	r3, r3, #31
 8001160:	2b05      	cmp	r3, #5
 8001162:	d101      	bne.n	8001168 <SD_TxDataBlock+0x7c>
 8001164:	2301      	movs	r3, #1
 8001166:	e000      	b.n	800116a <SD_TxDataBlock+0x7e>

	return FALSE;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b084      	sub	sp, #16
 8001176:	af00      	add	r7, sp, #0
 8001178:	4603      	mov	r3, r0
 800117a:	6039      	str	r1, [r7, #0]
 800117c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800117e:	f7ff ff13 	bl	8000fa8 <SD_ReadyWait>
 8001182:	4603      	mov	r3, r0
 8001184:	2bff      	cmp	r3, #255	; 0xff
 8001186:	d001      	beq.n	800118c <SD_SendCmd+0x1a>
 8001188:	23ff      	movs	r3, #255	; 0xff
 800118a:	e042      	b.n	8001212 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff feac 	bl	8000eec <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	0e1b      	lsrs	r3, r3, #24
 8001198:	b2db      	uxtb	r3, r3
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff fea6 	bl	8000eec <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	0c1b      	lsrs	r3, r3, #16
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff fea0 	bl	8000eec <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	0a1b      	lsrs	r3, r3, #8
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fe9a 	bl	8000eec <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff fe95 	bl	8000eec <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	2b40      	cmp	r3, #64	; 0x40
 80011c6:	d102      	bne.n	80011ce <SD_SendCmd+0x5c>
 80011c8:	2395      	movs	r3, #149	; 0x95
 80011ca:	73fb      	strb	r3, [r7, #15]
 80011cc:	e007      	b.n	80011de <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	2b48      	cmp	r3, #72	; 0x48
 80011d2:	d102      	bne.n	80011da <SD_SendCmd+0x68>
 80011d4:	2387      	movs	r3, #135	; 0x87
 80011d6:	73fb      	strb	r3, [r7, #15]
 80011d8:	e001      	b.n	80011de <SD_SendCmd+0x6c>
	else crc = 1;
 80011da:	2301      	movs	r3, #1
 80011dc:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff fe83 	bl	8000eec <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2b4c      	cmp	r3, #76	; 0x4c
 80011ea:	d101      	bne.n	80011f0 <SD_SendCmd+0x7e>
 80011ec:	f7ff feb2 	bl	8000f54 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80011f0:	230a      	movs	r3, #10
 80011f2:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80011f4:	f7ff feae 	bl	8000f54 <SPI_RxByte>
 80011f8:	4603      	mov	r3, r0
 80011fa:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80011fc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001200:	2b00      	cmp	r3, #0
 8001202:	da05      	bge.n	8001210 <SD_SendCmd+0x9e>
 8001204:	7bbb      	ldrb	r3, [r7, #14]
 8001206:	3b01      	subs	r3, #1
 8001208:	73bb      	strb	r3, [r7, #14]
 800120a:	7bbb      	ldrb	r3, [r7, #14]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1f1      	bne.n	80011f4 <SD_SendCmd+0x82>

	return res;
 8001210:	7b7b      	ldrb	r3, [r7, #13]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 800121c:	b590      	push	{r4, r7, lr}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <SD_disk_initialize+0x14>
 800122c:	2301      	movs	r3, #1
 800122e:	e0d6      	b.n	80013de <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001230:	4b6d      	ldr	r3, [pc, #436]	; (80013e8 <SD_disk_initialize+0x1cc>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <SD_disk_initialize+0x2a>
 800123e:	4b6a      	ldr	r3, [pc, #424]	; (80013e8 <SD_disk_initialize+0x1cc>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	b2db      	uxtb	r3, r3
 8001244:	e0cb      	b.n	80013de <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8001246:	f7ff fec9 	bl	8000fdc <SD_PowerOn>

	/* slave select */
	SELECT();
 800124a:	f7ff fe33 	bl	8000eb4 <SELECT>

	/* check disk type */
	type = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001252:	2100      	movs	r1, #0
 8001254:	2040      	movs	r0, #64	; 0x40
 8001256:	f7ff ff8c 	bl	8001172 <SD_SendCmd>
 800125a:	4603      	mov	r3, r0
 800125c:	2b01      	cmp	r3, #1
 800125e:	f040 80a6 	bne.w	80013ae <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001262:	4b62      	ldr	r3, [pc, #392]	; (80013ec <SD_disk_initialize+0x1d0>)
 8001264:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001268:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800126a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800126e:	2048      	movs	r0, #72	; 0x48
 8001270:	f7ff ff7f 	bl	8001172 <SD_SendCmd>
 8001274:	4603      	mov	r3, r0
 8001276:	2b01      	cmp	r3, #1
 8001278:	d158      	bne.n	800132c <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800127a:	2300      	movs	r3, #0
 800127c:	73fb      	strb	r3, [r7, #15]
 800127e:	e00c      	b.n	800129a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001280:	7bfc      	ldrb	r4, [r7, #15]
 8001282:	f7ff fe67 	bl	8000f54 <SPI_RxByte>
 8001286:	4603      	mov	r3, r0
 8001288:	461a      	mov	r2, r3
 800128a:	f104 0310 	add.w	r3, r4, #16
 800128e:	443b      	add	r3, r7
 8001290:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	3301      	adds	r3, #1
 8001298:	73fb      	strb	r3, [r7, #15]
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	2b03      	cmp	r3, #3
 800129e:	d9ef      	bls.n	8001280 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80012a0:	7abb      	ldrb	r3, [r7, #10]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	f040 8083 	bne.w	80013ae <SD_disk_initialize+0x192>
 80012a8:	7afb      	ldrb	r3, [r7, #11]
 80012aa:	2baa      	cmp	r3, #170	; 0xaa
 80012ac:	d17f      	bne.n	80013ae <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80012ae:	2100      	movs	r1, #0
 80012b0:	2077      	movs	r0, #119	; 0x77
 80012b2:	f7ff ff5e 	bl	8001172 <SD_SendCmd>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d807      	bhi.n	80012cc <SD_disk_initialize+0xb0>
 80012bc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80012c0:	2069      	movs	r0, #105	; 0x69
 80012c2:	f7ff ff56 	bl	8001172 <SD_SendCmd>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d005      	beq.n	80012d8 <SD_disk_initialize+0xbc>
				} while (Timer1);
 80012cc:	4b47      	ldr	r3, [pc, #284]	; (80013ec <SD_disk_initialize+0x1d0>)
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1eb      	bne.n	80012ae <SD_disk_initialize+0x92>
 80012d6:	e000      	b.n	80012da <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80012d8:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80012da:	4b44      	ldr	r3, [pc, #272]	; (80013ec <SD_disk_initialize+0x1d0>)
 80012dc:	881b      	ldrh	r3, [r3, #0]
 80012de:	b29b      	uxth	r3, r3
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d064      	beq.n	80013ae <SD_disk_initialize+0x192>
 80012e4:	2100      	movs	r1, #0
 80012e6:	207a      	movs	r0, #122	; 0x7a
 80012e8:	f7ff ff43 	bl	8001172 <SD_SendCmd>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d15d      	bne.n	80013ae <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80012f2:	2300      	movs	r3, #0
 80012f4:	73fb      	strb	r3, [r7, #15]
 80012f6:	e00c      	b.n	8001312 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 80012f8:	7bfc      	ldrb	r4, [r7, #15]
 80012fa:	f7ff fe2b 	bl	8000f54 <SPI_RxByte>
 80012fe:	4603      	mov	r3, r0
 8001300:	461a      	mov	r2, r3
 8001302:	f104 0310 	add.w	r3, r4, #16
 8001306:	443b      	add	r3, r7
 8001308:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800130c:	7bfb      	ldrb	r3, [r7, #15]
 800130e:	3301      	adds	r3, #1
 8001310:	73fb      	strb	r3, [r7, #15]
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	2b03      	cmp	r3, #3
 8001316:	d9ef      	bls.n	80012f8 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001318:	7a3b      	ldrb	r3, [r7, #8]
 800131a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <SD_disk_initialize+0x10a>
 8001322:	230c      	movs	r3, #12
 8001324:	e000      	b.n	8001328 <SD_disk_initialize+0x10c>
 8001326:	2304      	movs	r3, #4
 8001328:	73bb      	strb	r3, [r7, #14]
 800132a:	e040      	b.n	80013ae <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800132c:	2100      	movs	r1, #0
 800132e:	2077      	movs	r0, #119	; 0x77
 8001330:	f7ff ff1f 	bl	8001172 <SD_SendCmd>
 8001334:	4603      	mov	r3, r0
 8001336:	2b01      	cmp	r3, #1
 8001338:	d808      	bhi.n	800134c <SD_disk_initialize+0x130>
 800133a:	2100      	movs	r1, #0
 800133c:	2069      	movs	r0, #105	; 0x69
 800133e:	f7ff ff18 	bl	8001172 <SD_SendCmd>
 8001342:	4603      	mov	r3, r0
 8001344:	2b01      	cmp	r3, #1
 8001346:	d801      	bhi.n	800134c <SD_disk_initialize+0x130>
 8001348:	2302      	movs	r3, #2
 800134a:	e000      	b.n	800134e <SD_disk_initialize+0x132>
 800134c:	2301      	movs	r3, #1
 800134e:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001350:	7bbb      	ldrb	r3, [r7, #14]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d10e      	bne.n	8001374 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001356:	2100      	movs	r1, #0
 8001358:	2077      	movs	r0, #119	; 0x77
 800135a:	f7ff ff0a 	bl	8001172 <SD_SendCmd>
 800135e:	4603      	mov	r3, r0
 8001360:	2b01      	cmp	r3, #1
 8001362:	d80e      	bhi.n	8001382 <SD_disk_initialize+0x166>
 8001364:	2100      	movs	r1, #0
 8001366:	2069      	movs	r0, #105	; 0x69
 8001368:	f7ff ff03 	bl	8001172 <SD_SendCmd>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d107      	bne.n	8001382 <SD_disk_initialize+0x166>
 8001372:	e00d      	b.n	8001390 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001374:	2100      	movs	r1, #0
 8001376:	2041      	movs	r0, #65	; 0x41
 8001378:	f7ff fefb 	bl	8001172 <SD_SendCmd>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d005      	beq.n	800138e <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8001382:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <SD_disk_initialize+0x1d0>)
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	b29b      	uxth	r3, r3
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1e1      	bne.n	8001350 <SD_disk_initialize+0x134>
 800138c:	e000      	b.n	8001390 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800138e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001390:	4b16      	ldr	r3, [pc, #88]	; (80013ec <SD_disk_initialize+0x1d0>)
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	b29b      	uxth	r3, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	d007      	beq.n	80013aa <SD_disk_initialize+0x18e>
 800139a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800139e:	2050      	movs	r0, #80	; 0x50
 80013a0:	f7ff fee7 	bl	8001172 <SD_SendCmd>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <SD_disk_initialize+0x192>
 80013aa:	2300      	movs	r3, #0
 80013ac:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80013ae:	4a10      	ldr	r2, [pc, #64]	; (80013f0 <SD_disk_initialize+0x1d4>)
 80013b0:	7bbb      	ldrb	r3, [r7, #14]
 80013b2:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80013b4:	f7ff fd8c 	bl	8000ed0 <DESELECT>
	SPI_RxByte();
 80013b8:	f7ff fdcc 	bl	8000f54 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80013bc:	7bbb      	ldrb	r3, [r7, #14]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d008      	beq.n	80013d4 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <SD_disk_initialize+0x1cc>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	f023 0301 	bic.w	r3, r3, #1
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <SD_disk_initialize+0x1cc>)
 80013d0:	701a      	strb	r2, [r3, #0]
 80013d2:	e001      	b.n	80013d8 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80013d4:	f7ff fe44 	bl	8001060 <SD_PowerOff>
	}

	return Stat;
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <SD_disk_initialize+0x1cc>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	b2db      	uxtb	r3, r3
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd90      	pop	{r4, r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000000 	.word	0x20000000
 80013ec:	200023e2 	.word	0x200023e2
 80013f0:	20000210 	.word	0x20000210

080013f4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <SD_disk_status+0x14>
 8001404:	2301      	movs	r3, #1
 8001406:	e002      	b.n	800140e <SD_disk_status+0x1a>
	return Stat;
 8001408:	4b03      	ldr	r3, [pc, #12]	; (8001418 <SD_disk_status+0x24>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	b2db      	uxtb	r3, r3
}
 800140e:	4618      	mov	r0, r3
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	20000000 	.word	0x20000000

0800141c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	607a      	str	r2, [r7, #4]
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	4603      	mov	r3, r0
 800142a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800142c:	7bfb      	ldrb	r3, [r7, #15]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d102      	bne.n	8001438 <SD_disk_read+0x1c>
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d101      	bne.n	800143c <SD_disk_read+0x20>
 8001438:	2304      	movs	r3, #4
 800143a:	e051      	b.n	80014e0 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800143c:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <SD_disk_read+0xcc>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	b2db      	uxtb	r3, r3
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <SD_disk_read+0x32>
 800144a:	2303      	movs	r3, #3
 800144c:	e048      	b.n	80014e0 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800144e:	4b27      	ldr	r3, [pc, #156]	; (80014ec <SD_disk_read+0xd0>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	2b00      	cmp	r3, #0
 8001458:	d102      	bne.n	8001460 <SD_disk_read+0x44>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	025b      	lsls	r3, r3, #9
 800145e:	607b      	str	r3, [r7, #4]

	SELECT();
 8001460:	f7ff fd28 	bl	8000eb4 <SELECT>

	if (count == 1)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d111      	bne.n	800148e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	2051      	movs	r0, #81	; 0x51
 800146e:	f7ff fe80 	bl	8001172 <SD_SendCmd>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d129      	bne.n	80014cc <SD_disk_read+0xb0>
 8001478:	f44f 7100 	mov.w	r1, #512	; 0x200
 800147c:	68b8      	ldr	r0, [r7, #8]
 800147e:	f7ff fe05 	bl	800108c <SD_RxDataBlock>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d021      	beq.n	80014cc <SD_disk_read+0xb0>
 8001488:	2300      	movs	r3, #0
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	e01e      	b.n	80014cc <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	2052      	movs	r0, #82	; 0x52
 8001492:	f7ff fe6e 	bl	8001172 <SD_SendCmd>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d117      	bne.n	80014cc <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 800149c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014a0:	68b8      	ldr	r0, [r7, #8]
 80014a2:	f7ff fdf3 	bl	800108c <SD_RxDataBlock>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d00a      	beq.n	80014c2 <SD_disk_read+0xa6>
				buff += 512;
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80014b2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	603b      	str	r3, [r7, #0]
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1ed      	bne.n	800149c <SD_disk_read+0x80>
 80014c0:	e000      	b.n	80014c4 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80014c2:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80014c4:	2100      	movs	r1, #0
 80014c6:	204c      	movs	r0, #76	; 0x4c
 80014c8:	f7ff fe53 	bl	8001172 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80014cc:	f7ff fd00 	bl	8000ed0 <DESELECT>
	SPI_RxByte();
 80014d0:	f7ff fd40 	bl	8000f54 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	bf14      	ite	ne
 80014da:	2301      	movne	r3, #1
 80014dc:	2300      	moveq	r3, #0
 80014de:	b2db      	uxtb	r3, r3
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000000 	.word	0x20000000
 80014ec:	20000210 	.word	0x20000210

080014f0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
 80014fa:	603b      	str	r3, [r7, #0]
 80014fc:	4603      	mov	r3, r0
 80014fe:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d102      	bne.n	800150c <SD_disk_write+0x1c>
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <SD_disk_write+0x20>
 800150c:	2304      	movs	r3, #4
 800150e:	e06b      	b.n	80015e8 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001510:	4b37      	ldr	r3, [pc, #220]	; (80015f0 <SD_disk_write+0x100>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <SD_disk_write+0x32>
 800151e:	2303      	movs	r3, #3
 8001520:	e062      	b.n	80015e8 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001522:	4b33      	ldr	r3, [pc, #204]	; (80015f0 <SD_disk_write+0x100>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <SD_disk_write+0x44>
 8001530:	2302      	movs	r3, #2
 8001532:	e059      	b.n	80015e8 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001534:	4b2f      	ldr	r3, [pc, #188]	; (80015f4 <SD_disk_write+0x104>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	2b00      	cmp	r3, #0
 800153e:	d102      	bne.n	8001546 <SD_disk_write+0x56>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	025b      	lsls	r3, r3, #9
 8001544:	607b      	str	r3, [r7, #4]

	SELECT();
 8001546:	f7ff fcb5 	bl	8000eb4 <SELECT>

	if (count == 1)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d110      	bne.n	8001572 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	2058      	movs	r0, #88	; 0x58
 8001554:	f7ff fe0d 	bl	8001172 <SD_SendCmd>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d13a      	bne.n	80015d4 <SD_disk_write+0xe4>
 800155e:	21fe      	movs	r1, #254	; 0xfe
 8001560:	68b8      	ldr	r0, [r7, #8]
 8001562:	f7ff fdc3 	bl	80010ec <SD_TxDataBlock>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d033      	beq.n	80015d4 <SD_disk_write+0xe4>
			count = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	603b      	str	r3, [r7, #0]
 8001570:	e030      	b.n	80015d4 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001572:	4b20      	ldr	r3, [pc, #128]	; (80015f4 <SD_disk_write+0x104>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d007      	beq.n	800158e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800157e:	2100      	movs	r1, #0
 8001580:	2077      	movs	r0, #119	; 0x77
 8001582:	f7ff fdf6 	bl	8001172 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001586:	6839      	ldr	r1, [r7, #0]
 8001588:	2057      	movs	r0, #87	; 0x57
 800158a:	f7ff fdf2 	bl	8001172 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	2059      	movs	r0, #89	; 0x59
 8001592:	f7ff fdee 	bl	8001172 <SD_SendCmd>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d11b      	bne.n	80015d4 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800159c:	21fc      	movs	r1, #252	; 0xfc
 800159e:	68b8      	ldr	r0, [r7, #8]
 80015a0:	f7ff fda4 	bl	80010ec <SD_TxDataBlock>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d00a      	beq.n	80015c0 <SD_disk_write+0xd0>
				buff += 512;
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80015b0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1ee      	bne.n	800159c <SD_disk_write+0xac>
 80015be:	e000      	b.n	80015c2 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80015c0:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80015c2:	21fd      	movs	r1, #253	; 0xfd
 80015c4:	2000      	movs	r0, #0
 80015c6:	f7ff fd91 	bl	80010ec <SD_TxDataBlock>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d101      	bne.n	80015d4 <SD_disk_write+0xe4>
			{
				count = 1;
 80015d0:	2301      	movs	r3, #1
 80015d2:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80015d4:	f7ff fc7c 	bl	8000ed0 <DESELECT>
	SPI_RxByte();
 80015d8:	f7ff fcbc 	bl	8000f54 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	bf14      	ite	ne
 80015e2:	2301      	movne	r3, #1
 80015e4:	2300      	moveq	r3, #0
 80015e6:	b2db      	uxtb	r3, r3
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000000 	.word	0x20000000
 80015f4:	20000210 	.word	0x20000210

080015f8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b08b      	sub	sp, #44	; 0x2c
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	603a      	str	r2, [r7, #0]
 8001602:	71fb      	strb	r3, [r7, #7]
 8001604:	460b      	mov	r3, r1
 8001606:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <SD_disk_ioctl+0x1e>
 8001612:	2304      	movs	r3, #4
 8001614:	e115      	b.n	8001842 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 800161c:	79bb      	ldrb	r3, [r7, #6]
 800161e:	2b05      	cmp	r3, #5
 8001620:	d124      	bne.n	800166c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001622:	6a3b      	ldr	r3, [r7, #32]
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b02      	cmp	r3, #2
 8001628:	d012      	beq.n	8001650 <SD_disk_ioctl+0x58>
 800162a:	2b02      	cmp	r3, #2
 800162c:	dc1a      	bgt.n	8001664 <SD_disk_ioctl+0x6c>
 800162e:	2b00      	cmp	r3, #0
 8001630:	d002      	beq.n	8001638 <SD_disk_ioctl+0x40>
 8001632:	2b01      	cmp	r3, #1
 8001634:	d006      	beq.n	8001644 <SD_disk_ioctl+0x4c>
 8001636:	e015      	b.n	8001664 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001638:	f7ff fd12 	bl	8001060 <SD_PowerOff>
			res = RES_OK;
 800163c:	2300      	movs	r3, #0
 800163e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001642:	e0fc      	b.n	800183e <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001644:	f7ff fcca 	bl	8000fdc <SD_PowerOn>
			res = RES_OK;
 8001648:	2300      	movs	r3, #0
 800164a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800164e:	e0f6      	b.n	800183e <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001650:	6a3b      	ldr	r3, [r7, #32]
 8001652:	1c5c      	adds	r4, r3, #1
 8001654:	f7ff fd10 	bl	8001078 <SD_CheckPower>
 8001658:	4603      	mov	r3, r0
 800165a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 800165c:	2300      	movs	r3, #0
 800165e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001662:	e0ec      	b.n	800183e <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001664:	2304      	movs	r3, #4
 8001666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800166a:	e0e8      	b.n	800183e <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800166c:	4b77      	ldr	r3, [pc, #476]	; (800184c <SD_disk_ioctl+0x254>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	b2db      	uxtb	r3, r3
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <SD_disk_ioctl+0x86>
 800167a:	2303      	movs	r3, #3
 800167c:	e0e1      	b.n	8001842 <SD_disk_ioctl+0x24a>

		SELECT();
 800167e:	f7ff fc19 	bl	8000eb4 <SELECT>

		switch (ctrl)
 8001682:	79bb      	ldrb	r3, [r7, #6]
 8001684:	2b0d      	cmp	r3, #13
 8001686:	f200 80cb 	bhi.w	8001820 <SD_disk_ioctl+0x228>
 800168a:	a201      	add	r2, pc, #4	; (adr r2, 8001690 <SD_disk_ioctl+0x98>)
 800168c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001690:	0800178b 	.word	0x0800178b
 8001694:	080016c9 	.word	0x080016c9
 8001698:	0800177b 	.word	0x0800177b
 800169c:	08001821 	.word	0x08001821
 80016a0:	08001821 	.word	0x08001821
 80016a4:	08001821 	.word	0x08001821
 80016a8:	08001821 	.word	0x08001821
 80016ac:	08001821 	.word	0x08001821
 80016b0:	08001821 	.word	0x08001821
 80016b4:	08001821 	.word	0x08001821
 80016b8:	08001821 	.word	0x08001821
 80016bc:	0800179d 	.word	0x0800179d
 80016c0:	080017c1 	.word	0x080017c1
 80016c4:	080017e5 	.word	0x080017e5
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80016c8:	2100      	movs	r1, #0
 80016ca:	2049      	movs	r0, #73	; 0x49
 80016cc:	f7ff fd51 	bl	8001172 <SD_SendCmd>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f040 80a8 	bne.w	8001828 <SD_disk_ioctl+0x230>
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	2110      	movs	r1, #16
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fcd4 	bl	800108c <SD_RxDataBlock>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 809e 	beq.w	8001828 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80016ec:	7b3b      	ldrb	r3, [r7, #12]
 80016ee:	099b      	lsrs	r3, r3, #6
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d10e      	bne.n	8001714 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80016f6:	7d7b      	ldrb	r3, [r7, #21]
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	7d3b      	ldrb	r3, [r7, #20]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	021b      	lsls	r3, r3, #8
 8001700:	b29b      	uxth	r3, r3
 8001702:	4413      	add	r3, r2
 8001704:	b29b      	uxth	r3, r3
 8001706:	3301      	adds	r3, #1
 8001708:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800170a:	8bfb      	ldrh	r3, [r7, #30]
 800170c:	029a      	lsls	r2, r3, #10
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	e02e      	b.n	8001772 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001714:	7c7b      	ldrb	r3, [r7, #17]
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	b2da      	uxtb	r2, r3
 800171c:	7dbb      	ldrb	r3, [r7, #22]
 800171e:	09db      	lsrs	r3, r3, #7
 8001720:	b2db      	uxtb	r3, r3
 8001722:	4413      	add	r3, r2
 8001724:	b2da      	uxtb	r2, r3
 8001726:	7d7b      	ldrb	r3, [r7, #21]
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	b2db      	uxtb	r3, r3
 800172c:	f003 0306 	and.w	r3, r3, #6
 8001730:	b2db      	uxtb	r3, r3
 8001732:	4413      	add	r3, r2
 8001734:	b2db      	uxtb	r3, r3
 8001736:	3302      	adds	r3, #2
 8001738:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800173c:	7d3b      	ldrb	r3, [r7, #20]
 800173e:	099b      	lsrs	r3, r3, #6
 8001740:	b2db      	uxtb	r3, r3
 8001742:	b29a      	uxth	r2, r3
 8001744:	7cfb      	ldrb	r3, [r7, #19]
 8001746:	b29b      	uxth	r3, r3
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	b29b      	uxth	r3, r3
 800174c:	4413      	add	r3, r2
 800174e:	b29a      	uxth	r2, r3
 8001750:	7cbb      	ldrb	r3, [r7, #18]
 8001752:	029b      	lsls	r3, r3, #10
 8001754:	b29b      	uxth	r3, r3
 8001756:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800175a:	b29b      	uxth	r3, r3
 800175c:	4413      	add	r3, r2
 800175e:	b29b      	uxth	r3, r3
 8001760:	3301      	adds	r3, #1
 8001762:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001764:	8bfa      	ldrh	r2, [r7, #30]
 8001766:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800176a:	3b09      	subs	r3, #9
 800176c:	409a      	lsls	r2, r3
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001772:	2300      	movs	r3, #0
 8001774:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001778:	e056      	b.n	8001828 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001780:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001782:	2300      	movs	r3, #0
 8001784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001788:	e055      	b.n	8001836 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800178a:	f7ff fc0d 	bl	8000fa8 <SD_ReadyWait>
 800178e:	4603      	mov	r3, r0
 8001790:	2bff      	cmp	r3, #255	; 0xff
 8001792:	d14b      	bne.n	800182c <SD_disk_ioctl+0x234>
 8001794:	2300      	movs	r3, #0
 8001796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800179a:	e047      	b.n	800182c <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800179c:	2100      	movs	r1, #0
 800179e:	2049      	movs	r0, #73	; 0x49
 80017a0:	f7ff fce7 	bl	8001172 <SD_SendCmd>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d142      	bne.n	8001830 <SD_disk_ioctl+0x238>
 80017aa:	2110      	movs	r1, #16
 80017ac:	6a38      	ldr	r0, [r7, #32]
 80017ae:	f7ff fc6d 	bl	800108c <SD_RxDataBlock>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d03b      	beq.n	8001830 <SD_disk_ioctl+0x238>
 80017b8:	2300      	movs	r3, #0
 80017ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017be:	e037      	b.n	8001830 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80017c0:	2100      	movs	r1, #0
 80017c2:	204a      	movs	r0, #74	; 0x4a
 80017c4:	f7ff fcd5 	bl	8001172 <SD_SendCmd>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d132      	bne.n	8001834 <SD_disk_ioctl+0x23c>
 80017ce:	2110      	movs	r1, #16
 80017d0:	6a38      	ldr	r0, [r7, #32]
 80017d2:	f7ff fc5b 	bl	800108c <SD_RxDataBlock>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d02b      	beq.n	8001834 <SD_disk_ioctl+0x23c>
 80017dc:	2300      	movs	r3, #0
 80017de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017e2:	e027      	b.n	8001834 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80017e4:	2100      	movs	r1, #0
 80017e6:	207a      	movs	r0, #122	; 0x7a
 80017e8:	f7ff fcc3 	bl	8001172 <SD_SendCmd>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d116      	bne.n	8001820 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80017f2:	2300      	movs	r3, #0
 80017f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80017f8:	e00b      	b.n	8001812 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80017fa:	6a3c      	ldr	r4, [r7, #32]
 80017fc:	1c63      	adds	r3, r4, #1
 80017fe:	623b      	str	r3, [r7, #32]
 8001800:	f7ff fba8 	bl	8000f54 <SPI_RxByte>
 8001804:	4603      	mov	r3, r0
 8001806:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001808:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800180c:	3301      	adds	r3, #1
 800180e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001812:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001816:	2b03      	cmp	r3, #3
 8001818:	d9ef      	bls.n	80017fa <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001820:	2304      	movs	r3, #4
 8001822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001826:	e006      	b.n	8001836 <SD_disk_ioctl+0x23e>
			break;
 8001828:	bf00      	nop
 800182a:	e004      	b.n	8001836 <SD_disk_ioctl+0x23e>
			break;
 800182c:	bf00      	nop
 800182e:	e002      	b.n	8001836 <SD_disk_ioctl+0x23e>
			break;
 8001830:	bf00      	nop
 8001832:	e000      	b.n	8001836 <SD_disk_ioctl+0x23e>
			break;
 8001834:	bf00      	nop
		}

		DESELECT();
 8001836:	f7ff fb4b 	bl	8000ed0 <DESELECT>
		SPI_RxByte();
 800183a:	f7ff fb8b 	bl	8000f54 <SPI_RxByte>
	}

	return res;
 800183e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001842:	4618      	mov	r0, r3
 8001844:	372c      	adds	r7, #44	; 0x2c
 8001846:	46bd      	mov	sp, r7
 8001848:	bd90      	pop	{r4, r7, pc}
 800184a:	bf00      	nop
 800184c:	20000000 	.word	0x20000000

08001850 <LCD_Write>:
#include "string.h"
#include "stdio.h"


void LCD_Write(uint8_t data)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_PORT, LCD_D4, ((data >> 0) & 0x01));
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	b2db      	uxtb	r3, r3
 8001862:	461a      	mov	r2, r3
 8001864:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001868:	481c      	ldr	r0, [pc, #112]	; (80018dc <LCD_Write+0x8c>)
 800186a:	f001 ff43 	bl	80036f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT, LCD_D5, ((data >> 1) & 0x01));
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	085b      	lsrs	r3, r3, #1
 8001872:	b2db      	uxtb	r3, r3
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	b2db      	uxtb	r3, r3
 800187a:	461a      	mov	r2, r3
 800187c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001880:	4816      	ldr	r0, [pc, #88]	; (80018dc <LCD_Write+0x8c>)
 8001882:	f001 ff37 	bl	80036f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT, LCD_D6, ((data >> 2) & 0x01));
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	089b      	lsrs	r3, r3, #2
 800188a:	b2db      	uxtb	r3, r3
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	b2db      	uxtb	r3, r3
 8001892:	461a      	mov	r2, r3
 8001894:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001898:	4810      	ldr	r0, [pc, #64]	; (80018dc <LCD_Write+0x8c>)
 800189a:	f001 ff2b 	bl	80036f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT, LCD_D7, ((data >> 3) & 0x01));
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	08db      	lsrs	r3, r3, #3
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	461a      	mov	r2, r3
 80018ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018b0:	480a      	ldr	r0, [pc, #40]	; (80018dc <LCD_Write+0x8c>)
 80018b2:	f001 ff1f 	bl	80036f4 <HAL_GPIO_WritePin>

// kich hoat chan enable
	HAL_GPIO_WritePin(LCD_PORT,LCD_E, 1);
 80018b6:	2201      	movs	r2, #1
 80018b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018bc:	4807      	ldr	r0, [pc, #28]	; (80018dc <LCD_Write+0x8c>)
 80018be:	f001 ff19 	bl	80036f4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80018c2:	2001      	movs	r0, #1
 80018c4:	f000 ff84 	bl	80027d0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_PORT,LCD_E, 0);
 80018c8:	2200      	movs	r2, #0
 80018ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018ce:	4803      	ldr	r0, [pc, #12]	; (80018dc <LCD_Write+0x8c>)
 80018d0:	f001 ff10 	bl	80036f4 <HAL_GPIO_WritePin>
}
 80018d4:	bf00      	nop
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40010c00 	.word	0x40010c00

080018e0 <LCD_Send>:
void LCD_Send(uint8_t Reg, uint8_t data)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	460a      	mov	r2, r1
 80018ea:	71fb      	strb	r3, [r7, #7]
 80018ec:	4613      	mov	r3, r2
 80018ee:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(LCD_PORT, LCD_RS, Reg);   // Reg = 0 : thanh ghi data ; Reg = 1 : thanh ghi lenh
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	461a      	mov	r2, r3
 80018f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018f8:	4808      	ldr	r0, [pc, #32]	; (800191c <LCD_Send+0x3c>)
 80018fa:	f001 fefb 	bl	80036f4 <HAL_GPIO_WritePin>
	LCD_Write(data >> 4);
 80018fe:	79bb      	ldrb	r3, [r7, #6]
 8001900:	091b      	lsrs	r3, r3, #4
 8001902:	b2db      	uxtb	r3, r3
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ffa3 	bl	8001850 <LCD_Write>
	LCD_Write(data);
 800190a:	79bb      	ldrb	r3, [r7, #6]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff ff9f 	bl	8001850 <LCD_Write>
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40010c00 	.word	0x40010c00

08001920 <LCD_Init>:
void LCD_Init()
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_PORT, LCD_RW, 0);    // chon che do ghi
 8001924:	2200      	movs	r2, #0
 8001926:	2100      	movs	r1, #0
 8001928:	480e      	ldr	r0, [pc, #56]	; (8001964 <LCD_Init+0x44>)
 800192a:	f001 fee3 	bl	80036f4 <HAL_GPIO_WritePin>

	LCD_Send(cmd_reg, 0x33);                   // lenh de khoi tao
 800192e:	2133      	movs	r1, #51	; 0x33
 8001930:	2000      	movs	r0, #0
 8001932:	f7ff ffd5 	bl	80018e0 <LCD_Send>
	LCD_Send(cmd_reg, 0x32);                  // lenh de khoi tao
 8001936:	2132      	movs	r1, #50	; 0x32
 8001938:	2000      	movs	r0, #0
 800193a:	f7ff ffd1 	bl	80018e0 <LCD_Send>
	LCD_Send(cmd_reg, 0x28);                   // che do 4 bit, 2 hang, 5x7
 800193e:	2128      	movs	r1, #40	; 0x28
 8001940:	2000      	movs	r0, #0
 8001942:	f7ff ffcd 	bl	80018e0 <LCD_Send>
	LCD_Send(cmd_reg, 0x0C);                   // hien thi man hinh va tat con tro
 8001946:	210c      	movs	r1, #12
 8001948:	2000      	movs	r0, #0
 800194a:	f7ff ffc9 	bl	80018e0 <LCD_Send>
	LCD_Send(cmd_reg, 0x06);                  // tang con tro
 800194e:	2106      	movs	r1, #6
 8001950:	2000      	movs	r0, #0
 8001952:	f7ff ffc5 	bl	80018e0 <LCD_Send>
	LCD_Send(cmd_reg, 0x01);                   // xoa toan man hinh
 8001956:	2101      	movs	r1, #1
 8001958:	2000      	movs	r0, #0
 800195a:	f7ff ffc1 	bl	80018e0 <LCD_Send>
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40010c00 	.word	0x40010c00

08001968 <LCD_Location>:
void LCD_Clear()                                //xoa toan man hinh
{
	LCD_Send(cmd_reg, 0x01);
	HAL_Delay(2);
}
void LCD_Location(uint8_t x, uint8_t y) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	460a      	mov	r2, r1
 8001972:	71fb      	strb	r3, [r7, #7]
 8001974:	4613      	mov	r3, r2
 8001976:	71bb      	strb	r3, [r7, #6]
    if (x == 0 && y < 16)
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d10a      	bne.n	8001994 <LCD_Location+0x2c>
 800197e:	79bb      	ldrb	r3, [r7, #6]
 8001980:	2b0f      	cmp	r3, #15
 8001982:	d807      	bhi.n	8001994 <LCD_Location+0x2c>
        LCD_Send(cmd_reg, 0x80 + y);
 8001984:	79bb      	ldrb	r3, [r7, #6]
 8001986:	3b80      	subs	r3, #128	; 0x80
 8001988:	b2db      	uxtb	r3, r3
 800198a:	4619      	mov	r1, r3
 800198c:	2000      	movs	r0, #0
 800198e:	f7ff ffa7 	bl	80018e0 <LCD_Send>
    else if (x == 1 && y < 16)
        LCD_Send(cmd_reg, 0xC0 + y);
}
 8001992:	e00c      	b.n	80019ae <LCD_Location+0x46>
    else if (x == 1 && y < 16)
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d109      	bne.n	80019ae <LCD_Location+0x46>
 800199a:	79bb      	ldrb	r3, [r7, #6]
 800199c:	2b0f      	cmp	r3, #15
 800199e:	d806      	bhi.n	80019ae <LCD_Location+0x46>
        LCD_Send(cmd_reg, 0xC0 + y);
 80019a0:	79bb      	ldrb	r3, [r7, #6]
 80019a2:	3b40      	subs	r3, #64	; 0x40
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	4619      	mov	r1, r3
 80019a8:	2000      	movs	r0, #0
 80019aa:	f7ff ff99 	bl	80018e0 <LCD_Send>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <LCD_Write_String>:
void LCD_Write_String(char* string)              // ghi chuoi ki tu
{
 80019b6:	b590      	push	{r4, r7, lr}
 80019b8:	b085      	sub	sp, #20
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < strlen(string); i++)
 80019be:	2300      	movs	r3, #0
 80019c0:	73fb      	strb	r3, [r7, #15]
 80019c2:	e00a      	b.n	80019da <LCD_Write_String+0x24>
	{
		LCD_Send(data_reg, string[i]);
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	4619      	mov	r1, r3
 80019ce:	2001      	movs	r0, #1
 80019d0:	f7ff ff86 	bl	80018e0 <LCD_Send>
	for(uint8_t i = 0; i < strlen(string); i++)
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
 80019d6:	3301      	adds	r3, #1
 80019d8:	73fb      	strb	r3, [r7, #15]
 80019da:	7bfc      	ldrb	r4, [r7, #15]
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7fe fbb7 	bl	8000150 <strlen>
 80019e2:	4603      	mov	r3, r0
 80019e4:	429c      	cmp	r4, r3
 80019e6:	d3ed      	bcc.n	80019c4 <LCD_Write_String+0xe>
	}
}
 80019e8:	bf00      	nop
 80019ea:	bf00      	nop
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd90      	pop	{r4, r7, pc}
	...

080019f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80019fa:	f000 fe87 	bl	800270c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019fe:	f000 f925 	bl	8001c4c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a02:	f000 fa1b 	bl	8001e3c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001a06:	f000 f9ef 	bl	8001de8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001a0a:	f000 f979 	bl	8001d00 <MX_ADC1_Init>
  MX_SPI1_Init();
 8001a0e:	f000 f9b5 	bl	8001d7c <MX_SPI1_Init>
  MX_FATFS_Init();
 8001a12:	f003 fa53 	bl	8004ebc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK) Error_Handler();
 8001a16:	4875      	ldr	r0, [pc, #468]	; (8001bec <main+0x1f8>)
 8001a18:	f001 fb56 	bl	80030c8 <HAL_ADCEx_Calibration_Start>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <main+0x32>
 8001a22:	f000 fa87 	bl	8001f34 <Error_Handler>
  MQ135_Init(&mq135, &hadc1, ADC_CHANNEL_0, 75.2f, 9.7f);
 8001a26:	4b72      	ldr	r3, [pc, #456]	; (8001bf0 <main+0x1fc>)
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	4b72      	ldr	r3, [pc, #456]	; (8001bf4 <main+0x200>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	496f      	ldr	r1, [pc, #444]	; (8001bec <main+0x1f8>)
 8001a30:	4871      	ldr	r0, [pc, #452]	; (8001bf8 <main+0x204>)
 8001a32:	f000 fa84 	bl	8001f3e <MQ135_Init>
  LCD_Init();
 8001a36:	f7ff ff73 	bl	8001920 <LCD_Init>
  LCD_Location(0, 0);
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f7ff ff93 	bl	8001968 <LCD_Location>
  fresult = f_mount(&fs, "", 1); // Gắn thẻ SD
 8001a42:	2201      	movs	r2, #1
 8001a44:	496d      	ldr	r1, [pc, #436]	; (8001bfc <main+0x208>)
 8001a46:	486e      	ldr	r0, [pc, #440]	; (8001c00 <main+0x20c>)
 8001a48:	f005 ff08 	bl	800785c <f_mount>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	461a      	mov	r2, r3
 8001a50:	4b6c      	ldr	r3, [pc, #432]	; (8001c04 <main+0x210>)
 8001a52:	701a      	strb	r2, [r3, #0]
  if (fresult == FR_OK) {
 8001a54:	4b6b      	ldr	r3, [pc, #428]	; (8001c04 <main+0x210>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d107      	bne.n	8001a6c <main+0x78>
      LCD_Write_String("SD initialized");
 8001a5c:	486a      	ldr	r0, [pc, #424]	; (8001c08 <main+0x214>)
 8001a5e:	f7ff ffaa 	bl	80019b6 <LCD_Write_String>
      HAL_Delay(2000);
 8001a62:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a66:	f000 feb3 	bl	80027d0 <HAL_Delay>
 8001a6a:	e007      	b.n	8001a7c <main+0x88>
  } else {
      LCD_Write_String("SD error");
 8001a6c:	4867      	ldr	r0, [pc, #412]	; (8001c0c <main+0x218>)
 8001a6e:	f7ff ffa2 	bl	80019b6 <LCD_Write_String>
      HAL_Delay(2000);
 8001a72:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a76:	f000 feab 	bl	80027d0 <HAL_Delay>
      while(1);
 8001a7a:	e7fe      	b.n	8001a7a <main+0x86>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    co2_ppm = MQ135_GetCorrectedPPM(&mq135, 30.0f, 90.0f);
 8001a7c:	4a64      	ldr	r2, [pc, #400]	; (8001c10 <main+0x21c>)
 8001a7e:	4965      	ldr	r1, [pc, #404]	; (8001c14 <main+0x220>)
 8001a80:	485d      	ldr	r0, [pc, #372]	; (8001bf8 <main+0x204>)
 8001a82:	f000 fbc1 	bl	8002208 <MQ135_GetCorrectedPPM>
 8001a86:	4603      	mov	r3, r0
 8001a88:	4a63      	ldr	r2, [pc, #396]	; (8001c18 <main+0x224>)
 8001a8a:	6013      	str	r3, [r2, #0]

    // Dòng 1: Hiển thị CO2
    LCD_Location(0, 0);
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f7ff ff6a 	bl	8001968 <LCD_Location>
    snprintf(buffer, sizeof(buffer), "CO2: %.0f ppm   ", co2_ppm);
 8001a94:	4b60      	ldr	r3, [pc, #384]	; (8001c18 <main+0x224>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe fcc5 	bl	8000428 <__aeabi_f2d>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	e9cd 2300 	strd	r2, r3, [sp]
 8001aa6:	4a5d      	ldr	r2, [pc, #372]	; (8001c1c <main+0x228>)
 8001aa8:	2180      	movs	r1, #128	; 0x80
 8001aaa:	485d      	ldr	r0, [pc, #372]	; (8001c20 <main+0x22c>)
 8001aac:	f007 fdb0 	bl	8009610 <sniprintf>
    LCD_Write_String(buffer);
 8001ab0:	485b      	ldr	r0, [pc, #364]	; (8001c20 <main+0x22c>)
 8001ab2:	f7ff ff80 	bl	80019b6 <LCD_Write_String>
       LCD_Location(1, 0); // Dòng 2 của LCD
       snprintf(buffer, sizeof(buffer), "RZero: %.2f   ", rzero_avg);
       LCD_Write_String(buffer);*/

    // Điều khiển đèn và còi dựa trên giá trị CO2
    if (co2_ppm >= 1000 && co2_ppm <= 3000) {
 8001ab6:	4b58      	ldr	r3, [pc, #352]	; (8001c18 <main+0x224>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	495a      	ldr	r1, [pc, #360]	; (8001c24 <main+0x230>)
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff f9e5 	bl	8000e8c <__aeabi_fcmpge>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d014      	beq.n	8001af2 <main+0xfe>
 8001ac8:	4b53      	ldr	r3, [pc, #332]	; (8001c18 <main+0x224>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4956      	ldr	r1, [pc, #344]	; (8001c28 <main+0x234>)
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff f9d2 	bl	8000e78 <__aeabi_fcmple>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d00b      	beq.n	8001af2 <main+0xfe>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET); // Bật đèn
 8001ada:	2201      	movs	r2, #1
 8001adc:	2104      	movs	r1, #4
 8001ade:	4853      	ldr	r0, [pc, #332]	; (8001c2c <main+0x238>)
 8001ae0:	f001 fe08 	bl	80036f4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET); // Tắt còi
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001aea:	4850      	ldr	r0, [pc, #320]	; (8001c2c <main+0x238>)
 8001aec:	f001 fe02 	bl	80036f4 <HAL_GPIO_WritePin>
 8001af0:	e01f      	b.n	8001b32 <main+0x13e>
    } else if (co2_ppm > 3000) {
 8001af2:	4b49      	ldr	r3, [pc, #292]	; (8001c18 <main+0x224>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	494c      	ldr	r1, [pc, #304]	; (8001c28 <main+0x234>)
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff f9d1 	bl	8000ea0 <__aeabi_fcmpgt>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00b      	beq.n	8001b1c <main+0x128>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); // Bật còi
 8001b04:	2200      	movs	r2, #0
 8001b06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b0a:	4848      	ldr	r0, [pc, #288]	; (8001c2c <main+0x238>)
 8001b0c:	f001 fdf2 	bl	80036f4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET); // Bật đèn
 8001b10:	2201      	movs	r2, #1
 8001b12:	2104      	movs	r1, #4
 8001b14:	4845      	ldr	r0, [pc, #276]	; (8001c2c <main+0x238>)
 8001b16:	f001 fded 	bl	80036f4 <HAL_GPIO_WritePin>
 8001b1a:	e00a      	b.n	8001b32 <main+0x13e>
    } else {
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); // Tắt đèn
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2104      	movs	r1, #4
 8001b20:	4842      	ldr	r0, [pc, #264]	; (8001c2c <main+0x238>)
 8001b22:	f001 fde7 	bl	80036f4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET); // Tắt còi
 8001b26:	2201      	movs	r2, #1
 8001b28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b2c:	483f      	ldr	r0, [pc, #252]	; (8001c2c <main+0x238>)
 8001b2e:	f001 fde1 	bl	80036f4 <HAL_GPIO_WritePin>
    }

    // Lưu dữ liệu vào file "co2data.txt"
    if (fresult == FR_OK) { // Chỉ lưu nếu thẻ SD đã được gắn thành công
 8001b32:	4b34      	ldr	r3, [pc, #208]	; (8001c04 <main+0x210>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d135      	bne.n	8001ba6 <main+0x1b2>
      fresult = f_open(&fil, "co2data.txt", FA_OPEN_ALWAYS | FA_WRITE);
 8001b3a:	2212      	movs	r2, #18
 8001b3c:	493c      	ldr	r1, [pc, #240]	; (8001c30 <main+0x23c>)
 8001b3e:	483d      	ldr	r0, [pc, #244]	; (8001c34 <main+0x240>)
 8001b40:	f005 fed6 	bl	80078f0 <f_open>
 8001b44:	4603      	mov	r3, r0
 8001b46:	461a      	mov	r2, r3
 8001b48:	4b2e      	ldr	r3, [pc, #184]	; (8001c04 <main+0x210>)
 8001b4a:	701a      	strb	r2, [r3, #0]
      if (fresult == FR_OK) {
 8001b4c:	4b2d      	ldr	r3, [pc, #180]	; (8001c04 <main+0x210>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d128      	bne.n	8001ba6 <main+0x1b2>
      // Di chuyển con trỏ đến cuối file
        f_lseek(&fil, f_size(&fil));
 8001b54:	4b37      	ldr	r3, [pc, #220]	; (8001c34 <main+0x240>)
 8001b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4835      	ldr	r0, [pc, #212]	; (8001c34 <main+0x240>)
 8001b60:	f006 fd10 	bl	8008584 <f_lseek>
        snprintf(buffer, sizeof(buffer), "CO2: %.0f ppm, Time: %lu\r\n", co2_ppm, time_counter);
 8001b64:	4b2c      	ldr	r3, [pc, #176]	; (8001c18 <main+0x224>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7fe fc5d 	bl	8000428 <__aeabi_f2d>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4931      	ldr	r1, [pc, #196]	; (8001c38 <main+0x244>)
 8001b74:	6809      	ldr	r1, [r1, #0]
 8001b76:	9102      	str	r1, [sp, #8]
 8001b78:	e9cd 2300 	strd	r2, r3, [sp]
 8001b7c:	4a2f      	ldr	r2, [pc, #188]	; (8001c3c <main+0x248>)
 8001b7e:	2180      	movs	r1, #128	; 0x80
 8001b80:	4827      	ldr	r0, [pc, #156]	; (8001c20 <main+0x22c>)
 8001b82:	f007 fd45 	bl	8009610 <sniprintf>
        fresult = f_write(&fil, buffer, strlen(buffer), &bw);
 8001b86:	4826      	ldr	r0, [pc, #152]	; (8001c20 <main+0x22c>)
 8001b88:	f7fe fae2 	bl	8000150 <strlen>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	4b2c      	ldr	r3, [pc, #176]	; (8001c40 <main+0x24c>)
 8001b90:	4923      	ldr	r1, [pc, #140]	; (8001c20 <main+0x22c>)
 8001b92:	4828      	ldr	r0, [pc, #160]	; (8001c34 <main+0x240>)
 8001b94:	f006 f9c4 	bl	8007f20 <f_write>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <main+0x210>)
 8001b9e:	701a      	strb	r2, [r3, #0]
        f_close(&fil);
 8001ba0:	4824      	ldr	r0, [pc, #144]	; (8001c34 <main+0x240>)
 8001ba2:	f006 fcc4 	bl	800852e <f_close>
      }
    }
    time_counter += 2;
 8001ba6:	4b24      	ldr	r3, [pc, #144]	; (8001c38 <main+0x244>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	3302      	adds	r3, #2
 8001bac:	4a22      	ldr	r2, [pc, #136]	; (8001c38 <main+0x244>)
 8001bae:	6013      	str	r3, [r2, #0]

    // Gửi dữ liệu CO2 qua UART đến ESP32
    snprintf(buffer, sizeof(buffer), "%.0f\n", co2_ppm);
 8001bb0:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <main+0x224>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe fc37 	bl	8000428 <__aeabi_f2d>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	e9cd 2300 	strd	r2, r3, [sp]
 8001bc2:	4a20      	ldr	r2, [pc, #128]	; (8001c44 <main+0x250>)
 8001bc4:	2180      	movs	r1, #128	; 0x80
 8001bc6:	4816      	ldr	r0, [pc, #88]	; (8001c20 <main+0x22c>)
 8001bc8:	f007 fd22 	bl	8009610 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001bcc:	4814      	ldr	r0, [pc, #80]	; (8001c20 <main+0x22c>)
 8001bce:	f7fe fabf 	bl	8000150 <strlen>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bda:	4911      	ldr	r1, [pc, #68]	; (8001c20 <main+0x22c>)
 8001bdc:	481a      	ldr	r0, [pc, #104]	; (8001c48 <main+0x254>)
 8001bde:	f002 ff98 	bl	8004b12 <HAL_UART_Transmit>

    HAL_Delay(4000); // Cập nhật CO2 mỗi 3 giây
 8001be2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001be6:	f000 fdf3 	bl	80027d0 <HAL_Delay>
    co2_ppm = MQ135_GetCorrectedPPM(&mq135, 30.0f, 90.0f);
 8001bea:	e747      	b.n	8001a7c <main+0x88>
 8001bec:	20002310 	.word	0x20002310
 8001bf0:	411b3333 	.word	0x411b3333
 8001bf4:	42966666 	.word	0x42966666
 8001bf8:	20000214 	.word	0x20000214
 8001bfc:	0800c908 	.word	0x0800c908
 8001c00:	200002a8 	.word	0x200002a8
 8001c04:	20002304 	.word	0x20002304
 8001c08:	0800c90c 	.word	0x0800c90c
 8001c0c:	0800c91c 	.word	0x0800c91c
 8001c10:	42b40000 	.word	0x42b40000
 8001c14:	41f00000 	.word	0x41f00000
 8001c18:	200002a4 	.word	0x200002a4
 8001c1c:	0800c928 	.word	0x0800c928
 8001c20:	20000224 	.word	0x20000224
 8001c24:	447a0000 	.word	0x447a0000
 8001c28:	453b8000 	.word	0x453b8000
 8001c2c:	40010c00 	.word	0x40010c00
 8001c30:	0800c93c 	.word	0x0800c93c
 8001c34:	200012d8 	.word	0x200012d8
 8001c38:	2000230c 	.word	0x2000230c
 8001c3c:	0800c948 	.word	0x0800c948
 8001c40:	20002308 	.word	0x20002308
 8001c44:	0800c964 	.word	0x0800c964
 8001c48:	20002398 	.word	0x20002398

08001c4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b094      	sub	sp, #80	; 0x50
 8001c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c56:	2228      	movs	r2, #40	; 0x28
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f007 f870 	bl	8008d40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c86:	2300      	movs	r3, #0
 8001c88:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f001 fd3f 	bl	8003724 <HAL_RCC_OscConfig>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001cac:	f000 f942 	bl	8001f34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cb0:	230f      	movs	r3, #15
 8001cb2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cc0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	2100      	movs	r1, #0
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f001 ffab 	bl	8003c28 <HAL_RCC_ClockConfig>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001cd8:	f000 f92c 	bl	8001f34 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ce4:	1d3b      	adds	r3, r7, #4
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f002 f92c 	bl	8003f44 <HAL_RCCEx_PeriphCLKConfig>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001cf2:	f000 f91f 	bl	8001f34 <Error_Handler>
  }
}
 8001cf6:	bf00      	nop
 8001cf8:	3750      	adds	r7, #80	; 0x50
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d06:	1d3b      	adds	r3, r7, #4
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d10:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <MX_ADC1_Init+0x74>)
 8001d12:	4a19      	ldr	r2, [pc, #100]	; (8001d78 <MX_ADC1_Init+0x78>)
 8001d14:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d16:	4b17      	ldr	r3, [pc, #92]	; (8001d74 <MX_ADC1_Init+0x74>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d1c:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <MX_ADC1_Init+0x74>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d22:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <MX_ADC1_Init+0x74>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d28:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <MX_ADC1_Init+0x74>)
 8001d2a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001d2e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d30:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <MX_ADC1_Init+0x74>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001d36:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <MX_ADC1_Init+0x74>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d3c:	480d      	ldr	r0, [pc, #52]	; (8001d74 <MX_ADC1_Init+0x74>)
 8001d3e:	f000 fd6b 	bl	8002818 <HAL_ADC_Init>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001d48:	f000 f8f4 	bl	8001f34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d50:	2301      	movs	r3, #1
 8001d52:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001d54:	2307      	movs	r3, #7
 8001d56:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d58:	1d3b      	adds	r3, r7, #4
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4805      	ldr	r0, [pc, #20]	; (8001d74 <MX_ADC1_Init+0x74>)
 8001d5e:	f001 f81f 	bl	8002da0 <HAL_ADC_ConfigChannel>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001d68:	f000 f8e4 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d6c:	bf00      	nop
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20002310 	.word	0x20002310
 8001d78:	40012400 	.word	0x40012400

08001d7c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d80:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <MX_SPI1_Init+0x64>)
 8001d82:	4a18      	ldr	r2, [pc, #96]	; (8001de4 <MX_SPI1_Init+0x68>)
 8001d84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d86:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <MX_SPI1_Init+0x64>)
 8001d88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d8e:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <MX_SPI1_Init+0x64>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d94:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <MX_SPI1_Init+0x64>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <MX_SPI1_Init+0x64>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001da0:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <MX_SPI1_Init+0x64>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001da6:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <MX_SPI1_Init+0x64>)
 8001da8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001dae:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <MX_SPI1_Init+0x64>)
 8001db0:	2220      	movs	r2, #32
 8001db2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001db4:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <MX_SPI1_Init+0x64>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dba:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <MX_SPI1_Init+0x64>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dc0:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <MX_SPI1_Init+0x64>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <MX_SPI1_Init+0x64>)
 8001dc8:	220a      	movs	r2, #10
 8001dca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001dcc:	4804      	ldr	r0, [pc, #16]	; (8001de0 <MX_SPI1_Init+0x64>)
 8001dce:	f002 fa25 	bl	800421c <HAL_SPI_Init>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001dd8:	f000 f8ac 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20002340 	.word	0x20002340
 8001de4:	40013000 	.word	0x40013000

08001de8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001dec:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001dee:	4a12      	ldr	r2, [pc, #72]	; (8001e38 <MX_USART1_UART_Init+0x50>)
 8001df0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001df4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001df8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e00:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e06:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e0c:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001e0e:	220c      	movs	r2, #12
 8001e10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e12:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e1e:	4805      	ldr	r0, [pc, #20]	; (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001e20:	f002 fe27 	bl	8004a72 <HAL_UART_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e2a:	f000 f883 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20002398 	.word	0x20002398
 8001e38:	40013800 	.word	0x40013800

08001e3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e42:	f107 0310 	add.w	r3, r7, #16
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	605a      	str	r2, [r3, #4]
 8001e4c:	609a      	str	r2, [r3, #8]
 8001e4e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e50:	4b35      	ldr	r3, [pc, #212]	; (8001f28 <MX_GPIO_Init+0xec>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	4a34      	ldr	r2, [pc, #208]	; (8001f28 <MX_GPIO_Init+0xec>)
 8001e56:	f043 0310 	orr.w	r3, r3, #16
 8001e5a:	6193      	str	r3, [r2, #24]
 8001e5c:	4b32      	ldr	r3, [pc, #200]	; (8001f28 <MX_GPIO_Init+0xec>)
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	f003 0310 	and.w	r3, r3, #16
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e68:	4b2f      	ldr	r3, [pc, #188]	; (8001f28 <MX_GPIO_Init+0xec>)
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	4a2e      	ldr	r2, [pc, #184]	; (8001f28 <MX_GPIO_Init+0xec>)
 8001e6e:	f043 0320 	orr.w	r3, r3, #32
 8001e72:	6193      	str	r3, [r2, #24]
 8001e74:	4b2c      	ldr	r3, [pc, #176]	; (8001f28 <MX_GPIO_Init+0xec>)
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	f003 0320 	and.w	r3, r3, #32
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e80:	4b29      	ldr	r3, [pc, #164]	; (8001f28 <MX_GPIO_Init+0xec>)
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	4a28      	ldr	r2, [pc, #160]	; (8001f28 <MX_GPIO_Init+0xec>)
 8001e86:	f043 0304 	orr.w	r3, r3, #4
 8001e8a:	6193      	str	r3, [r2, #24]
 8001e8c:	4b26      	ldr	r3, [pc, #152]	; (8001f28 <MX_GPIO_Init+0xec>)
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	607b      	str	r3, [r7, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e98:	4b23      	ldr	r3, [pc, #140]	; (8001f28 <MX_GPIO_Init+0xec>)
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	4a22      	ldr	r2, [pc, #136]	; (8001f28 <MX_GPIO_Init+0xec>)
 8001e9e:	f043 0308 	orr.w	r3, r3, #8
 8001ea2:	6193      	str	r3, [r2, #24]
 8001ea4:	4b20      	ldr	r3, [pc, #128]	; (8001f28 <MX_GPIO_Init+0xec>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	f003 0308 	and.w	r3, r3, #8
 8001eac:	603b      	str	r3, [r7, #0]
 8001eae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2110      	movs	r1, #16
 8001eb4:	481d      	ldr	r0, [pc, #116]	; (8001f2c <MX_GPIO_Init+0xf0>)
 8001eb6:	f001 fc1d 	bl	80036f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f64f 3104 	movw	r1, #64260	; 0xfb04
 8001ec0:	481b      	ldr	r0, [pc, #108]	; (8001f30 <MX_GPIO_Init+0xf4>)
 8001ec2:	f001 fc17 	bl	80036f4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ec6:	2310      	movs	r3, #16
 8001ec8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed6:	f107 0310 	add.w	r3, r7, #16
 8001eda:	4619      	mov	r1, r3
 8001edc:	4813      	ldr	r0, [pc, #76]	; (8001f2c <MX_GPIO_Init+0xf0>)
 8001ede:	f001 fa85 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB13 PB14
                           PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001ee2:	f24f 3304 	movw	r3, #62212	; 0xf304
 8001ee6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eec:	2301      	movs	r3, #1
 8001eee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef4:	f107 0310 	add.w	r3, r7, #16
 8001ef8:	4619      	mov	r1, r3
 8001efa:	480d      	ldr	r0, [pc, #52]	; (8001f30 <MX_GPIO_Init+0xf4>)
 8001efc:	f001 fa76 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001f06:	2311      	movs	r3, #17
 8001f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f12:	f107 0310 	add.w	r3, r7, #16
 8001f16:	4619      	mov	r1, r3
 8001f18:	4805      	ldr	r0, [pc, #20]	; (8001f30 <MX_GPIO_Init+0xf4>)
 8001f1a:	f001 fa67 	bl	80033ec <HAL_GPIO_Init>

}
 8001f1e:	bf00      	nop
 8001f20:	3720      	adds	r7, #32
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40010800 	.word	0x40010800
 8001f30:	40010c00 	.word	0x40010c00

08001f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f38:	b672      	cpsid	i
}
 8001f3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f3c:	e7fe      	b.n	8001f3c <Error_Handler+0x8>

08001f3e <MQ135_Init>:
#include "MQ135.h"
#include <math.h>

void MQ135_Init(MQ135* sensor, ADC_HandleTypeDef* hadc, uint32_t adcChannel, float rzero, float rload) {
 8001f3e:	b480      	push	{r7}
 8001f40:	b085      	sub	sp, #20
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	60f8      	str	r0, [r7, #12]
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
 8001f4a:	603b      	str	r3, [r7, #0]
    sensor->hadc = hadc;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	601a      	str	r2, [r3, #0]
    sensor->adcChannel = adcChannel;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	605a      	str	r2, [r3, #4]
    sensor->rzero = rzero;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	60da      	str	r2, [r3, #12]
    sensor->rload = rload;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	609a      	str	r2, [r3, #8]
}
 8001f64:	bf00      	nop
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr
	...

08001f70 <MQ135_GetCorrectionFactor>:

float MQ135_GetCorrectionFactor(float t, float h) {
 8001f70:	b5b0      	push	{r4, r5, r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
    if (t < 20) {
 8001f7a:	4953      	ldr	r1, [pc, #332]	; (80020c8 <MQ135_GetCorrectionFactor+0x158>)
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7fe ff71 	bl	8000e64 <__aeabi_fcmplt>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d052      	beq.n	800202e <MQ135_GetCorrectionFactor+0xbe>
        return CORA * t * t - CORB * t + CORC - (h - 33.) * CORD;
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7fe fa4d 	bl	8000428 <__aeabi_f2d>
 8001f8e:	a340      	add	r3, pc, #256	; (adr r3, 8002090 <MQ135_GetCorrectionFactor+0x120>)
 8001f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f94:	f7fe faa0 	bl	80004d8 <__aeabi_dmul>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	4614      	mov	r4, r2
 8001f9e:	461d      	mov	r5, r3
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7fe fa41 	bl	8000428 <__aeabi_f2d>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	4620      	mov	r0, r4
 8001fac:	4629      	mov	r1, r5
 8001fae:	f7fe fa93 	bl	80004d8 <__aeabi_dmul>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4614      	mov	r4, r2
 8001fb8:	461d      	mov	r5, r3
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7fe fa34 	bl	8000428 <__aeabi_f2d>
 8001fc0:	a335      	add	r3, pc, #212	; (adr r3, 8002098 <MQ135_GetCorrectionFactor+0x128>)
 8001fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc6:	f7fe fa87 	bl	80004d8 <__aeabi_dmul>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4620      	mov	r0, r4
 8001fd0:	4629      	mov	r1, r5
 8001fd2:	f7fe f8c9 	bl	8000168 <__aeabi_dsub>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	4610      	mov	r0, r2
 8001fdc:	4619      	mov	r1, r3
 8001fde:	a330      	add	r3, pc, #192	; (adr r3, 80020a0 <MQ135_GetCorrectionFactor+0x130>)
 8001fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe4:	f7fe f8c2 	bl	800016c <__adddf3>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	4614      	mov	r4, r2
 8001fee:	461d      	mov	r5, r3
 8001ff0:	6838      	ldr	r0, [r7, #0]
 8001ff2:	f7fe fa19 	bl	8000428 <__aeabi_f2d>
 8001ff6:	f04f 0200 	mov.w	r2, #0
 8001ffa:	4b34      	ldr	r3, [pc, #208]	; (80020cc <MQ135_GetCorrectionFactor+0x15c>)
 8001ffc:	f7fe f8b4 	bl	8000168 <__aeabi_dsub>
 8002000:	4602      	mov	r2, r0
 8002002:	460b      	mov	r3, r1
 8002004:	4610      	mov	r0, r2
 8002006:	4619      	mov	r1, r3
 8002008:	a327      	add	r3, pc, #156	; (adr r3, 80020a8 <MQ135_GetCorrectionFactor+0x138>)
 800200a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200e:	f7fe fa63 	bl	80004d8 <__aeabi_dmul>
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	4620      	mov	r0, r4
 8002018:	4629      	mov	r1, r5
 800201a:	f7fe f8a5 	bl	8000168 <__aeabi_dsub>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4610      	mov	r0, r2
 8002024:	4619      	mov	r1, r3
 8002026:	f7fe fd2f 	bl	8000a88 <__aeabi_d2f>
 800202a:	4603      	mov	r3, r0
 800202c:	e029      	b.n	8002082 <MQ135_GetCorrectionFactor+0x112>
    } else {
        return CORE * t + CORF * h + CORG;
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7fe f9fa 	bl	8000428 <__aeabi_f2d>
 8002034:	a31e      	add	r3, pc, #120	; (adr r3, 80020b0 <MQ135_GetCorrectionFactor+0x140>)
 8002036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203a:	f7fe fa4d 	bl	80004d8 <__aeabi_dmul>
 800203e:	4602      	mov	r2, r0
 8002040:	460b      	mov	r3, r1
 8002042:	4614      	mov	r4, r2
 8002044:	461d      	mov	r5, r3
 8002046:	6838      	ldr	r0, [r7, #0]
 8002048:	f7fe f9ee 	bl	8000428 <__aeabi_f2d>
 800204c:	a31a      	add	r3, pc, #104	; (adr r3, 80020b8 <MQ135_GetCorrectionFactor+0x148>)
 800204e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002052:	f7fe fa41 	bl	80004d8 <__aeabi_dmul>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4620      	mov	r0, r4
 800205c:	4629      	mov	r1, r5
 800205e:	f7fe f885 	bl	800016c <__adddf3>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	4610      	mov	r0, r2
 8002068:	4619      	mov	r1, r3
 800206a:	a315      	add	r3, pc, #84	; (adr r3, 80020c0 <MQ135_GetCorrectionFactor+0x150>)
 800206c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002070:	f7fe f87c 	bl	800016c <__adddf3>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	4610      	mov	r0, r2
 800207a:	4619      	mov	r1, r3
 800207c:	f7fe fd04 	bl	8000a88 <__aeabi_d2f>
 8002080:	4603      	mov	r3, r0
    }
}
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bdb0      	pop	{r4, r5, r7, pc}
 800208a:	bf00      	nop
 800208c:	f3af 8000 	nop.w
 8002090:	8db8bac7 	.word	0x8db8bac7
 8002094:	3f36f006 	.word	0x3f36f006
 8002098:	ec6bce85 	.word	0xec6bce85
 800209c:	3f9bd512 	.word	0x3f9bd512
 80020a0:	fa97e133 	.word	0xfa97e133
 80020a4:	3ff65379 	.word	0x3ff65379
 80020a8:	487fcb92 	.word	0x487fcb92
 80020ac:	3f5d7dbf 	.word	0x3f5d7dbf
 80020b0:	8717fb8e 	.word	0x8717fb8e
 80020b4:	bf6b4e81 	.word	0xbf6b4e81
 80020b8:	34a6f316 	.word	0x34a6f316
 80020bc:	bf5f81f8 	.word	0xbf5f81f8
 80020c0:	500c31e8 	.word	0x500c31e8
 80020c4:	3ff21501 	.word	0x3ff21501
 80020c8:	41a00000 	.word	0x41a00000
 80020cc:	40408000 	.word	0x40408000

080020d0 <MQ135_GetResistance>:

float MQ135_GetResistance(MQ135* sensor) {
 80020d0:	b5b0      	push	{r4, r5, r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
    HAL_ADC_Start(sensor->hadc);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f000 fc73 	bl	80029c8 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(sensor->hadc, 200) != HAL_OK) {
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	21c8      	movs	r1, #200	; 0xc8
 80020e8:	4618      	mov	r0, r3
 80020ea:	f000 fd47 	bl	8002b7c <HAL_ADC_PollForConversion>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MQ135_GetResistance+0x28>
    	return -1; // Lỗi ADC
 80020f4:	4b36      	ldr	r3, [pc, #216]	; (80021d0 <MQ135_GetResistance+0x100>)
 80020f6:	e05c      	b.n	80021b2 <MQ135_GetResistance+0xe2>
    }
    uint32_t adcValue = HAL_ADC_GetValue(sensor->hadc);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f000 fe43 	bl	8002d88 <HAL_ADC_GetValue>
 8002102:	6178      	str	r0, [r7, #20]
    HAL_ADC_Stop(sensor->hadc);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f000 fd0b 	bl	8002b24 <HAL_ADC_Stop>
    float voltage = (adcValue * 3.3) / 4095.0;
 800210e:	6978      	ldr	r0, [r7, #20]
 8002110:	f7fe f968 	bl	80003e4 <__aeabi_ui2d>
 8002114:	a32a      	add	r3, pc, #168	; (adr r3, 80021c0 <MQ135_GetResistance+0xf0>)
 8002116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211a:	f7fe f9dd 	bl	80004d8 <__aeabi_dmul>
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	4610      	mov	r0, r2
 8002124:	4619      	mov	r1, r3
 8002126:	a328      	add	r3, pc, #160	; (adr r3, 80021c8 <MQ135_GetResistance+0xf8>)
 8002128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212c:	f7fe fafe 	bl	800072c <__aeabi_ddiv>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	4610      	mov	r0, r2
 8002136:	4619      	mov	r1, r3
 8002138:	f7fe fca6 	bl	8000a88 <__aeabi_d2f>
 800213c:	4603      	mov	r3, r0
 800213e:	613b      	str	r3, [r7, #16]
    if (voltage <= 0) {
 8002140:	f04f 0100 	mov.w	r1, #0
 8002144:	6938      	ldr	r0, [r7, #16]
 8002146:	f7fe fe97 	bl	8000e78 <__aeabi_fcmple>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MQ135_GetResistance+0x84>
    	return -1;
 8002150:	4b1f      	ldr	r3, [pc, #124]	; (80021d0 <MQ135_GetResistance+0x100>)
 8002152:	e02e      	b.n	80021b2 <MQ135_GetResistance+0xe2>
    }
    float resistance = ((3.3 - voltage) * sensor->rload) / voltage;
 8002154:	6938      	ldr	r0, [r7, #16]
 8002156:	f7fe f967 	bl	8000428 <__aeabi_f2d>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	a118      	add	r1, pc, #96	; (adr r1, 80021c0 <MQ135_GetResistance+0xf0>)
 8002160:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002164:	f7fe f800 	bl	8000168 <__aeabi_dsub>
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	4614      	mov	r4, r2
 800216e:	461d      	mov	r5, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe f957 	bl	8000428 <__aeabi_f2d>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	4620      	mov	r0, r4
 8002180:	4629      	mov	r1, r5
 8002182:	f7fe f9a9 	bl	80004d8 <__aeabi_dmul>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4614      	mov	r4, r2
 800218c:	461d      	mov	r5, r3
 800218e:	6938      	ldr	r0, [r7, #16]
 8002190:	f7fe f94a 	bl	8000428 <__aeabi_f2d>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	4620      	mov	r0, r4
 800219a:	4629      	mov	r1, r5
 800219c:	f7fe fac6 	bl	800072c <__aeabi_ddiv>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4610      	mov	r0, r2
 80021a6:	4619      	mov	r1, r3
 80021a8:	f7fe fc6e 	bl	8000a88 <__aeabi_d2f>
 80021ac:	4603      	mov	r3, r0
 80021ae:	60fb      	str	r3, [r7, #12]
    return resistance;
 80021b0:	68fb      	ldr	r3, [r7, #12]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bdb0      	pop	{r4, r5, r7, pc}
 80021ba:	bf00      	nop
 80021bc:	f3af 8000 	nop.w
 80021c0:	66666666 	.word	0x66666666
 80021c4:	400a6666 	.word	0x400a6666
 80021c8:	00000000 	.word	0x00000000
 80021cc:	40affe00 	.word	0x40affe00
 80021d0:	bf800000 	.word	0xbf800000

080021d4 <MQ135_GetCorrectedResistance>:

float MQ135_GetCorrectedResistance(MQ135* sensor, float t, float h) {
 80021d4:	b590      	push	{r4, r7, lr}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
    return MQ135_GetResistance(sensor) / MQ135_GetCorrectionFactor(t, h);
 80021e0:	68f8      	ldr	r0, [r7, #12]
 80021e2:	f7ff ff75 	bl	80020d0 <MQ135_GetResistance>
 80021e6:	4604      	mov	r4, r0
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	68b8      	ldr	r0, [r7, #8]
 80021ec:	f7ff fec0 	bl	8001f70 <MQ135_GetCorrectionFactor>
 80021f0:	4603      	mov	r3, r0
 80021f2:	4619      	mov	r1, r3
 80021f4:	4620      	mov	r0, r4
 80021f6:	f7fe fd4b 	bl	8000c90 <__aeabi_fdiv>
 80021fa:	4603      	mov	r3, r0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	bd90      	pop	{r4, r7, pc}
 8002204:	0000      	movs	r0, r0
	...

08002208 <MQ135_GetCorrectedPPM>:

float MQ135_GetPPM(MQ135* sensor) {
    return PARA * pow((MQ135_GetResistance(sensor) / sensor->rzero), -PARB);
}

float MQ135_GetCorrectedPPM(MQ135* sensor, float t, float h) {
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
    return PARA * pow((MQ135_GetCorrectedResistance(sensor, t, h) / sensor->rzero), -PARB);
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	68b9      	ldr	r1, [r7, #8]
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f7ff ffdb 	bl	80021d4 <MQ135_GetCorrectedResistance>
 800221e:	4602      	mov	r2, r0
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	4619      	mov	r1, r3
 8002226:	4610      	mov	r0, r2
 8002228:	f7fe fd32 	bl	8000c90 <__aeabi_fdiv>
 800222c:	4603      	mov	r3, r0
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe f8fa 	bl	8000428 <__aeabi_f2d>
 8002234:	a30a      	add	r3, pc, #40	; (adr r3, 8002260 <MQ135_GetCorrectedPPM+0x58>)
 8002236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223a:	f009 fc75 	bl	800bb28 <pow>
 800223e:	a30a      	add	r3, pc, #40	; (adr r3, 8002268 <MQ135_GetCorrectedPPM+0x60>)
 8002240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002244:	f7fe f948 	bl	80004d8 <__aeabi_dmul>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	4610      	mov	r0, r2
 800224e:	4619      	mov	r1, r3
 8002250:	f7fe fc1a 	bl	8000a88 <__aeabi_d2f>
 8002254:	4603      	mov	r3, r0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	bf42646d 	.word	0xbf42646d
 8002264:	c00626fb 	.word	0xc00626fb
 8002268:	490f3d8b 	.word	0x490f3d8b
 800226c:	405d2688 	.word	0x405d2688

08002270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002276:	4b15      	ldr	r3, [pc, #84]	; (80022cc <HAL_MspInit+0x5c>)
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	4a14      	ldr	r2, [pc, #80]	; (80022cc <HAL_MspInit+0x5c>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	6193      	str	r3, [r2, #24]
 8002282:	4b12      	ldr	r3, [pc, #72]	; (80022cc <HAL_MspInit+0x5c>)
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800228e:	4b0f      	ldr	r3, [pc, #60]	; (80022cc <HAL_MspInit+0x5c>)
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	4a0e      	ldr	r2, [pc, #56]	; (80022cc <HAL_MspInit+0x5c>)
 8002294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002298:	61d3      	str	r3, [r2, #28]
 800229a:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <HAL_MspInit+0x5c>)
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a2:	607b      	str	r3, [r7, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80022a6:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <HAL_MspInit+0x60>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	4a04      	ldr	r2, [pc, #16]	; (80022d0 <HAL_MspInit+0x60>)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022c2:	bf00      	nop
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40010000 	.word	0x40010000

080022d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022dc:	f107 0310 	add.w	r3, r7, #16
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a14      	ldr	r2, [pc, #80]	; (8002340 <HAL_ADC_MspInit+0x6c>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d121      	bne.n	8002338 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022f4:	4b13      	ldr	r3, [pc, #76]	; (8002344 <HAL_ADC_MspInit+0x70>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	4a12      	ldr	r2, [pc, #72]	; (8002344 <HAL_ADC_MspInit+0x70>)
 80022fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022fe:	6193      	str	r3, [r2, #24]
 8002300:	4b10      	ldr	r3, [pc, #64]	; (8002344 <HAL_ADC_MspInit+0x70>)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800230c:	4b0d      	ldr	r3, [pc, #52]	; (8002344 <HAL_ADC_MspInit+0x70>)
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	4a0c      	ldr	r2, [pc, #48]	; (8002344 <HAL_ADC_MspInit+0x70>)
 8002312:	f043 0304 	orr.w	r3, r3, #4
 8002316:	6193      	str	r3, [r2, #24]
 8002318:	4b0a      	ldr	r3, [pc, #40]	; (8002344 <HAL_ADC_MspInit+0x70>)
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	60bb      	str	r3, [r7, #8]
 8002322:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002324:	2301      	movs	r3, #1
 8002326:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002328:	2303      	movs	r3, #3
 800232a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232c:	f107 0310 	add.w	r3, r7, #16
 8002330:	4619      	mov	r1, r3
 8002332:	4805      	ldr	r0, [pc, #20]	; (8002348 <HAL_ADC_MspInit+0x74>)
 8002334:	f001 f85a 	bl	80033ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002338:	bf00      	nop
 800233a:	3720      	adds	r7, #32
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40012400 	.word	0x40012400
 8002344:	40021000 	.word	0x40021000
 8002348:	40010800 	.word	0x40010800

0800234c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002354:	f107 0310 	add.w	r3, r7, #16
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a1b      	ldr	r2, [pc, #108]	; (80023d4 <HAL_SPI_MspInit+0x88>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d12f      	bne.n	80023cc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800236c:	4b1a      	ldr	r3, [pc, #104]	; (80023d8 <HAL_SPI_MspInit+0x8c>)
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	4a19      	ldr	r2, [pc, #100]	; (80023d8 <HAL_SPI_MspInit+0x8c>)
 8002372:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002376:	6193      	str	r3, [r2, #24]
 8002378:	4b17      	ldr	r3, [pc, #92]	; (80023d8 <HAL_SPI_MspInit+0x8c>)
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002384:	4b14      	ldr	r3, [pc, #80]	; (80023d8 <HAL_SPI_MspInit+0x8c>)
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	4a13      	ldr	r2, [pc, #76]	; (80023d8 <HAL_SPI_MspInit+0x8c>)
 800238a:	f043 0304 	orr.w	r3, r3, #4
 800238e:	6193      	str	r3, [r2, #24]
 8002390:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <HAL_SPI_MspInit+0x8c>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800239c:	23a0      	movs	r3, #160	; 0xa0
 800239e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a0:	2302      	movs	r3, #2
 80023a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023a4:	2303      	movs	r3, #3
 80023a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a8:	f107 0310 	add.w	r3, r7, #16
 80023ac:	4619      	mov	r1, r3
 80023ae:	480b      	ldr	r0, [pc, #44]	; (80023dc <HAL_SPI_MspInit+0x90>)
 80023b0:	f001 f81c 	bl	80033ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023b4:	2340      	movs	r3, #64	; 0x40
 80023b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c0:	f107 0310 	add.w	r3, r7, #16
 80023c4:	4619      	mov	r1, r3
 80023c6:	4805      	ldr	r0, [pc, #20]	; (80023dc <HAL_SPI_MspInit+0x90>)
 80023c8:	f001 f810 	bl	80033ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80023cc:	bf00      	nop
 80023ce:	3720      	adds	r7, #32
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40013000 	.word	0x40013000
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40010800 	.word	0x40010800

080023e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e8:	f107 0310 	add.w	r3, r7, #16
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	605a      	str	r2, [r3, #4]
 80023f2:	609a      	str	r2, [r3, #8]
 80023f4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a1c      	ldr	r2, [pc, #112]	; (800246c <HAL_UART_MspInit+0x8c>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d131      	bne.n	8002464 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002400:	4b1b      	ldr	r3, [pc, #108]	; (8002470 <HAL_UART_MspInit+0x90>)
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	4a1a      	ldr	r2, [pc, #104]	; (8002470 <HAL_UART_MspInit+0x90>)
 8002406:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800240a:	6193      	str	r3, [r2, #24]
 800240c:	4b18      	ldr	r3, [pc, #96]	; (8002470 <HAL_UART_MspInit+0x90>)
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002418:	4b15      	ldr	r3, [pc, #84]	; (8002470 <HAL_UART_MspInit+0x90>)
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	4a14      	ldr	r2, [pc, #80]	; (8002470 <HAL_UART_MspInit+0x90>)
 800241e:	f043 0304 	orr.w	r3, r3, #4
 8002422:	6193      	str	r3, [r2, #24]
 8002424:	4b12      	ldr	r3, [pc, #72]	; (8002470 <HAL_UART_MspInit+0x90>)
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	60bb      	str	r3, [r7, #8]
 800242e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002430:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002434:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002436:	2302      	movs	r3, #2
 8002438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800243a:	2303      	movs	r3, #3
 800243c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243e:	f107 0310 	add.w	r3, r7, #16
 8002442:	4619      	mov	r1, r3
 8002444:	480b      	ldr	r0, [pc, #44]	; (8002474 <HAL_UART_MspInit+0x94>)
 8002446:	f000 ffd1 	bl	80033ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800244a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800244e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	2300      	movs	r3, #0
 8002456:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002458:	f107 0310 	add.w	r3, r7, #16
 800245c:	4619      	mov	r1, r3
 800245e:	4805      	ldr	r0, [pc, #20]	; (8002474 <HAL_UART_MspInit+0x94>)
 8002460:	f000 ffc4 	bl	80033ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002464:	bf00      	nop
 8002466:	3720      	adds	r7, #32
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40013800 	.word	0x40013800
 8002470:	40021000 	.word	0x40021000
 8002474:	40010800 	.word	0x40010800

08002478 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 800247c:	4b0d      	ldr	r3, [pc, #52]	; (80024b4 <SDTimer_Handler+0x3c>)
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	b29b      	uxth	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d006      	beq.n	8002494 <SDTimer_Handler+0x1c>
    Timer1--;
 8002486:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <SDTimer_Handler+0x3c>)
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	b29b      	uxth	r3, r3
 800248c:	3b01      	subs	r3, #1
 800248e:	b29a      	uxth	r2, r3
 8002490:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <SDTimer_Handler+0x3c>)
 8002492:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8002494:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <SDTimer_Handler+0x40>)
 8002496:	881b      	ldrh	r3, [r3, #0]
 8002498:	b29b      	uxth	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d006      	beq.n	80024ac <SDTimer_Handler+0x34>
    Timer2--;
 800249e:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <SDTimer_Handler+0x40>)
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	4b03      	ldr	r3, [pc, #12]	; (80024b8 <SDTimer_Handler+0x40>)
 80024aa:	801a      	strh	r2, [r3, #0]
}
 80024ac:	bf00      	nop
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr
 80024b4:	200023e2 	.word	0x200023e2
 80024b8:	200023e4 	.word	0x200023e4

080024bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024c0:	e7fe      	b.n	80024c0 <NMI_Handler+0x4>

080024c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024c2:	b480      	push	{r7}
 80024c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024c6:	e7fe      	b.n	80024c6 <HardFault_Handler+0x4>

080024c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024cc:	e7fe      	b.n	80024cc <MemManage_Handler+0x4>

080024ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ce:	b480      	push	{r7}
 80024d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024d2:	e7fe      	b.n	80024d2 <BusFault_Handler+0x4>

080024d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024d8:	e7fe      	b.n	80024d8 <UsageFault_Handler+0x4>

080024da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024da:	b480      	push	{r7}
 80024dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bc80      	pop	{r7}
 80024e4:	4770      	bx	lr

080024e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024e6:	b480      	push	{r7}
 80024e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr

080024f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024f2:	b480      	push	{r7}
 80024f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr
	...

08002500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8002504:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <SysTick_Handler+0x30>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	3301      	adds	r3, #1
 800250c:	b2da      	uxtb	r2, r3
 800250e:	4b08      	ldr	r3, [pc, #32]	; (8002530 <SysTick_Handler+0x30>)
 8002510:	701a      	strb	r2, [r3, #0]
		  if(FatFsCnt >= 10)
 8002512:	4b07      	ldr	r3, [pc, #28]	; (8002530 <SysTick_Handler+0x30>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b09      	cmp	r3, #9
 800251a:	d904      	bls.n	8002526 <SysTick_Handler+0x26>
		  {
		    FatFsCnt = 0;
 800251c:	4b04      	ldr	r3, [pc, #16]	; (8002530 <SysTick_Handler+0x30>)
 800251e:	2200      	movs	r2, #0
 8002520:	701a      	strb	r2, [r3, #0]
		    SDTimer_Handler();
 8002522:	f7ff ffa9 	bl	8002478 <SDTimer_Handler>
		  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002526:	f000 f937 	bl	8002798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	200023e0 	.word	0x200023e0

08002534 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
	return 1;
 8002538:	2301      	movs	r3, #1
}
 800253a:	4618      	mov	r0, r3
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr

08002542 <_kill>:

int _kill(int pid, int sig)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b082      	sub	sp, #8
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800254c:	f006 fbce 	bl	8008cec <__errno>
 8002550:	4603      	mov	r3, r0
 8002552:	2216      	movs	r2, #22
 8002554:	601a      	str	r2, [r3, #0]
	return -1;
 8002556:	f04f 33ff 	mov.w	r3, #4294967295
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <_exit>:

void _exit (int status)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800256a:	f04f 31ff 	mov.w	r1, #4294967295
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff ffe7 	bl	8002542 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002574:	e7fe      	b.n	8002574 <_exit+0x12>

08002576 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b086      	sub	sp, #24
 800257a:	af00      	add	r7, sp, #0
 800257c:	60f8      	str	r0, [r7, #12]
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	e00a      	b.n	800259e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002588:	f3af 8000 	nop.w
 800258c:	4601      	mov	r1, r0
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	1c5a      	adds	r2, r3, #1
 8002592:	60ba      	str	r2, [r7, #8]
 8002594:	b2ca      	uxtb	r2, r1
 8002596:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	3301      	adds	r3, #1
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	dbf0      	blt.n	8002588 <_read+0x12>
	}

return len;
 80025a6:	687b      	ldr	r3, [r7, #4]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]
 80025c0:	e009      	b.n	80025d6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	1c5a      	adds	r2, r3, #1
 80025c6:	60ba      	str	r2, [r7, #8]
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	3301      	adds	r3, #1
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	429a      	cmp	r2, r3
 80025dc:	dbf1      	blt.n	80025c2 <_write+0x12>
	}
	return len;
 80025de:	687b      	ldr	r3, [r7, #4]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <_close>:

int _close(int file)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
	return -1;
 80025f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bc80      	pop	{r7}
 80025fc:	4770      	bx	lr

080025fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
 8002606:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800260e:	605a      	str	r2, [r3, #4]
	return 0;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr

0800261c <_isatty>:

int _isatty(int file)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
	return 1;
 8002624:	2301      	movs	r3, #1
}
 8002626:	4618      	mov	r0, r3
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr

08002630 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
	return 0;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr

08002648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002650:	4a14      	ldr	r2, [pc, #80]	; (80026a4 <_sbrk+0x5c>)
 8002652:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <_sbrk+0x60>)
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800265c:	4b13      	ldr	r3, [pc, #76]	; (80026ac <_sbrk+0x64>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d102      	bne.n	800266a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002664:	4b11      	ldr	r3, [pc, #68]	; (80026ac <_sbrk+0x64>)
 8002666:	4a12      	ldr	r2, [pc, #72]	; (80026b0 <_sbrk+0x68>)
 8002668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800266a:	4b10      	ldr	r3, [pc, #64]	; (80026ac <_sbrk+0x64>)
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4413      	add	r3, r2
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	429a      	cmp	r2, r3
 8002676:	d207      	bcs.n	8002688 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002678:	f006 fb38 	bl	8008cec <__errno>
 800267c:	4603      	mov	r3, r0
 800267e:	220c      	movs	r2, #12
 8002680:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002682:	f04f 33ff 	mov.w	r3, #4294967295
 8002686:	e009      	b.n	800269c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002688:	4b08      	ldr	r3, [pc, #32]	; (80026ac <_sbrk+0x64>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800268e:	4b07      	ldr	r3, [pc, #28]	; (80026ac <_sbrk+0x64>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4413      	add	r3, r2
 8002696:	4a05      	ldr	r2, [pc, #20]	; (80026ac <_sbrk+0x64>)
 8002698:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800269a:	68fb      	ldr	r3, [r7, #12]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	20005000 	.word	0x20005000
 80026a8:	00000400 	.word	0x00000400
 80026ac:	200023e8 	.word	0x200023e8
 80026b0:	20002638 	.word	0x20002638

080026b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr

080026c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026c0:	f7ff fff8 	bl	80026b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026c4:	480b      	ldr	r0, [pc, #44]	; (80026f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80026c6:	490c      	ldr	r1, [pc, #48]	; (80026f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80026c8:	4a0c      	ldr	r2, [pc, #48]	; (80026fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80026ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026cc:	e002      	b.n	80026d4 <LoopCopyDataInit>

080026ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026d2:	3304      	adds	r3, #4

080026d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026d8:	d3f9      	bcc.n	80026ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026da:	4a09      	ldr	r2, [pc, #36]	; (8002700 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80026dc:	4c09      	ldr	r4, [pc, #36]	; (8002704 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026e0:	e001      	b.n	80026e6 <LoopFillZerobss>

080026e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e4:	3204      	adds	r2, #4

080026e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026e8:	d3fb      	bcc.n	80026e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026ea:	f006 fb05 	bl	8008cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026ee:	f7ff f981 	bl	80019f4 <main>
  bx lr
 80026f2:	4770      	bx	lr
  ldr r0, =_sdata
 80026f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026f8:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80026fc:	0800d358 	.word	0x0800d358
  ldr r2, =_sbss
 8002700:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002704:	20002634 	.word	0x20002634

08002708 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002708:	e7fe      	b.n	8002708 <ADC1_2_IRQHandler>
	...

0800270c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002710:	4b08      	ldr	r3, [pc, #32]	; (8002734 <HAL_Init+0x28>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a07      	ldr	r2, [pc, #28]	; (8002734 <HAL_Init+0x28>)
 8002716:	f043 0310 	orr.w	r3, r3, #16
 800271a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800271c:	2003      	movs	r0, #3
 800271e:	f000 fe31 	bl	8003384 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002722:	200f      	movs	r0, #15
 8002724:	f000 f808 	bl	8002738 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002728:	f7ff fda2 	bl	8002270 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40022000 	.word	0x40022000

08002738 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002740:	4b12      	ldr	r3, [pc, #72]	; (800278c <HAL_InitTick+0x54>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4b12      	ldr	r3, [pc, #72]	; (8002790 <HAL_InitTick+0x58>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	4619      	mov	r1, r3
 800274a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800274e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002752:	fbb2 f3f3 	udiv	r3, r2, r3
 8002756:	4618      	mov	r0, r3
 8002758:	f000 fe3b 	bl	80033d2 <HAL_SYSTICK_Config>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e00e      	b.n	8002784 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b0f      	cmp	r3, #15
 800276a:	d80a      	bhi.n	8002782 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800276c:	2200      	movs	r2, #0
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	f04f 30ff 	mov.w	r0, #4294967295
 8002774:	f000 fe11 	bl	800339a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002778:	4a06      	ldr	r2, [pc, #24]	; (8002794 <HAL_InitTick+0x5c>)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	e000      	b.n	8002784 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
}
 8002784:	4618      	mov	r0, r3
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	20000004 	.word	0x20000004
 8002790:	2000000c 	.word	0x2000000c
 8002794:	20000008 	.word	0x20000008

08002798 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_IncTick+0x1c>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	461a      	mov	r2, r3
 80027a2:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <HAL_IncTick+0x20>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4413      	add	r3, r2
 80027a8:	4a03      	ldr	r2, [pc, #12]	; (80027b8 <HAL_IncTick+0x20>)
 80027aa:	6013      	str	r3, [r2, #0]
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr
 80027b4:	2000000c 	.word	0x2000000c
 80027b8:	200023ec 	.word	0x200023ec

080027bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return uwTick;
 80027c0:	4b02      	ldr	r3, [pc, #8]	; (80027cc <HAL_GetTick+0x10>)
 80027c2:	681b      	ldr	r3, [r3, #0]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr
 80027cc:	200023ec 	.word	0x200023ec

080027d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027d8:	f7ff fff0 	bl	80027bc <HAL_GetTick>
 80027dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e8:	d005      	beq.n	80027f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ea:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <HAL_Delay+0x44>)
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	461a      	mov	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4413      	add	r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027f6:	bf00      	nop
 80027f8:	f7ff ffe0 	bl	80027bc <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	429a      	cmp	r2, r3
 8002806:	d8f7      	bhi.n	80027f8 <HAL_Delay+0x28>
  {
  }
}
 8002808:	bf00      	nop
 800280a:	bf00      	nop
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	2000000c 	.word	0x2000000c

08002818 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002820:	2300      	movs	r3, #0
 8002822:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002828:	2300      	movs	r3, #0
 800282a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e0be      	b.n	80029b8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002844:	2b00      	cmp	r3, #0
 8002846:	d109      	bne.n	800285c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff fd3c 	bl	80022d4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 fbf1 	bl	8003044 <ADC_ConversionStop_Disable>
 8002862:	4603      	mov	r3, r0
 8002864:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286a:	f003 0310 	and.w	r3, r3, #16
 800286e:	2b00      	cmp	r3, #0
 8002870:	f040 8099 	bne.w	80029a6 <HAL_ADC_Init+0x18e>
 8002874:	7dfb      	ldrb	r3, [r7, #23]
 8002876:	2b00      	cmp	r3, #0
 8002878:	f040 8095 	bne.w	80029a6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002880:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002884:	f023 0302 	bic.w	r3, r3, #2
 8002888:	f043 0202 	orr.w	r2, r3, #2
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002898:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	7b1b      	ldrb	r3, [r3, #12]
 800289e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80028a0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028b0:	d003      	beq.n	80028ba <HAL_ADC_Init+0xa2>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d102      	bne.n	80028c0 <HAL_ADC_Init+0xa8>
 80028ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028be:	e000      	b.n	80028c2 <HAL_ADC_Init+0xaa>
 80028c0:	2300      	movs	r3, #0
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	7d1b      	ldrb	r3, [r3, #20]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d119      	bne.n	8002904 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	7b1b      	ldrb	r3, [r3, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d109      	bne.n	80028ec <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	3b01      	subs	r3, #1
 80028de:	035a      	lsls	r2, r3, #13
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028e8:	613b      	str	r3, [r7, #16]
 80028ea:	e00b      	b.n	8002904 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f0:	f043 0220 	orr.w	r2, r3, #32
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fc:	f043 0201 	orr.w	r2, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	430a      	orrs	r2, r1
 8002916:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	4b28      	ldr	r3, [pc, #160]	; (80029c0 <HAL_ADC_Init+0x1a8>)
 8002920:	4013      	ands	r3, r2
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6812      	ldr	r2, [r2, #0]
 8002926:	68b9      	ldr	r1, [r7, #8]
 8002928:	430b      	orrs	r3, r1
 800292a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002934:	d003      	beq.n	800293e <HAL_ADC_Init+0x126>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d104      	bne.n	8002948 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	3b01      	subs	r3, #1
 8002944:	051b      	lsls	r3, r3, #20
 8002946:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	430a      	orrs	r2, r1
 800295a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	4b18      	ldr	r3, [pc, #96]	; (80029c4 <HAL_ADC_Init+0x1ac>)
 8002964:	4013      	ands	r3, r2
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	429a      	cmp	r2, r3
 800296a:	d10b      	bne.n	8002984 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002976:	f023 0303 	bic.w	r3, r3, #3
 800297a:	f043 0201 	orr.w	r2, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002982:	e018      	b.n	80029b6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002988:	f023 0312 	bic.w	r3, r3, #18
 800298c:	f043 0210 	orr.w	r2, r3, #16
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002998:	f043 0201 	orr.w	r2, r3, #1
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80029a4:	e007      	b.n	80029b6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029aa:	f043 0210 	orr.w	r2, r3, #16
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80029b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	ffe1f7fd 	.word	0xffe1f7fd
 80029c4:	ff1f0efe 	.word	0xff1f0efe

080029c8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d101      	bne.n	80029e2 <HAL_ADC_Start+0x1a>
 80029de:	2302      	movs	r3, #2
 80029e0:	e098      	b.n	8002b14 <HAL_ADC_Start+0x14c>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 fad0 	bl	8002f90 <ADC_Enable>
 80029f0:	4603      	mov	r3, r0
 80029f2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f040 8087 	bne.w	8002b0a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a04:	f023 0301 	bic.w	r3, r3, #1
 8002a08:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a41      	ldr	r2, [pc, #260]	; (8002b1c <HAL_ADC_Start+0x154>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d105      	bne.n	8002a26 <HAL_ADC_Start+0x5e>
 8002a1a:	4b41      	ldr	r3, [pc, #260]	; (8002b20 <HAL_ADC_Start+0x158>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d115      	bne.n	8002a52 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d026      	beq.n	8002a8e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a48:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a50:	e01d      	b.n	8002a8e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a56:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a2f      	ldr	r2, [pc, #188]	; (8002b20 <HAL_ADC_Start+0x158>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d004      	beq.n	8002a72 <HAL_ADC_Start+0xaa>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a2b      	ldr	r2, [pc, #172]	; (8002b1c <HAL_ADC_Start+0x154>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d10d      	bne.n	8002a8e <HAL_ADC_Start+0xc6>
 8002a72:	4b2b      	ldr	r3, [pc, #172]	; (8002b20 <HAL_ADC_Start+0x158>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a82:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a86:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d006      	beq.n	8002aa8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9e:	f023 0206 	bic.w	r2, r3, #6
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002aa6:	e002      	b.n	8002aae <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f06f 0202 	mvn.w	r2, #2
 8002abe:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002aca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002ace:	d113      	bne.n	8002af8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002ad4:	4a11      	ldr	r2, [pc, #68]	; (8002b1c <HAL_ADC_Start+0x154>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d105      	bne.n	8002ae6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002ada:	4b11      	ldr	r3, [pc, #68]	; (8002b20 <HAL_ADC_Start+0x158>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d108      	bne.n	8002af8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002af4:	609a      	str	r2, [r3, #8]
 8002af6:	e00c      	b.n	8002b12 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	e003      	b.n	8002b12 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40012800 	.word	0x40012800
 8002b20:	40012400 	.word	0x40012400

08002b24 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d101      	bne.n	8002b3e <HAL_ADC_Stop+0x1a>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	e01a      	b.n	8002b74 <HAL_ADC_Stop+0x50>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 fa7c 	bl	8003044 <ADC_ConversionStop_Disable>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d109      	bne.n	8002b6a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b5e:	f023 0301 	bic.w	r3, r3, #1
 8002b62:	f043 0201 	orr.w	r2, r3, #1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002b7c:	b590      	push	{r4, r7, lr}
 8002b7e:	b087      	sub	sp, #28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002b92:	f7ff fe13 	bl	80027bc <HAL_GetTick>
 8002b96:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00b      	beq.n	8002bbe <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002baa:	f043 0220 	orr.w	r2, r3, #32
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e0d3      	b.n	8002d66 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d131      	bne.n	8002c30 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d12a      	bne.n	8002c30 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002bda:	e021      	b.n	8002c20 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be2:	d01d      	beq.n	8002c20 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d007      	beq.n	8002bfa <HAL_ADC_PollForConversion+0x7e>
 8002bea:	f7ff fde7 	bl	80027bc <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d212      	bcs.n	8002c20 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10b      	bne.n	8002c20 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0c:	f043 0204 	orr.w	r2, r3, #4
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e0a2      	b.n	8002d66 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0d6      	beq.n	8002bdc <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002c2e:	e070      	b.n	8002d12 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002c30:	4b4f      	ldr	r3, [pc, #316]	; (8002d70 <HAL_ADC_PollForConversion+0x1f4>)
 8002c32:	681c      	ldr	r4, [r3, #0]
 8002c34:	2002      	movs	r0, #2
 8002c36:	f001 fa3b 	bl	80040b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6919      	ldr	r1, [r3, #16]
 8002c46:	4b4b      	ldr	r3, [pc, #300]	; (8002d74 <HAL_ADC_PollForConversion+0x1f8>)
 8002c48:	400b      	ands	r3, r1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d118      	bne.n	8002c80 <HAL_ADC_PollForConversion+0x104>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68d9      	ldr	r1, [r3, #12]
 8002c54:	4b48      	ldr	r3, [pc, #288]	; (8002d78 <HAL_ADC_PollForConversion+0x1fc>)
 8002c56:	400b      	ands	r3, r1
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d111      	bne.n	8002c80 <HAL_ADC_PollForConversion+0x104>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6919      	ldr	r1, [r3, #16]
 8002c62:	4b46      	ldr	r3, [pc, #280]	; (8002d7c <HAL_ADC_PollForConversion+0x200>)
 8002c64:	400b      	ands	r3, r1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d108      	bne.n	8002c7c <HAL_ADC_PollForConversion+0x100>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68d9      	ldr	r1, [r3, #12]
 8002c70:	4b43      	ldr	r3, [pc, #268]	; (8002d80 <HAL_ADC_PollForConversion+0x204>)
 8002c72:	400b      	ands	r3, r1
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_ADC_PollForConversion+0x100>
 8002c78:	2314      	movs	r3, #20
 8002c7a:	e020      	b.n	8002cbe <HAL_ADC_PollForConversion+0x142>
 8002c7c:	2329      	movs	r3, #41	; 0x29
 8002c7e:	e01e      	b.n	8002cbe <HAL_ADC_PollForConversion+0x142>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6919      	ldr	r1, [r3, #16]
 8002c86:	4b3d      	ldr	r3, [pc, #244]	; (8002d7c <HAL_ADC_PollForConversion+0x200>)
 8002c88:	400b      	ands	r3, r1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d106      	bne.n	8002c9c <HAL_ADC_PollForConversion+0x120>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68d9      	ldr	r1, [r3, #12]
 8002c94:	4b3a      	ldr	r3, [pc, #232]	; (8002d80 <HAL_ADC_PollForConversion+0x204>)
 8002c96:	400b      	ands	r3, r1
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00d      	beq.n	8002cb8 <HAL_ADC_PollForConversion+0x13c>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6919      	ldr	r1, [r3, #16]
 8002ca2:	4b38      	ldr	r3, [pc, #224]	; (8002d84 <HAL_ADC_PollForConversion+0x208>)
 8002ca4:	400b      	ands	r3, r1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d108      	bne.n	8002cbc <HAL_ADC_PollForConversion+0x140>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68d9      	ldr	r1, [r3, #12]
 8002cb0:	4b34      	ldr	r3, [pc, #208]	; (8002d84 <HAL_ADC_PollForConversion+0x208>)
 8002cb2:	400b      	ands	r3, r1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_ADC_PollForConversion+0x140>
 8002cb8:	2354      	movs	r3, #84	; 0x54
 8002cba:	e000      	b.n	8002cbe <HAL_ADC_PollForConversion+0x142>
 8002cbc:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002cbe:	fb02 f303 	mul.w	r3, r2, r3
 8002cc2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002cc4:	e021      	b.n	8002d0a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ccc:	d01a      	beq.n	8002d04 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d007      	beq.n	8002ce4 <HAL_ADC_PollForConversion+0x168>
 8002cd4:	f7ff fd72 	bl	80027bc <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d20f      	bcs.n	8002d04 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d90b      	bls.n	8002d04 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf0:	f043 0204 	orr.w	r2, r3, #4
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e030      	b.n	8002d66 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	3301      	adds	r3, #1
 8002d08:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d8d9      	bhi.n	8002cc6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f06f 0212 	mvn.w	r2, #18
 8002d1a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d20:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002d32:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002d36:	d115      	bne.n	8002d64 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d111      	bne.n	8002d64 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d105      	bne.n	8002d64 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5c:	f043 0201 	orr.w	r2, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	371c      	adds	r7, #28
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd90      	pop	{r4, r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	20000004 	.word	0x20000004
 8002d74:	24924924 	.word	0x24924924
 8002d78:	00924924 	.word	0x00924924
 8002d7c:	12492492 	.word	0x12492492
 8002d80:	00492492 	.word	0x00492492
 8002d84:	00249249 	.word	0x00249249

08002d88 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr

08002da0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002dae:	2300      	movs	r3, #0
 8002db0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <HAL_ADC_ConfigChannel+0x20>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e0dc      	b.n	8002f7a <HAL_ADC_ConfigChannel+0x1da>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b06      	cmp	r3, #6
 8002dce:	d81c      	bhi.n	8002e0a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	3b05      	subs	r3, #5
 8002de2:	221f      	movs	r2, #31
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	43db      	mvns	r3, r3
 8002dea:	4019      	ands	r1, r3
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	6818      	ldr	r0, [r3, #0]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	4613      	mov	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	3b05      	subs	r3, #5
 8002dfc:	fa00 f203 	lsl.w	r2, r0, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	635a      	str	r2, [r3, #52]	; 0x34
 8002e08:	e03c      	b.n	8002e84 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	2b0c      	cmp	r3, #12
 8002e10:	d81c      	bhi.n	8002e4c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	3b23      	subs	r3, #35	; 0x23
 8002e24:	221f      	movs	r2, #31
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	4019      	ands	r1, r3
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	4613      	mov	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	3b23      	subs	r3, #35	; 0x23
 8002e3e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	631a      	str	r2, [r3, #48]	; 0x30
 8002e4a:	e01b      	b.n	8002e84 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3b41      	subs	r3, #65	; 0x41
 8002e5e:	221f      	movs	r2, #31
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	4019      	ands	r1, r3
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	4613      	mov	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	3b41      	subs	r3, #65	; 0x41
 8002e78:	fa00 f203 	lsl.w	r2, r0, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b09      	cmp	r3, #9
 8002e8a:	d91c      	bls.n	8002ec6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68d9      	ldr	r1, [r3, #12]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	4613      	mov	r3, r2
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3b1e      	subs	r3, #30
 8002e9e:	2207      	movs	r2, #7
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	4019      	ands	r1, r3
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	6898      	ldr	r0, [r3, #8]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3b1e      	subs	r3, #30
 8002eb8:	fa00 f203 	lsl.w	r2, r0, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	60da      	str	r2, [r3, #12]
 8002ec4:	e019      	b.n	8002efa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6919      	ldr	r1, [r3, #16]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	4413      	add	r3, r2
 8002ed6:	2207      	movs	r2, #7
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	43db      	mvns	r3, r3
 8002ede:	4019      	ands	r1, r3
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	6898      	ldr	r0, [r3, #8]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	4413      	add	r3, r2
 8002eee:	fa00 f203 	lsl.w	r2, r0, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2b10      	cmp	r3, #16
 8002f00:	d003      	beq.n	8002f0a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f06:	2b11      	cmp	r3, #17
 8002f08:	d132      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a1d      	ldr	r2, [pc, #116]	; (8002f84 <HAL_ADC_ConfigChannel+0x1e4>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d125      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d126      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002f30:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2b10      	cmp	r3, #16
 8002f38:	d11a      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f3a:	4b13      	ldr	r3, [pc, #76]	; (8002f88 <HAL_ADC_ConfigChannel+0x1e8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a13      	ldr	r2, [pc, #76]	; (8002f8c <HAL_ADC_ConfigChannel+0x1ec>)
 8002f40:	fba2 2303 	umull	r2, r3, r2, r3
 8002f44:	0c9a      	lsrs	r2, r3, #18
 8002f46:	4613      	mov	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f50:	e002      	b.n	8002f58 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	3b01      	subs	r3, #1
 8002f56:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1f9      	bne.n	8002f52 <HAL_ADC_ConfigChannel+0x1b2>
 8002f5e:	e007      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f64:	f043 0220 	orr.w	r2, r3, #32
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr
 8002f84:	40012400 	.word	0x40012400
 8002f88:	20000004 	.word	0x20000004
 8002f8c:	431bde83 	.word	0x431bde83

08002f90 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d040      	beq.n	8003030 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f042 0201 	orr.w	r2, r2, #1
 8002fbc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002fbe:	4b1f      	ldr	r3, [pc, #124]	; (800303c <ADC_Enable+0xac>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a1f      	ldr	r2, [pc, #124]	; (8003040 <ADC_Enable+0xb0>)
 8002fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc8:	0c9b      	lsrs	r3, r3, #18
 8002fca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002fcc:	e002      	b.n	8002fd4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1f9      	bne.n	8002fce <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002fda:	f7ff fbef 	bl	80027bc <HAL_GetTick>
 8002fde:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002fe0:	e01f      	b.n	8003022 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fe2:	f7ff fbeb 	bl	80027bc <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d918      	bls.n	8003022 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d011      	beq.n	8003022 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003002:	f043 0210 	orr.w	r2, r3, #16
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300e:	f043 0201 	orr.w	r2, r3, #1
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e007      	b.n	8003032 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b01      	cmp	r3, #1
 800302e:	d1d8      	bne.n	8002fe2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	20000004 	.word	0x20000004
 8003040:	431bde83 	.word	0x431bde83

08003044 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b01      	cmp	r3, #1
 800305c:	d12e      	bne.n	80030bc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 0201 	bic.w	r2, r2, #1
 800306c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800306e:	f7ff fba5 	bl	80027bc <HAL_GetTick>
 8003072:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003074:	e01b      	b.n	80030ae <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003076:	f7ff fba1 	bl	80027bc <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d914      	bls.n	80030ae <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b01      	cmp	r3, #1
 8003090:	d10d      	bne.n	80030ae <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003096:	f043 0210 	orr.w	r2, r3, #16
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a2:	f043 0201 	orr.w	r2, r3, #1
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e007      	b.n	80030be <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d0dc      	beq.n	8003076 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80030c8:	b590      	push	{r4, r7, lr}
 80030ca:	b087      	sub	sp, #28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d101      	bne.n	80030e6 <HAL_ADCEx_Calibration_Start+0x1e>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e097      	b.n	8003216 <HAL_ADCEx_Calibration_Start+0x14e>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7ff ffa8 	bl	8003044 <ADC_ConversionStop_Disable>
 80030f4:	4603      	mov	r3, r0
 80030f6:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7ff ff49 	bl	8002f90 <ADC_Enable>
 80030fe:	4603      	mov	r3, r0
 8003100:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8003102:	7dfb      	ldrb	r3, [r7, #23]
 8003104:	2b00      	cmp	r3, #0
 8003106:	f040 8081 	bne.w	800320c <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003112:	f023 0302 	bic.w	r3, r3, #2
 8003116:	f043 0202 	orr.w	r2, r3, #2
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800311e:	4b40      	ldr	r3, [pc, #256]	; (8003220 <HAL_ADCEx_Calibration_Start+0x158>)
 8003120:	681c      	ldr	r4, [r3, #0]
 8003122:	2002      	movs	r0, #2
 8003124:	f000 ffc4 	bl	80040b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003128:	4603      	mov	r3, r0
 800312a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800312e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003130:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003132:	e002      	b.n	800313a <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	3b01      	subs	r3, #1
 8003138:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1f9      	bne.n	8003134 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0208 	orr.w	r2, r2, #8
 800314e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003150:	f7ff fb34 	bl	80027bc <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003156:	e01b      	b.n	8003190 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003158:	f7ff fb30 	bl	80027bc <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b0a      	cmp	r3, #10
 8003164:	d914      	bls.n	8003190 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 0308 	and.w	r3, r3, #8
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00d      	beq.n	8003190 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003178:	f023 0312 	bic.w	r3, r3, #18
 800317c:	f043 0210 	orr.w	r2, r3, #16
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e042      	b.n	8003216 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1dc      	bne.n	8003158 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f042 0204 	orr.w	r2, r2, #4
 80031ac:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80031ae:	f7ff fb05 	bl	80027bc <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80031b4:	e01b      	b.n	80031ee <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80031b6:	f7ff fb01 	bl	80027bc <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b0a      	cmp	r3, #10
 80031c2:	d914      	bls.n	80031ee <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00d      	beq.n	80031ee <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d6:	f023 0312 	bic.w	r3, r3, #18
 80031da:	f043 0210 	orr.w	r2, r3, #16
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e013      	b.n	8003216 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1dc      	bne.n	80031b6 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003200:	f023 0303 	bic.w	r3, r3, #3
 8003204:	f043 0201 	orr.w	r2, r3, #1
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003214:	7dfb      	ldrb	r3, [r7, #23]
}
 8003216:	4618      	mov	r0, r3
 8003218:	371c      	adds	r7, #28
 800321a:	46bd      	mov	sp, r7
 800321c:	bd90      	pop	{r4, r7, pc}
 800321e:	bf00      	nop
 8003220:	20000004 	.word	0x20000004

08003224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003234:	4b0c      	ldr	r3, [pc, #48]	; (8003268 <__NVIC_SetPriorityGrouping+0x44>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003240:	4013      	ands	r3, r2
 8003242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800324c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003256:	4a04      	ldr	r2, [pc, #16]	; (8003268 <__NVIC_SetPriorityGrouping+0x44>)
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	60d3      	str	r3, [r2, #12]
}
 800325c:	bf00      	nop
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	bc80      	pop	{r7}
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	e000ed00 	.word	0xe000ed00

0800326c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003270:	4b04      	ldr	r3, [pc, #16]	; (8003284 <__NVIC_GetPriorityGrouping+0x18>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	0a1b      	lsrs	r3, r3, #8
 8003276:	f003 0307 	and.w	r3, r3, #7
}
 800327a:	4618      	mov	r0, r3
 800327c:	46bd      	mov	sp, r7
 800327e:	bc80      	pop	{r7}
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	e000ed00 	.word	0xe000ed00

08003288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	6039      	str	r1, [r7, #0]
 8003292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003298:	2b00      	cmp	r3, #0
 800329a:	db0a      	blt.n	80032b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	490c      	ldr	r1, [pc, #48]	; (80032d4 <__NVIC_SetPriority+0x4c>)
 80032a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a6:	0112      	lsls	r2, r2, #4
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	440b      	add	r3, r1
 80032ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032b0:	e00a      	b.n	80032c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	4908      	ldr	r1, [pc, #32]	; (80032d8 <__NVIC_SetPriority+0x50>)
 80032b8:	79fb      	ldrb	r3, [r7, #7]
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	3b04      	subs	r3, #4
 80032c0:	0112      	lsls	r2, r2, #4
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	440b      	add	r3, r1
 80032c6:	761a      	strb	r2, [r3, #24]
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	e000e100 	.word	0xe000e100
 80032d8:	e000ed00 	.word	0xe000ed00

080032dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032dc:	b480      	push	{r7}
 80032de:	b089      	sub	sp, #36	; 0x24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	f1c3 0307 	rsb	r3, r3, #7
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	bf28      	it	cs
 80032fa:	2304      	movcs	r3, #4
 80032fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	3304      	adds	r3, #4
 8003302:	2b06      	cmp	r3, #6
 8003304:	d902      	bls.n	800330c <NVIC_EncodePriority+0x30>
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	3b03      	subs	r3, #3
 800330a:	e000      	b.n	800330e <NVIC_EncodePriority+0x32>
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003310:	f04f 32ff 	mov.w	r2, #4294967295
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	43da      	mvns	r2, r3
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	401a      	ands	r2, r3
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003324:	f04f 31ff 	mov.w	r1, #4294967295
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	fa01 f303 	lsl.w	r3, r1, r3
 800332e:	43d9      	mvns	r1, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003334:	4313      	orrs	r3, r2
         );
}
 8003336:	4618      	mov	r0, r3
 8003338:	3724      	adds	r7, #36	; 0x24
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr

08003340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3b01      	subs	r3, #1
 800334c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003350:	d301      	bcc.n	8003356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003352:	2301      	movs	r3, #1
 8003354:	e00f      	b.n	8003376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003356:	4a0a      	ldr	r2, [pc, #40]	; (8003380 <SysTick_Config+0x40>)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3b01      	subs	r3, #1
 800335c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800335e:	210f      	movs	r1, #15
 8003360:	f04f 30ff 	mov.w	r0, #4294967295
 8003364:	f7ff ff90 	bl	8003288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003368:	4b05      	ldr	r3, [pc, #20]	; (8003380 <SysTick_Config+0x40>)
 800336a:	2200      	movs	r2, #0
 800336c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800336e:	4b04      	ldr	r3, [pc, #16]	; (8003380 <SysTick_Config+0x40>)
 8003370:	2207      	movs	r2, #7
 8003372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	e000e010 	.word	0xe000e010

08003384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7ff ff49 	bl	8003224 <__NVIC_SetPriorityGrouping>
}
 8003392:	bf00      	nop
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800339a:	b580      	push	{r7, lr}
 800339c:	b086      	sub	sp, #24
 800339e:	af00      	add	r7, sp, #0
 80033a0:	4603      	mov	r3, r0
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	607a      	str	r2, [r7, #4]
 80033a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033ac:	f7ff ff5e 	bl	800326c <__NVIC_GetPriorityGrouping>
 80033b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	68b9      	ldr	r1, [r7, #8]
 80033b6:	6978      	ldr	r0, [r7, #20]
 80033b8:	f7ff ff90 	bl	80032dc <NVIC_EncodePriority>
 80033bc:	4602      	mov	r2, r0
 80033be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033c2:	4611      	mov	r1, r2
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff ff5f 	bl	8003288 <__NVIC_SetPriority>
}
 80033ca:	bf00      	nop
 80033cc:	3718      	adds	r7, #24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b082      	sub	sp, #8
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7ff ffb0 	bl	8003340 <SysTick_Config>
 80033e0:	4603      	mov	r3, r0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
	...

080033ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b08b      	sub	sp, #44	; 0x2c
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033f6:	2300      	movs	r3, #0
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80033fa:	2300      	movs	r3, #0
 80033fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033fe:	e169      	b.n	80036d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003400:	2201      	movs	r2, #1
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	69fa      	ldr	r2, [r7, #28]
 8003410:	4013      	ands	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	429a      	cmp	r2, r3
 800341a:	f040 8158 	bne.w	80036ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	4a9a      	ldr	r2, [pc, #616]	; (800368c <HAL_GPIO_Init+0x2a0>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d05e      	beq.n	80034e6 <HAL_GPIO_Init+0xfa>
 8003428:	4a98      	ldr	r2, [pc, #608]	; (800368c <HAL_GPIO_Init+0x2a0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d875      	bhi.n	800351a <HAL_GPIO_Init+0x12e>
 800342e:	4a98      	ldr	r2, [pc, #608]	; (8003690 <HAL_GPIO_Init+0x2a4>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d058      	beq.n	80034e6 <HAL_GPIO_Init+0xfa>
 8003434:	4a96      	ldr	r2, [pc, #600]	; (8003690 <HAL_GPIO_Init+0x2a4>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d86f      	bhi.n	800351a <HAL_GPIO_Init+0x12e>
 800343a:	4a96      	ldr	r2, [pc, #600]	; (8003694 <HAL_GPIO_Init+0x2a8>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d052      	beq.n	80034e6 <HAL_GPIO_Init+0xfa>
 8003440:	4a94      	ldr	r2, [pc, #592]	; (8003694 <HAL_GPIO_Init+0x2a8>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d869      	bhi.n	800351a <HAL_GPIO_Init+0x12e>
 8003446:	4a94      	ldr	r2, [pc, #592]	; (8003698 <HAL_GPIO_Init+0x2ac>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d04c      	beq.n	80034e6 <HAL_GPIO_Init+0xfa>
 800344c:	4a92      	ldr	r2, [pc, #584]	; (8003698 <HAL_GPIO_Init+0x2ac>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d863      	bhi.n	800351a <HAL_GPIO_Init+0x12e>
 8003452:	4a92      	ldr	r2, [pc, #584]	; (800369c <HAL_GPIO_Init+0x2b0>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d046      	beq.n	80034e6 <HAL_GPIO_Init+0xfa>
 8003458:	4a90      	ldr	r2, [pc, #576]	; (800369c <HAL_GPIO_Init+0x2b0>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d85d      	bhi.n	800351a <HAL_GPIO_Init+0x12e>
 800345e:	2b12      	cmp	r3, #18
 8003460:	d82a      	bhi.n	80034b8 <HAL_GPIO_Init+0xcc>
 8003462:	2b12      	cmp	r3, #18
 8003464:	d859      	bhi.n	800351a <HAL_GPIO_Init+0x12e>
 8003466:	a201      	add	r2, pc, #4	; (adr r2, 800346c <HAL_GPIO_Init+0x80>)
 8003468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346c:	080034e7 	.word	0x080034e7
 8003470:	080034c1 	.word	0x080034c1
 8003474:	080034d3 	.word	0x080034d3
 8003478:	08003515 	.word	0x08003515
 800347c:	0800351b 	.word	0x0800351b
 8003480:	0800351b 	.word	0x0800351b
 8003484:	0800351b 	.word	0x0800351b
 8003488:	0800351b 	.word	0x0800351b
 800348c:	0800351b 	.word	0x0800351b
 8003490:	0800351b 	.word	0x0800351b
 8003494:	0800351b 	.word	0x0800351b
 8003498:	0800351b 	.word	0x0800351b
 800349c:	0800351b 	.word	0x0800351b
 80034a0:	0800351b 	.word	0x0800351b
 80034a4:	0800351b 	.word	0x0800351b
 80034a8:	0800351b 	.word	0x0800351b
 80034ac:	0800351b 	.word	0x0800351b
 80034b0:	080034c9 	.word	0x080034c9
 80034b4:	080034dd 	.word	0x080034dd
 80034b8:	4a79      	ldr	r2, [pc, #484]	; (80036a0 <HAL_GPIO_Init+0x2b4>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d013      	beq.n	80034e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80034be:	e02c      	b.n	800351a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	623b      	str	r3, [r7, #32]
          break;
 80034c6:	e029      	b.n	800351c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	3304      	adds	r3, #4
 80034ce:	623b      	str	r3, [r7, #32]
          break;
 80034d0:	e024      	b.n	800351c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	3308      	adds	r3, #8
 80034d8:	623b      	str	r3, [r7, #32]
          break;
 80034da:	e01f      	b.n	800351c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	330c      	adds	r3, #12
 80034e2:	623b      	str	r3, [r7, #32]
          break;
 80034e4:	e01a      	b.n	800351c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d102      	bne.n	80034f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80034ee:	2304      	movs	r3, #4
 80034f0:	623b      	str	r3, [r7, #32]
          break;
 80034f2:	e013      	b.n	800351c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d105      	bne.n	8003508 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034fc:	2308      	movs	r3, #8
 80034fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	69fa      	ldr	r2, [r7, #28]
 8003504:	611a      	str	r2, [r3, #16]
          break;
 8003506:	e009      	b.n	800351c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003508:	2308      	movs	r3, #8
 800350a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	69fa      	ldr	r2, [r7, #28]
 8003510:	615a      	str	r2, [r3, #20]
          break;
 8003512:	e003      	b.n	800351c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003514:	2300      	movs	r3, #0
 8003516:	623b      	str	r3, [r7, #32]
          break;
 8003518:	e000      	b.n	800351c <HAL_GPIO_Init+0x130>
          break;
 800351a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	2bff      	cmp	r3, #255	; 0xff
 8003520:	d801      	bhi.n	8003526 <HAL_GPIO_Init+0x13a>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	e001      	b.n	800352a <HAL_GPIO_Init+0x13e>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3304      	adds	r3, #4
 800352a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	2bff      	cmp	r3, #255	; 0xff
 8003530:	d802      	bhi.n	8003538 <HAL_GPIO_Init+0x14c>
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	e002      	b.n	800353e <HAL_GPIO_Init+0x152>
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	3b08      	subs	r3, #8
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	210f      	movs	r1, #15
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	fa01 f303 	lsl.w	r3, r1, r3
 800354c:	43db      	mvns	r3, r3
 800354e:	401a      	ands	r2, r3
 8003550:	6a39      	ldr	r1, [r7, #32]
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	fa01 f303 	lsl.w	r3, r1, r3
 8003558:	431a      	orrs	r2, r3
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 80b1 	beq.w	80036ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800356c:	4b4d      	ldr	r3, [pc, #308]	; (80036a4 <HAL_GPIO_Init+0x2b8>)
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	4a4c      	ldr	r2, [pc, #304]	; (80036a4 <HAL_GPIO_Init+0x2b8>)
 8003572:	f043 0301 	orr.w	r3, r3, #1
 8003576:	6193      	str	r3, [r2, #24]
 8003578:	4b4a      	ldr	r3, [pc, #296]	; (80036a4 <HAL_GPIO_Init+0x2b8>)
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	60bb      	str	r3, [r7, #8]
 8003582:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003584:	4a48      	ldr	r2, [pc, #288]	; (80036a8 <HAL_GPIO_Init+0x2bc>)
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	089b      	lsrs	r3, r3, #2
 800358a:	3302      	adds	r3, #2
 800358c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003590:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	f003 0303 	and.w	r3, r3, #3
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	220f      	movs	r2, #15
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	43db      	mvns	r3, r3
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	4013      	ands	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a40      	ldr	r2, [pc, #256]	; (80036ac <HAL_GPIO_Init+0x2c0>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d013      	beq.n	80035d8 <HAL_GPIO_Init+0x1ec>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a3f      	ldr	r2, [pc, #252]	; (80036b0 <HAL_GPIO_Init+0x2c4>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d00d      	beq.n	80035d4 <HAL_GPIO_Init+0x1e8>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a3e      	ldr	r2, [pc, #248]	; (80036b4 <HAL_GPIO_Init+0x2c8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d007      	beq.n	80035d0 <HAL_GPIO_Init+0x1e4>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a3d      	ldr	r2, [pc, #244]	; (80036b8 <HAL_GPIO_Init+0x2cc>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d101      	bne.n	80035cc <HAL_GPIO_Init+0x1e0>
 80035c8:	2303      	movs	r3, #3
 80035ca:	e006      	b.n	80035da <HAL_GPIO_Init+0x1ee>
 80035cc:	2304      	movs	r3, #4
 80035ce:	e004      	b.n	80035da <HAL_GPIO_Init+0x1ee>
 80035d0:	2302      	movs	r3, #2
 80035d2:	e002      	b.n	80035da <HAL_GPIO_Init+0x1ee>
 80035d4:	2301      	movs	r3, #1
 80035d6:	e000      	b.n	80035da <HAL_GPIO_Init+0x1ee>
 80035d8:	2300      	movs	r3, #0
 80035da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035dc:	f002 0203 	and.w	r2, r2, #3
 80035e0:	0092      	lsls	r2, r2, #2
 80035e2:	4093      	lsls	r3, r2
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80035ea:	492f      	ldr	r1, [pc, #188]	; (80036a8 <HAL_GPIO_Init+0x2bc>)
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ee:	089b      	lsrs	r3, r3, #2
 80035f0:	3302      	adds	r3, #2
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d006      	beq.n	8003612 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003604:	4b2d      	ldr	r3, [pc, #180]	; (80036bc <HAL_GPIO_Init+0x2d0>)
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	492c      	ldr	r1, [pc, #176]	; (80036bc <HAL_GPIO_Init+0x2d0>)
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	4313      	orrs	r3, r2
 800360e:	608b      	str	r3, [r1, #8]
 8003610:	e006      	b.n	8003620 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003612:	4b2a      	ldr	r3, [pc, #168]	; (80036bc <HAL_GPIO_Init+0x2d0>)
 8003614:	689a      	ldr	r2, [r3, #8]
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	43db      	mvns	r3, r3
 800361a:	4928      	ldr	r1, [pc, #160]	; (80036bc <HAL_GPIO_Init+0x2d0>)
 800361c:	4013      	ands	r3, r2
 800361e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d006      	beq.n	800363a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800362c:	4b23      	ldr	r3, [pc, #140]	; (80036bc <HAL_GPIO_Init+0x2d0>)
 800362e:	68da      	ldr	r2, [r3, #12]
 8003630:	4922      	ldr	r1, [pc, #136]	; (80036bc <HAL_GPIO_Init+0x2d0>)
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	4313      	orrs	r3, r2
 8003636:	60cb      	str	r3, [r1, #12]
 8003638:	e006      	b.n	8003648 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800363a:	4b20      	ldr	r3, [pc, #128]	; (80036bc <HAL_GPIO_Init+0x2d0>)
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	43db      	mvns	r3, r3
 8003642:	491e      	ldr	r1, [pc, #120]	; (80036bc <HAL_GPIO_Init+0x2d0>)
 8003644:	4013      	ands	r3, r2
 8003646:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d006      	beq.n	8003662 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003654:	4b19      	ldr	r3, [pc, #100]	; (80036bc <HAL_GPIO_Init+0x2d0>)
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	4918      	ldr	r1, [pc, #96]	; (80036bc <HAL_GPIO_Init+0x2d0>)
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	4313      	orrs	r3, r2
 800365e:	604b      	str	r3, [r1, #4]
 8003660:	e006      	b.n	8003670 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003662:	4b16      	ldr	r3, [pc, #88]	; (80036bc <HAL_GPIO_Init+0x2d0>)
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	43db      	mvns	r3, r3
 800366a:	4914      	ldr	r1, [pc, #80]	; (80036bc <HAL_GPIO_Init+0x2d0>)
 800366c:	4013      	ands	r3, r2
 800366e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d021      	beq.n	80036c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800367c:	4b0f      	ldr	r3, [pc, #60]	; (80036bc <HAL_GPIO_Init+0x2d0>)
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	490e      	ldr	r1, [pc, #56]	; (80036bc <HAL_GPIO_Init+0x2d0>)
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	4313      	orrs	r3, r2
 8003686:	600b      	str	r3, [r1, #0]
 8003688:	e021      	b.n	80036ce <HAL_GPIO_Init+0x2e2>
 800368a:	bf00      	nop
 800368c:	10320000 	.word	0x10320000
 8003690:	10310000 	.word	0x10310000
 8003694:	10220000 	.word	0x10220000
 8003698:	10210000 	.word	0x10210000
 800369c:	10120000 	.word	0x10120000
 80036a0:	10110000 	.word	0x10110000
 80036a4:	40021000 	.word	0x40021000
 80036a8:	40010000 	.word	0x40010000
 80036ac:	40010800 	.word	0x40010800
 80036b0:	40010c00 	.word	0x40010c00
 80036b4:	40011000 	.word	0x40011000
 80036b8:	40011400 	.word	0x40011400
 80036bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80036c0:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <HAL_GPIO_Init+0x304>)
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	43db      	mvns	r3, r3
 80036c8:	4909      	ldr	r1, [pc, #36]	; (80036f0 <HAL_GPIO_Init+0x304>)
 80036ca:	4013      	ands	r3, r2
 80036cc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	3301      	adds	r3, #1
 80036d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	fa22 f303 	lsr.w	r3, r2, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f47f ae8e 	bne.w	8003400 <HAL_GPIO_Init+0x14>
  }
}
 80036e4:	bf00      	nop
 80036e6:	bf00      	nop
 80036e8:	372c      	adds	r7, #44	; 0x2c
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr
 80036f0:	40010400 	.word	0x40010400

080036f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	460b      	mov	r3, r1
 80036fe:	807b      	strh	r3, [r7, #2]
 8003700:	4613      	mov	r3, r2
 8003702:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003704:	787b      	ldrb	r3, [r7, #1]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800370a:	887a      	ldrh	r2, [r7, #2]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003710:	e003      	b.n	800371a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003712:	887b      	ldrh	r3, [r7, #2]
 8003714:	041a      	lsls	r2, r3, #16
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	611a      	str	r2, [r3, #16]
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr

08003724 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e272      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 8087 	beq.w	8003852 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003744:	4b92      	ldr	r3, [pc, #584]	; (8003990 <HAL_RCC_OscConfig+0x26c>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f003 030c 	and.w	r3, r3, #12
 800374c:	2b04      	cmp	r3, #4
 800374e:	d00c      	beq.n	800376a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003750:	4b8f      	ldr	r3, [pc, #572]	; (8003990 <HAL_RCC_OscConfig+0x26c>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f003 030c 	and.w	r3, r3, #12
 8003758:	2b08      	cmp	r3, #8
 800375a:	d112      	bne.n	8003782 <HAL_RCC_OscConfig+0x5e>
 800375c:	4b8c      	ldr	r3, [pc, #560]	; (8003990 <HAL_RCC_OscConfig+0x26c>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003768:	d10b      	bne.n	8003782 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800376a:	4b89      	ldr	r3, [pc, #548]	; (8003990 <HAL_RCC_OscConfig+0x26c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d06c      	beq.n	8003850 <HAL_RCC_OscConfig+0x12c>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d168      	bne.n	8003850 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e24c      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800378a:	d106      	bne.n	800379a <HAL_RCC_OscConfig+0x76>
 800378c:	4b80      	ldr	r3, [pc, #512]	; (8003990 <HAL_RCC_OscConfig+0x26c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a7f      	ldr	r2, [pc, #508]	; (8003990 <HAL_RCC_OscConfig+0x26c>)
 8003792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003796:	6013      	str	r3, [r2, #0]
 8003798:	e02e      	b.n	80037f8 <HAL_RCC_OscConfig+0xd4>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10c      	bne.n	80037bc <HAL_RCC_OscConfig+0x98>
 80037a2:	4b7b      	ldr	r3, [pc, #492]	; (8003990 <HAL_RCC_OscConfig+0x26c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a7a      	ldr	r2, [pc, #488]	; (8003990 <HAL_RCC_OscConfig+0x26c>)
 80037a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	4b78      	ldr	r3, [pc, #480]	; (8003990 <HAL_RCC_OscConfig+0x26c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a77      	ldr	r2, [pc, #476]	; (8003990 <HAL_RCC_OscConfig+0x26c>)
 80037b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	e01d      	b.n	80037f8 <HAL_RCC_OscConfig+0xd4>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037c4:	d10c      	bne.n	80037e0 <HAL_RCC_OscConfig+0xbc>
 80037c6:	4b72      	ldr	r3, [pc, #456]	; (8003990 <HAL_RCC_OscConfig+0x26c>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a71      	ldr	r2, [pc, #452]	; (8003990 <HAL_RCC_OscConfig+0x26c>)
 80037cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	4b6f      	ldr	r3, [pc, #444]	; (8003990 <HAL_RCC_OscConfig+0x26c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a6e      	ldr	r2, [pc, #440]	; (8003990 <HAL_RCC_OscConfig+0x26c>)
 80037d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	e00b      	b.n	80037f8 <HAL_RCC_OscConfig+0xd4>
 80037e0:	4b6b      	ldr	r3, [pc, #428]	; (8003990 <HAL_RCC_OscConfig+0x26c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a6a      	ldr	r2, [pc, #424]	; (8003990 <HAL_RCC_OscConfig+0x26c>)
 80037e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ea:	6013      	str	r3, [r2, #0]
 80037ec:	4b68      	ldr	r3, [pc, #416]	; (8003990 <HAL_RCC_OscConfig+0x26c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a67      	ldr	r2, [pc, #412]	; (8003990 <HAL_RCC_OscConfig+0x26c>)
 80037f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d013      	beq.n	8003828 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003800:	f7fe ffdc 	bl	80027bc <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003808:	f7fe ffd8 	bl	80027bc <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b64      	cmp	r3, #100	; 0x64
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e200      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381a:	4b5d      	ldr	r3, [pc, #372]	; (8003990 <HAL_RCC_OscConfig+0x26c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d0f0      	beq.n	8003808 <HAL_RCC_OscConfig+0xe4>
 8003826:	e014      	b.n	8003852 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003828:	f7fe ffc8 	bl	80027bc <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003830:	f7fe ffc4 	bl	80027bc <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b64      	cmp	r3, #100	; 0x64
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e1ec      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003842:	4b53      	ldr	r3, [pc, #332]	; (8003990 <HAL_RCC_OscConfig+0x26c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f0      	bne.n	8003830 <HAL_RCC_OscConfig+0x10c>
 800384e:	e000      	b.n	8003852 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d063      	beq.n	8003926 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800385e:	4b4c      	ldr	r3, [pc, #304]	; (8003990 <HAL_RCC_OscConfig+0x26c>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f003 030c 	and.w	r3, r3, #12
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00b      	beq.n	8003882 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800386a:	4b49      	ldr	r3, [pc, #292]	; (8003990 <HAL_RCC_OscConfig+0x26c>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f003 030c 	and.w	r3, r3, #12
 8003872:	2b08      	cmp	r3, #8
 8003874:	d11c      	bne.n	80038b0 <HAL_RCC_OscConfig+0x18c>
 8003876:	4b46      	ldr	r3, [pc, #280]	; (8003990 <HAL_RCC_OscConfig+0x26c>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d116      	bne.n	80038b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003882:	4b43      	ldr	r3, [pc, #268]	; (8003990 <HAL_RCC_OscConfig+0x26c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d005      	beq.n	800389a <HAL_RCC_OscConfig+0x176>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d001      	beq.n	800389a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e1c0      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800389a:	4b3d      	ldr	r3, [pc, #244]	; (8003990 <HAL_RCC_OscConfig+0x26c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	4939      	ldr	r1, [pc, #228]	; (8003990 <HAL_RCC_OscConfig+0x26c>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ae:	e03a      	b.n	8003926 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d020      	beq.n	80038fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038b8:	4b36      	ldr	r3, [pc, #216]	; (8003994 <HAL_RCC_OscConfig+0x270>)
 80038ba:	2201      	movs	r2, #1
 80038bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038be:	f7fe ff7d 	bl	80027bc <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c4:	e008      	b.n	80038d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038c6:	f7fe ff79 	bl	80027bc <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e1a1      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d8:	4b2d      	ldr	r3, [pc, #180]	; (8003990 <HAL_RCC_OscConfig+0x26c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d0f0      	beq.n	80038c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e4:	4b2a      	ldr	r3, [pc, #168]	; (8003990 <HAL_RCC_OscConfig+0x26c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	4927      	ldr	r1, [pc, #156]	; (8003990 <HAL_RCC_OscConfig+0x26c>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	600b      	str	r3, [r1, #0]
 80038f8:	e015      	b.n	8003926 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038fa:	4b26      	ldr	r3, [pc, #152]	; (8003994 <HAL_RCC_OscConfig+0x270>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003900:	f7fe ff5c 	bl	80027bc <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003908:	f7fe ff58 	bl	80027bc <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e180      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800391a:	4b1d      	ldr	r3, [pc, #116]	; (8003990 <HAL_RCC_OscConfig+0x26c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1f0      	bne.n	8003908 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0308 	and.w	r3, r3, #8
 800392e:	2b00      	cmp	r3, #0
 8003930:	d03a      	beq.n	80039a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d019      	beq.n	800396e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800393a:	4b17      	ldr	r3, [pc, #92]	; (8003998 <HAL_RCC_OscConfig+0x274>)
 800393c:	2201      	movs	r2, #1
 800393e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003940:	f7fe ff3c 	bl	80027bc <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003948:	f7fe ff38 	bl	80027bc <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e160      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800395a:	4b0d      	ldr	r3, [pc, #52]	; (8003990 <HAL_RCC_OscConfig+0x26c>)
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0f0      	beq.n	8003948 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003966:	2001      	movs	r0, #1
 8003968:	f000 face 	bl	8003f08 <RCC_Delay>
 800396c:	e01c      	b.n	80039a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800396e:	4b0a      	ldr	r3, [pc, #40]	; (8003998 <HAL_RCC_OscConfig+0x274>)
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003974:	f7fe ff22 	bl	80027bc <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800397a:	e00f      	b.n	800399c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800397c:	f7fe ff1e 	bl	80027bc <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d908      	bls.n	800399c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e146      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
 800398e:	bf00      	nop
 8003990:	40021000 	.word	0x40021000
 8003994:	42420000 	.word	0x42420000
 8003998:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800399c:	4b92      	ldr	r3, [pc, #584]	; (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1e9      	bne.n	800397c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 80a6 	beq.w	8003b02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039b6:	2300      	movs	r3, #0
 80039b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ba:	4b8b      	ldr	r3, [pc, #556]	; (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10d      	bne.n	80039e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039c6:	4b88      	ldr	r3, [pc, #544]	; (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	4a87      	ldr	r2, [pc, #540]	; (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 80039cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d0:	61d3      	str	r3, [r2, #28]
 80039d2:	4b85      	ldr	r3, [pc, #532]	; (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039da:	60bb      	str	r3, [r7, #8]
 80039dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039de:	2301      	movs	r3, #1
 80039e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e2:	4b82      	ldr	r3, [pc, #520]	; (8003bec <HAL_RCC_OscConfig+0x4c8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d118      	bne.n	8003a20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ee:	4b7f      	ldr	r3, [pc, #508]	; (8003bec <HAL_RCC_OscConfig+0x4c8>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a7e      	ldr	r2, [pc, #504]	; (8003bec <HAL_RCC_OscConfig+0x4c8>)
 80039f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039fa:	f7fe fedf 	bl	80027bc <HAL_GetTick>
 80039fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a00:	e008      	b.n	8003a14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a02:	f7fe fedb 	bl	80027bc <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b64      	cmp	r3, #100	; 0x64
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e103      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a14:	4b75      	ldr	r3, [pc, #468]	; (8003bec <HAL_RCC_OscConfig+0x4c8>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0f0      	beq.n	8003a02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d106      	bne.n	8003a36 <HAL_RCC_OscConfig+0x312>
 8003a28:	4b6f      	ldr	r3, [pc, #444]	; (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	4a6e      	ldr	r2, [pc, #440]	; (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a2e:	f043 0301 	orr.w	r3, r3, #1
 8003a32:	6213      	str	r3, [r2, #32]
 8003a34:	e02d      	b.n	8003a92 <HAL_RCC_OscConfig+0x36e>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10c      	bne.n	8003a58 <HAL_RCC_OscConfig+0x334>
 8003a3e:	4b6a      	ldr	r3, [pc, #424]	; (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	4a69      	ldr	r2, [pc, #420]	; (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a44:	f023 0301 	bic.w	r3, r3, #1
 8003a48:	6213      	str	r3, [r2, #32]
 8003a4a:	4b67      	ldr	r3, [pc, #412]	; (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	4a66      	ldr	r2, [pc, #408]	; (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a50:	f023 0304 	bic.w	r3, r3, #4
 8003a54:	6213      	str	r3, [r2, #32]
 8003a56:	e01c      	b.n	8003a92 <HAL_RCC_OscConfig+0x36e>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	2b05      	cmp	r3, #5
 8003a5e:	d10c      	bne.n	8003a7a <HAL_RCC_OscConfig+0x356>
 8003a60:	4b61      	ldr	r3, [pc, #388]	; (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	4a60      	ldr	r2, [pc, #384]	; (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a66:	f043 0304 	orr.w	r3, r3, #4
 8003a6a:	6213      	str	r3, [r2, #32]
 8003a6c:	4b5e      	ldr	r3, [pc, #376]	; (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	4a5d      	ldr	r2, [pc, #372]	; (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a72:	f043 0301 	orr.w	r3, r3, #1
 8003a76:	6213      	str	r3, [r2, #32]
 8003a78:	e00b      	b.n	8003a92 <HAL_RCC_OscConfig+0x36e>
 8003a7a:	4b5b      	ldr	r3, [pc, #364]	; (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	4a5a      	ldr	r2, [pc, #360]	; (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a80:	f023 0301 	bic.w	r3, r3, #1
 8003a84:	6213      	str	r3, [r2, #32]
 8003a86:	4b58      	ldr	r3, [pc, #352]	; (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	4a57      	ldr	r2, [pc, #348]	; (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003a8c:	f023 0304 	bic.w	r3, r3, #4
 8003a90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d015      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a9a:	f7fe fe8f 	bl	80027bc <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa0:	e00a      	b.n	8003ab8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa2:	f7fe fe8b 	bl	80027bc <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e0b1      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab8:	4b4b      	ldr	r3, [pc, #300]	; (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0ee      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x37e>
 8003ac4:	e014      	b.n	8003af0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ac6:	f7fe fe79 	bl	80027bc <HAL_GetTick>
 8003aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003acc:	e00a      	b.n	8003ae4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ace:	f7fe fe75 	bl	80027bc <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e09b      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ae4:	4b40      	ldr	r3, [pc, #256]	; (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1ee      	bne.n	8003ace <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003af0:	7dfb      	ldrb	r3, [r7, #23]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d105      	bne.n	8003b02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003af6:	4b3c      	ldr	r3, [pc, #240]	; (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	4a3b      	ldr	r2, [pc, #236]	; (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f000 8087 	beq.w	8003c1a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b0c:	4b36      	ldr	r3, [pc, #216]	; (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f003 030c 	and.w	r3, r3, #12
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d061      	beq.n	8003bdc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d146      	bne.n	8003bae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b20:	4b33      	ldr	r3, [pc, #204]	; (8003bf0 <HAL_RCC_OscConfig+0x4cc>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b26:	f7fe fe49 	bl	80027bc <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b2e:	f7fe fe45 	bl	80027bc <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e06d      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b40:	4b29      	ldr	r3, [pc, #164]	; (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1f0      	bne.n	8003b2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b54:	d108      	bne.n	8003b68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b56:	4b24      	ldr	r3, [pc, #144]	; (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	4921      	ldr	r1, [pc, #132]	; (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b68:	4b1f      	ldr	r3, [pc, #124]	; (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a19      	ldr	r1, [r3, #32]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	491b      	ldr	r1, [pc, #108]	; (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b80:	4b1b      	ldr	r3, [pc, #108]	; (8003bf0 <HAL_RCC_OscConfig+0x4cc>)
 8003b82:	2201      	movs	r2, #1
 8003b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b86:	f7fe fe19 	bl	80027bc <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b8e:	f7fe fe15 	bl	80027bc <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e03d      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ba0:	4b11      	ldr	r3, [pc, #68]	; (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0f0      	beq.n	8003b8e <HAL_RCC_OscConfig+0x46a>
 8003bac:	e035      	b.n	8003c1a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bae:	4b10      	ldr	r3, [pc, #64]	; (8003bf0 <HAL_RCC_OscConfig+0x4cc>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb4:	f7fe fe02 	bl	80027bc <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bbc:	f7fe fdfe 	bl	80027bc <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e026      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bce:	4b06      	ldr	r3, [pc, #24]	; (8003be8 <HAL_RCC_OscConfig+0x4c4>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1f0      	bne.n	8003bbc <HAL_RCC_OscConfig+0x498>
 8003bda:	e01e      	b.n	8003c1a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	69db      	ldr	r3, [r3, #28]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d107      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e019      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
 8003be8:	40021000 	.word	0x40021000
 8003bec:	40007000 	.word	0x40007000
 8003bf0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bf4:	4b0b      	ldr	r3, [pc, #44]	; (8003c24 <HAL_RCC_OscConfig+0x500>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d106      	bne.n	8003c16 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d001      	beq.n	8003c1a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e000      	b.n	8003c1c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3718      	adds	r7, #24
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40021000 	.word	0x40021000

08003c28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e0d0      	b.n	8003dde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c3c:	4b6a      	ldr	r3, [pc, #424]	; (8003de8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d910      	bls.n	8003c6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4a:	4b67      	ldr	r3, [pc, #412]	; (8003de8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f023 0207 	bic.w	r2, r3, #7
 8003c52:	4965      	ldr	r1, [pc, #404]	; (8003de8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c5a:	4b63      	ldr	r3, [pc, #396]	; (8003de8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d001      	beq.n	8003c6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e0b8      	b.n	8003dde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d020      	beq.n	8003cba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d005      	beq.n	8003c90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c84:	4b59      	ldr	r3, [pc, #356]	; (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	4a58      	ldr	r2, [pc, #352]	; (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003c8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0308 	and.w	r3, r3, #8
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d005      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c9c:	4b53      	ldr	r3, [pc, #332]	; (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	4a52      	ldr	r2, [pc, #328]	; (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003ca2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003ca6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ca8:	4b50      	ldr	r3, [pc, #320]	; (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	494d      	ldr	r1, [pc, #308]	; (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d040      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d107      	bne.n	8003cde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cce:	4b47      	ldr	r3, [pc, #284]	; (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d115      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e07f      	b.n	8003dde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d107      	bne.n	8003cf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ce6:	4b41      	ldr	r3, [pc, #260]	; (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d109      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e073      	b.n	8003dde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf6:	4b3d      	ldr	r3, [pc, #244]	; (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e06b      	b.n	8003dde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d06:	4b39      	ldr	r3, [pc, #228]	; (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f023 0203 	bic.w	r2, r3, #3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	4936      	ldr	r1, [pc, #216]	; (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d18:	f7fe fd50 	bl	80027bc <HAL_GetTick>
 8003d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d1e:	e00a      	b.n	8003d36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d20:	f7fe fd4c 	bl	80027bc <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e053      	b.n	8003dde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d36:	4b2d      	ldr	r3, [pc, #180]	; (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f003 020c 	and.w	r2, r3, #12
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d1eb      	bne.n	8003d20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d48:	4b27      	ldr	r3, [pc, #156]	; (8003de8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d210      	bcs.n	8003d78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d56:	4b24      	ldr	r3, [pc, #144]	; (8003de8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f023 0207 	bic.w	r2, r3, #7
 8003d5e:	4922      	ldr	r1, [pc, #136]	; (8003de8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d66:	4b20      	ldr	r3, [pc, #128]	; (8003de8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d001      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e032      	b.n	8003dde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d008      	beq.n	8003d96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d84:	4b19      	ldr	r3, [pc, #100]	; (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	4916      	ldr	r1, [pc, #88]	; (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d009      	beq.n	8003db6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003da2:	4b12      	ldr	r3, [pc, #72]	; (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	490e      	ldr	r1, [pc, #56]	; (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003db6:	f000 f821 	bl	8003dfc <HAL_RCC_GetSysClockFreq>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	4b0b      	ldr	r3, [pc, #44]	; (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	091b      	lsrs	r3, r3, #4
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	490a      	ldr	r1, [pc, #40]	; (8003df0 <HAL_RCC_ClockConfig+0x1c8>)
 8003dc8:	5ccb      	ldrb	r3, [r1, r3]
 8003dca:	fa22 f303 	lsr.w	r3, r2, r3
 8003dce:	4a09      	ldr	r2, [pc, #36]	; (8003df4 <HAL_RCC_ClockConfig+0x1cc>)
 8003dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003dd2:	4b09      	ldr	r3, [pc, #36]	; (8003df8 <HAL_RCC_ClockConfig+0x1d0>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7fe fcae 	bl	8002738 <HAL_InitTick>

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	40022000 	.word	0x40022000
 8003dec:	40021000 	.word	0x40021000
 8003df0:	0800c9b4 	.word	0x0800c9b4
 8003df4:	20000004 	.word	0x20000004
 8003df8:	20000008 	.word	0x20000008

08003dfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	2300      	movs	r3, #0
 8003e08:	60bb      	str	r3, [r7, #8]
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	617b      	str	r3, [r7, #20]
 8003e0e:	2300      	movs	r3, #0
 8003e10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e16:	4b1e      	ldr	r3, [pc, #120]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f003 030c 	and.w	r3, r3, #12
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d002      	beq.n	8003e2c <HAL_RCC_GetSysClockFreq+0x30>
 8003e26:	2b08      	cmp	r3, #8
 8003e28:	d003      	beq.n	8003e32 <HAL_RCC_GetSysClockFreq+0x36>
 8003e2a:	e027      	b.n	8003e7c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e2c:	4b19      	ldr	r3, [pc, #100]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e2e:	613b      	str	r3, [r7, #16]
      break;
 8003e30:	e027      	b.n	8003e82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	0c9b      	lsrs	r3, r3, #18
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	4a17      	ldr	r2, [pc, #92]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003e3c:	5cd3      	ldrb	r3, [r2, r3]
 8003e3e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d010      	beq.n	8003e6c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e4a:	4b11      	ldr	r3, [pc, #68]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	0c5b      	lsrs	r3, r3, #17
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	4a11      	ldr	r2, [pc, #68]	; (8003e9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003e56:	5cd3      	ldrb	r3, [r2, r3]
 8003e58:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a0d      	ldr	r2, [pc, #52]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e5e:	fb03 f202 	mul.w	r2, r3, r2
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e68:	617b      	str	r3, [r7, #20]
 8003e6a:	e004      	b.n	8003e76 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a0c      	ldr	r2, [pc, #48]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e70:	fb02 f303 	mul.w	r3, r2, r3
 8003e74:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	613b      	str	r3, [r7, #16]
      break;
 8003e7a:	e002      	b.n	8003e82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e7c:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e7e:	613b      	str	r3, [r7, #16]
      break;
 8003e80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e82:	693b      	ldr	r3, [r7, #16]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	371c      	adds	r7, #28
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bc80      	pop	{r7}
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	40021000 	.word	0x40021000
 8003e94:	007a1200 	.word	0x007a1200
 8003e98:	0800c9cc 	.word	0x0800c9cc
 8003e9c:	0800c9dc 	.word	0x0800c9dc
 8003ea0:	003d0900 	.word	0x003d0900

08003ea4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ea8:	4b02      	ldr	r3, [pc, #8]	; (8003eb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bc80      	pop	{r7}
 8003eb2:	4770      	bx	lr
 8003eb4:	20000004 	.word	0x20000004

08003eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ebc:	f7ff fff2 	bl	8003ea4 <HAL_RCC_GetHCLKFreq>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	4b05      	ldr	r3, [pc, #20]	; (8003ed8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	0a1b      	lsrs	r3, r3, #8
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	4903      	ldr	r1, [pc, #12]	; (8003edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ece:	5ccb      	ldrb	r3, [r1, r3]
 8003ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	0800c9c4 	.word	0x0800c9c4

08003ee0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ee4:	f7ff ffde 	bl	8003ea4 <HAL_RCC_GetHCLKFreq>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	4b05      	ldr	r3, [pc, #20]	; (8003f00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	0adb      	lsrs	r3, r3, #11
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	4903      	ldr	r1, [pc, #12]	; (8003f04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ef6:	5ccb      	ldrb	r3, [r1, r3]
 8003ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	40021000 	.word	0x40021000
 8003f04:	0800c9c4 	.word	0x0800c9c4

08003f08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f10:	4b0a      	ldr	r3, [pc, #40]	; (8003f3c <RCC_Delay+0x34>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a0a      	ldr	r2, [pc, #40]	; (8003f40 <RCC_Delay+0x38>)
 8003f16:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1a:	0a5b      	lsrs	r3, r3, #9
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	fb02 f303 	mul.w	r3, r2, r3
 8003f22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f24:	bf00      	nop
  }
  while (Delay --);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	1e5a      	subs	r2, r3, #1
 8003f2a:	60fa      	str	r2, [r7, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1f9      	bne.n	8003f24 <RCC_Delay+0x1c>
}
 8003f30:	bf00      	nop
 8003f32:	bf00      	nop
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bc80      	pop	{r7}
 8003f3a:	4770      	bx	lr
 8003f3c:	20000004 	.word	0x20000004
 8003f40:	10624dd3 	.word	0x10624dd3

08003f44 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	613b      	str	r3, [r7, #16]
 8003f50:	2300      	movs	r3, #0
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d07d      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003f60:	2300      	movs	r3, #0
 8003f62:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f64:	4b4f      	ldr	r3, [pc, #316]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d10d      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f70:	4b4c      	ldr	r3, [pc, #304]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f72:	69db      	ldr	r3, [r3, #28]
 8003f74:	4a4b      	ldr	r2, [pc, #300]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f7a:	61d3      	str	r3, [r2, #28]
 8003f7c:	4b49      	ldr	r3, [pc, #292]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f7e:	69db      	ldr	r3, [r3, #28]
 8003f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f84:	60bb      	str	r3, [r7, #8]
 8003f86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f8c:	4b46      	ldr	r3, [pc, #280]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d118      	bne.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f98:	4b43      	ldr	r3, [pc, #268]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a42      	ldr	r2, [pc, #264]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fa4:	f7fe fc0a 	bl	80027bc <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003faa:	e008      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fac:	f7fe fc06 	bl	80027bc <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b64      	cmp	r3, #100	; 0x64
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e06d      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fbe:	4b3a      	ldr	r3, [pc, #232]	; (80040a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0f0      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fca:	4b36      	ldr	r3, [pc, #216]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fd2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d02e      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d027      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fe8:	4b2e      	ldr	r3, [pc, #184]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ff0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ff2:	4b2e      	ldr	r3, [pc, #184]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ff8:	4b2c      	ldr	r3, [pc, #176]	; (80040ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ffe:	4a29      	ldr	r2, [pc, #164]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d014      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800400e:	f7fe fbd5 	bl	80027bc <HAL_GetTick>
 8004012:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004014:	e00a      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004016:	f7fe fbd1 	bl	80027bc <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	f241 3288 	movw	r2, #5000	; 0x1388
 8004024:	4293      	cmp	r3, r2
 8004026:	d901      	bls.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e036      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800402c:	4b1d      	ldr	r3, [pc, #116]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0ee      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004038:	4b1a      	ldr	r3, [pc, #104]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	4917      	ldr	r1, [pc, #92]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004046:	4313      	orrs	r3, r2
 8004048:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800404a:	7dfb      	ldrb	r3, [r7, #23]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d105      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004050:	4b14      	ldr	r3, [pc, #80]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	4a13      	ldr	r2, [pc, #76]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004056:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800405a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d008      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004068:	4b0e      	ldr	r3, [pc, #56]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	490b      	ldr	r1, [pc, #44]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004076:	4313      	orrs	r3, r2
 8004078:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0310 	and.w	r3, r3, #16
 8004082:	2b00      	cmp	r3, #0
 8004084:	d008      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004086:	4b07      	ldr	r3, [pc, #28]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	4904      	ldr	r1, [pc, #16]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004094:	4313      	orrs	r3, r2
 8004096:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40021000 	.word	0x40021000
 80040a8:	40007000 	.word	0x40007000
 80040ac:	42420440 	.word	0x42420440

080040b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b088      	sub	sp, #32
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80040b8:	2300      	movs	r3, #0
 80040ba:	617b      	str	r3, [r7, #20]
 80040bc:	2300      	movs	r3, #0
 80040be:	61fb      	str	r3, [r7, #28]
 80040c0:	2300      	movs	r3, #0
 80040c2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80040c4:	2300      	movs	r3, #0
 80040c6:	60fb      	str	r3, [r7, #12]
 80040c8:	2300      	movs	r3, #0
 80040ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b10      	cmp	r3, #16
 80040d0:	d00a      	beq.n	80040e8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b10      	cmp	r3, #16
 80040d6:	f200 808a 	bhi.w	80041ee <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d045      	beq.n	800416c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d075      	beq.n	80041d2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80040e6:	e082      	b.n	80041ee <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80040e8:	4b46      	ldr	r3, [pc, #280]	; (8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80040ee:	4b45      	ldr	r3, [pc, #276]	; (8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d07b      	beq.n	80041f2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	0c9b      	lsrs	r3, r3, #18
 80040fe:	f003 030f 	and.w	r3, r3, #15
 8004102:	4a41      	ldr	r2, [pc, #260]	; (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004104:	5cd3      	ldrb	r3, [r2, r3]
 8004106:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d015      	beq.n	800413e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004112:	4b3c      	ldr	r3, [pc, #240]	; (8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	0c5b      	lsrs	r3, r3, #17
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	4a3b      	ldr	r2, [pc, #236]	; (800420c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800411e:	5cd3      	ldrb	r3, [r2, r3]
 8004120:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00d      	beq.n	8004148 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800412c:	4a38      	ldr	r2, [pc, #224]	; (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	fbb2 f2f3 	udiv	r2, r2, r3
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	fb02 f303 	mul.w	r3, r2, r3
 800413a:	61fb      	str	r3, [r7, #28]
 800413c:	e004      	b.n	8004148 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	4a34      	ldr	r2, [pc, #208]	; (8004214 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004142:	fb02 f303 	mul.w	r3, r2, r3
 8004146:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004148:	4b2e      	ldr	r3, [pc, #184]	; (8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004150:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004154:	d102      	bne.n	800415c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	61bb      	str	r3, [r7, #24]
      break;
 800415a:	e04a      	b.n	80041f2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	4a2d      	ldr	r2, [pc, #180]	; (8004218 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004162:	fba2 2303 	umull	r2, r3, r2, r3
 8004166:	085b      	lsrs	r3, r3, #1
 8004168:	61bb      	str	r3, [r7, #24]
      break;
 800416a:	e042      	b.n	80041f2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800416c:	4b25      	ldr	r3, [pc, #148]	; (8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800417c:	d108      	bne.n	8004190 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d003      	beq.n	8004190 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004188:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800418c:	61bb      	str	r3, [r7, #24]
 800418e:	e01f      	b.n	80041d0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004196:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800419a:	d109      	bne.n	80041b0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800419c:	4b19      	ldr	r3, [pc, #100]	; (8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d003      	beq.n	80041b0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80041a8:	f649 4340 	movw	r3, #40000	; 0x9c40
 80041ac:	61bb      	str	r3, [r7, #24]
 80041ae:	e00f      	b.n	80041d0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041ba:	d11c      	bne.n	80041f6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80041bc:	4b11      	ldr	r3, [pc, #68]	; (8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d016      	beq.n	80041f6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80041c8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80041cc:	61bb      	str	r3, [r7, #24]
      break;
 80041ce:	e012      	b.n	80041f6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80041d0:	e011      	b.n	80041f6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80041d2:	f7ff fe85 	bl	8003ee0 <HAL_RCC_GetPCLK2Freq>
 80041d6:	4602      	mov	r2, r0
 80041d8:	4b0a      	ldr	r3, [pc, #40]	; (8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	0b9b      	lsrs	r3, r3, #14
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	3301      	adds	r3, #1
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ea:	61bb      	str	r3, [r7, #24]
      break;
 80041ec:	e004      	b.n	80041f8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80041ee:	bf00      	nop
 80041f0:	e002      	b.n	80041f8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80041f2:	bf00      	nop
 80041f4:	e000      	b.n	80041f8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80041f6:	bf00      	nop
    }
  }
  return (frequency);
 80041f8:	69bb      	ldr	r3, [r7, #24]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3720      	adds	r7, #32
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	40021000 	.word	0x40021000
 8004208:	0800c9e0 	.word	0x0800c9e0
 800420c:	0800c9f0 	.word	0x0800c9f0
 8004210:	007a1200 	.word	0x007a1200
 8004214:	003d0900 	.word	0x003d0900
 8004218:	aaaaaaab 	.word	0xaaaaaaab

0800421c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e076      	b.n	800431c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	2b00      	cmp	r3, #0
 8004234:	d108      	bne.n	8004248 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800423e:	d009      	beq.n	8004254 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	61da      	str	r2, [r3, #28]
 8004246:	e005      	b.n	8004254 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d106      	bne.n	8004274 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7fe f86c 	bl	800234c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800428a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800429c:	431a      	orrs	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042a6:	431a      	orrs	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	431a      	orrs	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042c4:	431a      	orrs	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	69db      	ldr	r3, [r3, #28]
 80042ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042ce:	431a      	orrs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d8:	ea42 0103 	orr.w	r1, r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	0c1a      	lsrs	r2, r3, #16
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f002 0204 	and.w	r2, r2, #4
 80042fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	69da      	ldr	r2, [r3, #28]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800430a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3708      	adds	r7, #8
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b088      	sub	sp, #32
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	603b      	str	r3, [r7, #0]
 8004330:	4613      	mov	r3, r2
 8004332:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004334:	f7fe fa42 	bl	80027bc <HAL_GetTick>
 8004338:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800433a:	88fb      	ldrh	r3, [r7, #6]
 800433c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b01      	cmp	r3, #1
 8004348:	d001      	beq.n	800434e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800434a:	2302      	movs	r3, #2
 800434c:	e12a      	b.n	80045a4 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d002      	beq.n	800435a <HAL_SPI_Transmit+0x36>
 8004354:	88fb      	ldrh	r3, [r7, #6]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e122      	b.n	80045a4 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <HAL_SPI_Transmit+0x48>
 8004368:	2302      	movs	r3, #2
 800436a:	e11b      	b.n	80045a4 <HAL_SPI_Transmit+0x280>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2203      	movs	r2, #3
 8004378:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	88fa      	ldrh	r2, [r7, #6]
 800438c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	88fa      	ldrh	r2, [r7, #6]
 8004392:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ba:	d10f      	bne.n	80043dc <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043da:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e6:	2b40      	cmp	r3, #64	; 0x40
 80043e8:	d007      	beq.n	80043fa <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004402:	d152      	bne.n	80044aa <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d002      	beq.n	8004412 <HAL_SPI_Transmit+0xee>
 800440c:	8b7b      	ldrh	r3, [r7, #26]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d145      	bne.n	800449e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004416:	881a      	ldrh	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004422:	1c9a      	adds	r2, r3, #2
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800442c:	b29b      	uxth	r3, r3
 800442e:	3b01      	subs	r3, #1
 8004430:	b29a      	uxth	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004436:	e032      	b.n	800449e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b02      	cmp	r3, #2
 8004444:	d112      	bne.n	800446c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444a:	881a      	ldrh	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004456:	1c9a      	adds	r2, r3, #2
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b01      	subs	r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	86da      	strh	r2, [r3, #54]	; 0x36
 800446a:	e018      	b.n	800449e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800446c:	f7fe f9a6 	bl	80027bc <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	429a      	cmp	r2, r3
 800447a:	d803      	bhi.n	8004484 <HAL_SPI_Transmit+0x160>
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004482:	d102      	bne.n	800448a <HAL_SPI_Transmit+0x166>
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d109      	bne.n	800449e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e082      	b.n	80045a4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1c7      	bne.n	8004438 <HAL_SPI_Transmit+0x114>
 80044a8:	e053      	b.n	8004552 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <HAL_SPI_Transmit+0x194>
 80044b2:	8b7b      	ldrh	r3, [r7, #26]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d147      	bne.n	8004548 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	330c      	adds	r3, #12
 80044c2:	7812      	ldrb	r2, [r2, #0]
 80044c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	3b01      	subs	r3, #1
 80044d8:	b29a      	uxth	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80044de:	e033      	b.n	8004548 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d113      	bne.n	8004516 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	330c      	adds	r3, #12
 80044f8:	7812      	ldrb	r2, [r2, #0]
 80044fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004500:	1c5a      	adds	r2, r3, #1
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800450a:	b29b      	uxth	r3, r3
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	86da      	strh	r2, [r3, #54]	; 0x36
 8004514:	e018      	b.n	8004548 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004516:	f7fe f951 	bl	80027bc <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d803      	bhi.n	800452e <HAL_SPI_Transmit+0x20a>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800452c:	d102      	bne.n	8004534 <HAL_SPI_Transmit+0x210>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d109      	bne.n	8004548 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e02d      	b.n	80045a4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800454c:	b29b      	uxth	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1c6      	bne.n	80044e0 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004552:	69fa      	ldr	r2, [r7, #28]
 8004554:	6839      	ldr	r1, [r7, #0]
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 fa5a 	bl	8004a10 <SPI_EndRxTxTransaction>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d002      	beq.n	8004568 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2220      	movs	r2, #32
 8004566:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10a      	bne.n	8004586 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004570:	2300      	movs	r3, #0
 8004572:	617b      	str	r3, [r7, #20]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	617b      	str	r3, [r7, #20]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e000      	b.n	80045a4 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80045a2:	2300      	movs	r3, #0
  }
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3720      	adds	r7, #32
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b08a      	sub	sp, #40	; 0x28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
 80045b8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80045ba:	2301      	movs	r3, #1
 80045bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045be:	f7fe f8fd 	bl	80027bc <HAL_GetTick>
 80045c2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045ca:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80045d2:	887b      	ldrh	r3, [r7, #2]
 80045d4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80045d6:	7ffb      	ldrb	r3, [r7, #31]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d00c      	beq.n	80045f6 <HAL_SPI_TransmitReceive+0x4a>
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045e2:	d106      	bne.n	80045f2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d102      	bne.n	80045f2 <HAL_SPI_TransmitReceive+0x46>
 80045ec:	7ffb      	ldrb	r3, [r7, #31]
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d001      	beq.n	80045f6 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80045f2:	2302      	movs	r3, #2
 80045f4:	e17f      	b.n	80048f6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d005      	beq.n	8004608 <HAL_SPI_TransmitReceive+0x5c>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d002      	beq.n	8004608 <HAL_SPI_TransmitReceive+0x5c>
 8004602:	887b      	ldrh	r3, [r7, #2]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e174      	b.n	80048f6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004612:	2b01      	cmp	r3, #1
 8004614:	d101      	bne.n	800461a <HAL_SPI_TransmitReceive+0x6e>
 8004616:	2302      	movs	r3, #2
 8004618:	e16d      	b.n	80048f6 <HAL_SPI_TransmitReceive+0x34a>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b04      	cmp	r3, #4
 800462c:	d003      	beq.n	8004636 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2205      	movs	r2, #5
 8004632:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	887a      	ldrh	r2, [r7, #2]
 8004646:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	887a      	ldrh	r2, [r7, #2]
 800464c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	887a      	ldrh	r2, [r7, #2]
 8004658:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	887a      	ldrh	r2, [r7, #2]
 800465e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004676:	2b40      	cmp	r3, #64	; 0x40
 8004678:	d007      	beq.n	800468a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004688:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004692:	d17e      	bne.n	8004792 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d002      	beq.n	80046a2 <HAL_SPI_TransmitReceive+0xf6>
 800469c:	8afb      	ldrh	r3, [r7, #22]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d16c      	bne.n	800477c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a6:	881a      	ldrh	r2, [r3, #0]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b2:	1c9a      	adds	r2, r3, #2
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046bc:	b29b      	uxth	r3, r3
 80046be:	3b01      	subs	r3, #1
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046c6:	e059      	b.n	800477c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d11b      	bne.n	800470e <HAL_SPI_TransmitReceive+0x162>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046da:	b29b      	uxth	r3, r3
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d016      	beq.n	800470e <HAL_SPI_TransmitReceive+0x162>
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d113      	bne.n	800470e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ea:	881a      	ldrh	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f6:	1c9a      	adds	r2, r3, #2
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004700:	b29b      	uxth	r3, r3
 8004702:	3b01      	subs	r3, #1
 8004704:	b29a      	uxth	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800470a:	2300      	movs	r3, #0
 800470c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b01      	cmp	r3, #1
 800471a:	d119      	bne.n	8004750 <HAL_SPI_TransmitReceive+0x1a4>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004720:	b29b      	uxth	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d014      	beq.n	8004750 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68da      	ldr	r2, [r3, #12]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004730:	b292      	uxth	r2, r2
 8004732:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004738:	1c9a      	adds	r2, r3, #2
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004742:	b29b      	uxth	r3, r3
 8004744:	3b01      	subs	r3, #1
 8004746:	b29a      	uxth	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800474c:	2301      	movs	r3, #1
 800474e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004750:	f7fe f834 	bl	80027bc <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800475c:	429a      	cmp	r2, r3
 800475e:	d80d      	bhi.n	800477c <HAL_SPI_TransmitReceive+0x1d0>
 8004760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004766:	d009      	beq.n	800477c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e0bc      	b.n	80048f6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004780:	b29b      	uxth	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1a0      	bne.n	80046c8 <HAL_SPI_TransmitReceive+0x11c>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800478a:	b29b      	uxth	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	d19b      	bne.n	80046c8 <HAL_SPI_TransmitReceive+0x11c>
 8004790:	e082      	b.n	8004898 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d002      	beq.n	80047a0 <HAL_SPI_TransmitReceive+0x1f4>
 800479a:	8afb      	ldrh	r3, [r7, #22]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d171      	bne.n	8004884 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	330c      	adds	r3, #12
 80047aa:	7812      	ldrb	r2, [r2, #0]
 80047ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b2:	1c5a      	adds	r2, r3, #1
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047bc:	b29b      	uxth	r3, r3
 80047be:	3b01      	subs	r3, #1
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047c6:	e05d      	b.n	8004884 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d11c      	bne.n	8004810 <HAL_SPI_TransmitReceive+0x264>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047da:	b29b      	uxth	r3, r3
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d017      	beq.n	8004810 <HAL_SPI_TransmitReceive+0x264>
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d114      	bne.n	8004810 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	330c      	adds	r3, #12
 80047f0:	7812      	ldrb	r2, [r2, #0]
 80047f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004802:	b29b      	uxth	r3, r3
 8004804:	3b01      	subs	r3, #1
 8004806:	b29a      	uxth	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800480c:	2300      	movs	r3, #0
 800480e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b01      	cmp	r3, #1
 800481c:	d119      	bne.n	8004852 <HAL_SPI_TransmitReceive+0x2a6>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004822:	b29b      	uxth	r3, r3
 8004824:	2b00      	cmp	r3, #0
 8004826:	d014      	beq.n	8004852 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004832:	b2d2      	uxtb	r2, r2
 8004834:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483a:	1c5a      	adds	r2, r3, #1
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004844:	b29b      	uxth	r3, r3
 8004846:	3b01      	subs	r3, #1
 8004848:	b29a      	uxth	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800484e:	2301      	movs	r3, #1
 8004850:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004852:	f7fd ffb3 	bl	80027bc <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	6a3b      	ldr	r3, [r7, #32]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800485e:	429a      	cmp	r2, r3
 8004860:	d803      	bhi.n	800486a <HAL_SPI_TransmitReceive+0x2be>
 8004862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004868:	d102      	bne.n	8004870 <HAL_SPI_TransmitReceive+0x2c4>
 800486a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486c:	2b00      	cmp	r3, #0
 800486e:	d109      	bne.n	8004884 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e038      	b.n	80048f6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004888:	b29b      	uxth	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d19c      	bne.n	80047c8 <HAL_SPI_TransmitReceive+0x21c>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004892:	b29b      	uxth	r3, r3
 8004894:	2b00      	cmp	r3, #0
 8004896:	d197      	bne.n	80047c8 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004898:	6a3a      	ldr	r2, [r7, #32]
 800489a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 f8b7 	bl	8004a10 <SPI_EndRxTxTransaction>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d008      	beq.n	80048ba <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2220      	movs	r2, #32
 80048ac:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e01d      	b.n	80048f6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10a      	bne.n	80048d8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048c2:	2300      	movs	r3, #0
 80048c4:	613b      	str	r3, [r7, #16]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	613b      	str	r3, [r7, #16]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	613b      	str	r3, [r7, #16]
 80048d6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e000      	b.n	80048f6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80048f4:	2300      	movs	r3, #0
  }
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3728      	adds	r7, #40	; 0x28
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
	...

08004900 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b088      	sub	sp, #32
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	603b      	str	r3, [r7, #0]
 800490c:	4613      	mov	r3, r2
 800490e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004910:	f7fd ff54 	bl	80027bc <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004918:	1a9b      	subs	r3, r3, r2
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	4413      	add	r3, r2
 800491e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004920:	f7fd ff4c 	bl	80027bc <HAL_GetTick>
 8004924:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004926:	4b39      	ldr	r3, [pc, #228]	; (8004a0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	015b      	lsls	r3, r3, #5
 800492c:	0d1b      	lsrs	r3, r3, #20
 800492e:	69fa      	ldr	r2, [r7, #28]
 8004930:	fb02 f303 	mul.w	r3, r2, r3
 8004934:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004936:	e054      	b.n	80049e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493e:	d050      	beq.n	80049e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004940:	f7fd ff3c 	bl	80027bc <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	69fa      	ldr	r2, [r7, #28]
 800494c:	429a      	cmp	r2, r3
 800494e:	d902      	bls.n	8004956 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d13d      	bne.n	80049d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004964:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800496e:	d111      	bne.n	8004994 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004978:	d004      	beq.n	8004984 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004982:	d107      	bne.n	8004994 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004992:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800499c:	d10f      	bne.n	80049be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e017      	b.n	8004a02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	3b01      	subs	r3, #1
 80049e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	4013      	ands	r3, r2
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	bf0c      	ite	eq
 80049f2:	2301      	moveq	r3, #1
 80049f4:	2300      	movne	r3, #0
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	461a      	mov	r2, r3
 80049fa:	79fb      	ldrb	r3, [r7, #7]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d19b      	bne.n	8004938 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3720      	adds	r7, #32
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	20000004 	.word	0x20000004

08004a10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af02      	add	r7, sp, #8
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	9300      	str	r3, [sp, #0]
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	2201      	movs	r2, #1
 8004a24:	2102      	movs	r1, #2
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f7ff ff6a 	bl	8004900 <SPI_WaitFlagStateUntilTimeout>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d007      	beq.n	8004a42 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a36:	f043 0220 	orr.w	r2, r3, #32
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e013      	b.n	8004a6a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	2180      	movs	r1, #128	; 0x80
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f7ff ff57 	bl	8004900 <SPI_WaitFlagStateUntilTimeout>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d007      	beq.n	8004a68 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5c:	f043 0220 	orr.w	r2, r3, #32
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e000      	b.n	8004a6a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b082      	sub	sp, #8
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e042      	b.n	8004b0a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d106      	bne.n	8004a9e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f7fd fca1 	bl	80023e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2224      	movs	r2, #36	; 0x24
 8004aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68da      	ldr	r2, [r3, #12]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ab4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f972 	bl	8004da0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	691a      	ldr	r2, [r3, #16]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004aca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	695a      	ldr	r2, [r3, #20]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ada:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68da      	ldr	r2, [r3, #12]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004aea:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2220      	movs	r2, #32
 8004af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2220      	movs	r2, #32
 8004afe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b08a      	sub	sp, #40	; 0x28
 8004b16:	af02      	add	r7, sp, #8
 8004b18:	60f8      	str	r0, [r7, #12]
 8004b1a:	60b9      	str	r1, [r7, #8]
 8004b1c:	603b      	str	r3, [r7, #0]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b22:	2300      	movs	r3, #0
 8004b24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b20      	cmp	r3, #32
 8004b30:	d175      	bne.n	8004c1e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <HAL_UART_Transmit+0x2c>
 8004b38:	88fb      	ldrh	r3, [r7, #6]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e06e      	b.n	8004c20 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2221      	movs	r2, #33	; 0x21
 8004b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b50:	f7fd fe34 	bl	80027bc <HAL_GetTick>
 8004b54:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	88fa      	ldrh	r2, [r7, #6]
 8004b5a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	88fa      	ldrh	r2, [r7, #6]
 8004b60:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b6a:	d108      	bne.n	8004b7e <HAL_UART_Transmit+0x6c>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d104      	bne.n	8004b7e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b74:	2300      	movs	r3, #0
 8004b76:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	61bb      	str	r3, [r7, #24]
 8004b7c:	e003      	b.n	8004b86 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b82:	2300      	movs	r3, #0
 8004b84:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b86:	e02e      	b.n	8004be6 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	2180      	movs	r1, #128	; 0x80
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f000 f848 	bl	8004c28 <UART_WaitOnFlagUntilTimeout>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d005      	beq.n	8004baa <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e03a      	b.n	8004c20 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10b      	bne.n	8004bc8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	881b      	ldrh	r3, [r3, #0]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bbe:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	3302      	adds	r3, #2
 8004bc4:	61bb      	str	r3, [r7, #24]
 8004bc6:	e007      	b.n	8004bd8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	781a      	ldrb	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	3b01      	subs	r3, #1
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1cb      	bne.n	8004b88 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	2140      	movs	r1, #64	; 0x40
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f000 f814 	bl	8004c28 <UART_WaitOnFlagUntilTimeout>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d005      	beq.n	8004c12 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e006      	b.n	8004c20 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2220      	movs	r2, #32
 8004c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	e000      	b.n	8004c20 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004c1e:	2302      	movs	r3, #2
  }
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3720      	adds	r7, #32
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	603b      	str	r3, [r7, #0]
 8004c34:	4613      	mov	r3, r2
 8004c36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c38:	e03b      	b.n	8004cb2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c3a:	6a3b      	ldr	r3, [r7, #32]
 8004c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c40:	d037      	beq.n	8004cb2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c42:	f7fd fdbb 	bl	80027bc <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	6a3a      	ldr	r2, [r7, #32]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d302      	bcc.n	8004c58 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c52:	6a3b      	ldr	r3, [r7, #32]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e03a      	b.n	8004cd2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	f003 0304 	and.w	r3, r3, #4
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d023      	beq.n	8004cb2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	2b80      	cmp	r3, #128	; 0x80
 8004c6e:	d020      	beq.n	8004cb2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2b40      	cmp	r3, #64	; 0x40
 8004c74:	d01d      	beq.n	8004cb2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0308 	and.w	r3, r3, #8
 8004c80:	2b08      	cmp	r3, #8
 8004c82:	d116      	bne.n	8004cb2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004c84:	2300      	movs	r3, #0
 8004c86:	617b      	str	r3, [r7, #20]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	617b      	str	r3, [r7, #20]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f000 f81d 	bl	8004cda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2208      	movs	r2, #8
 8004ca4:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e00f      	b.n	8004cd2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	4013      	ands	r3, r2
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	bf0c      	ite	eq
 8004cc2:	2301      	moveq	r3, #1
 8004cc4:	2300      	movne	r3, #0
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	461a      	mov	r2, r3
 8004cca:	79fb      	ldrb	r3, [r7, #7]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d0b4      	beq.n	8004c3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3718      	adds	r7, #24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b095      	sub	sp, #84	; 0x54
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	330c      	adds	r3, #12
 8004ce8:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cec:	e853 3f00 	ldrex	r3, [r3]
 8004cf0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	330c      	adds	r3, #12
 8004d00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d02:	643a      	str	r2, [r7, #64]	; 0x40
 8004d04:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d0a:	e841 2300 	strex	r3, r2, [r1]
 8004d0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1e5      	bne.n	8004ce2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	3314      	adds	r3, #20
 8004d1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1e:	6a3b      	ldr	r3, [r7, #32]
 8004d20:	e853 3f00 	ldrex	r3, [r3]
 8004d24:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	f023 0301 	bic.w	r3, r3, #1
 8004d2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	3314      	adds	r3, #20
 8004d34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d3e:	e841 2300 	strex	r3, r2, [r1]
 8004d42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1e5      	bne.n	8004d16 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d119      	bne.n	8004d86 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	330c      	adds	r3, #12
 8004d58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	e853 3f00 	ldrex	r3, [r3]
 8004d60:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	f023 0310 	bic.w	r3, r3, #16
 8004d68:	647b      	str	r3, [r7, #68]	; 0x44
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	330c      	adds	r3, #12
 8004d70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d72:	61ba      	str	r2, [r7, #24]
 8004d74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d76:	6979      	ldr	r1, [r7, #20]
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	e841 2300 	strex	r3, r2, [r1]
 8004d7e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1e5      	bne.n	8004d52 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d94:	bf00      	nop
 8004d96:	3754      	adds	r7, #84	; 0x54
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bc80      	pop	{r7}
 8004d9c:	4770      	bx	lr
	...

08004da0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68da      	ldr	r2, [r3, #12]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	689a      	ldr	r2, [r3, #8]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004dda:	f023 030c 	bic.w	r3, r3, #12
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	6812      	ldr	r2, [r2, #0]
 8004de2:	68b9      	ldr	r1, [r7, #8]
 8004de4:	430b      	orrs	r3, r1
 8004de6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	699a      	ldr	r2, [r3, #24]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a2c      	ldr	r2, [pc, #176]	; (8004eb4 <UART_SetConfig+0x114>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d103      	bne.n	8004e10 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e08:	f7ff f86a 	bl	8003ee0 <HAL_RCC_GetPCLK2Freq>
 8004e0c:	60f8      	str	r0, [r7, #12]
 8004e0e:	e002      	b.n	8004e16 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e10:	f7ff f852 	bl	8003eb8 <HAL_RCC_GetPCLK1Freq>
 8004e14:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4413      	add	r3, r2
 8004e1e:	009a      	lsls	r2, r3, #2
 8004e20:	441a      	add	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2c:	4a22      	ldr	r2, [pc, #136]	; (8004eb8 <UART_SetConfig+0x118>)
 8004e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e32:	095b      	lsrs	r3, r3, #5
 8004e34:	0119      	lsls	r1, r3, #4
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4413      	add	r3, r2
 8004e3e:	009a      	lsls	r2, r3, #2
 8004e40:	441a      	add	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e4c:	4b1a      	ldr	r3, [pc, #104]	; (8004eb8 <UART_SetConfig+0x118>)
 8004e4e:	fba3 0302 	umull	r0, r3, r3, r2
 8004e52:	095b      	lsrs	r3, r3, #5
 8004e54:	2064      	movs	r0, #100	; 0x64
 8004e56:	fb00 f303 	mul.w	r3, r0, r3
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	011b      	lsls	r3, r3, #4
 8004e5e:	3332      	adds	r3, #50	; 0x32
 8004e60:	4a15      	ldr	r2, [pc, #84]	; (8004eb8 <UART_SetConfig+0x118>)
 8004e62:	fba2 2303 	umull	r2, r3, r2, r3
 8004e66:	095b      	lsrs	r3, r3, #5
 8004e68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e6c:	4419      	add	r1, r3
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	4613      	mov	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	009a      	lsls	r2, r3, #2
 8004e78:	441a      	add	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e84:	4b0c      	ldr	r3, [pc, #48]	; (8004eb8 <UART_SetConfig+0x118>)
 8004e86:	fba3 0302 	umull	r0, r3, r3, r2
 8004e8a:	095b      	lsrs	r3, r3, #5
 8004e8c:	2064      	movs	r0, #100	; 0x64
 8004e8e:	fb00 f303 	mul.w	r3, r0, r3
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	3332      	adds	r3, #50	; 0x32
 8004e98:	4a07      	ldr	r2, [pc, #28]	; (8004eb8 <UART_SetConfig+0x118>)
 8004e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9e:	095b      	lsrs	r3, r3, #5
 8004ea0:	f003 020f 	and.w	r2, r3, #15
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	440a      	add	r2, r1
 8004eaa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004eac:	bf00      	nop
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	40013800 	.word	0x40013800
 8004eb8:	51eb851f 	.word	0x51eb851f

08004ebc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004ec0:	4904      	ldr	r1, [pc, #16]	; (8004ed4 <MX_FATFS_Init+0x18>)
 8004ec2:	4805      	ldr	r0, [pc, #20]	; (8004ed8 <MX_FATFS_Init+0x1c>)
 8004ec4:	f003 fe9a 	bl	8008bfc <FATFS_LinkDriver>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	461a      	mov	r2, r3
 8004ecc:	4b03      	ldr	r3, [pc, #12]	; (8004edc <MX_FATFS_Init+0x20>)
 8004ece:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004ed0:	bf00      	nop
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	200023f4 	.word	0x200023f4
 8004ed8:	20000010 	.word	0x20000010
 8004edc:	200023f0 	.word	0x200023f0

08004ee0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004ee4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bc80      	pop	{r7}
 8004eec:	4770      	bx	lr

08004eee <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b082      	sub	sp, #8
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
    return SD_disk_initialize(pdrv);
 8004ef8:	79fb      	ldrb	r3, [r7, #7]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7fc f98e 	bl	800121c <SD_disk_initialize>
 8004f00:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b082      	sub	sp, #8
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	4603      	mov	r3, r0
 8004f12:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
    return SD_disk_status(pdrv);
 8004f14:	79fb      	ldrb	r3, [r7, #7]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7fc fa6c 	bl	80013f4 <SD_disk_status>
 8004f1c:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b084      	sub	sp, #16
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
 8004f30:	603b      	str	r3, [r7, #0]
 8004f32:	4603      	mov	r3, r0
 8004f34:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
    return SD_disk_read(pdrv, buff, sector, count);
 8004f36:	7bf8      	ldrb	r0, [r7, #15]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	68b9      	ldr	r1, [r7, #8]
 8004f3e:	f7fc fa6d 	bl	800141c <SD_disk_read>
 8004f42:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60b9      	str	r1, [r7, #8]
 8004f54:	607a      	str	r2, [r7, #4]
 8004f56:	603b      	str	r3, [r7, #0]
 8004f58:	4603      	mov	r3, r0
 8004f5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
    return SD_disk_write(pdrv, buff, sector, count);
 8004f5c:	7bf8      	ldrb	r0, [r7, #15]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	68b9      	ldr	r1, [r7, #8]
 8004f64:	f7fc fac4 	bl	80014f0 <SD_disk_write>
 8004f68:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b082      	sub	sp, #8
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	4603      	mov	r3, r0
 8004f7a:	603a      	str	r2, [r7, #0]
 8004f7c:	71fb      	strb	r3, [r7, #7]
 8004f7e:	460b      	mov	r3, r1
 8004f80:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
    return SD_disk_ioctl(pdrv, cmd, buff);
 8004f82:	79b9      	ldrb	r1, [r7, #6]
 8004f84:	79fb      	ldrb	r3, [r7, #7]
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7fc fb35 	bl	80015f8 <SD_disk_ioctl>
 8004f8e:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3708      	adds	r7, #8
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004fa2:	79fb      	ldrb	r3, [r7, #7]
 8004fa4:	4a08      	ldr	r2, [pc, #32]	; (8004fc8 <disk_status+0x30>)
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4413      	add	r3, r2
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	79fa      	ldrb	r2, [r7, #7]
 8004fb0:	4905      	ldr	r1, [pc, #20]	; (8004fc8 <disk_status+0x30>)
 8004fb2:	440a      	add	r2, r1
 8004fb4:	7a12      	ldrb	r2, [r2, #8]
 8004fb6:	4610      	mov	r0, r2
 8004fb8:	4798      	blx	r3
 8004fba:	4603      	mov	r3, r0
 8004fbc:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	20002618 	.word	0x20002618

08004fcc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8004fda:	79fb      	ldrb	r3, [r7, #7]
 8004fdc:	4a0d      	ldr	r2, [pc, #52]	; (8005014 <disk_initialize+0x48>)
 8004fde:	5cd3      	ldrb	r3, [r2, r3]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d111      	bne.n	8005008 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8004fe4:	79fb      	ldrb	r3, [r7, #7]
 8004fe6:	4a0b      	ldr	r2, [pc, #44]	; (8005014 <disk_initialize+0x48>)
 8004fe8:	2101      	movs	r1, #1
 8004fea:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004fec:	79fb      	ldrb	r3, [r7, #7]
 8004fee:	4a09      	ldr	r2, [pc, #36]	; (8005014 <disk_initialize+0x48>)
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	79fa      	ldrb	r2, [r7, #7]
 8004ffa:	4906      	ldr	r1, [pc, #24]	; (8005014 <disk_initialize+0x48>)
 8004ffc:	440a      	add	r2, r1
 8004ffe:	7a12      	ldrb	r2, [r2, #8]
 8005000:	4610      	mov	r0, r2
 8005002:	4798      	blx	r3
 8005004:	4603      	mov	r3, r0
 8005006:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005008:	7bfb      	ldrb	r3, [r7, #15]
}
 800500a:	4618      	mov	r0, r3
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	20002618 	.word	0x20002618

08005018 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005018:	b590      	push	{r4, r7, lr}
 800501a:	b087      	sub	sp, #28
 800501c:	af00      	add	r7, sp, #0
 800501e:	60b9      	str	r1, [r7, #8]
 8005020:	607a      	str	r2, [r7, #4]
 8005022:	603b      	str	r3, [r7, #0]
 8005024:	4603      	mov	r3, r0
 8005026:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005028:	7bfb      	ldrb	r3, [r7, #15]
 800502a:	4a0a      	ldr	r2, [pc, #40]	; (8005054 <disk_read+0x3c>)
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	4413      	add	r3, r2
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	689c      	ldr	r4, [r3, #8]
 8005034:	7bfb      	ldrb	r3, [r7, #15]
 8005036:	4a07      	ldr	r2, [pc, #28]	; (8005054 <disk_read+0x3c>)
 8005038:	4413      	add	r3, r2
 800503a:	7a18      	ldrb	r0, [r3, #8]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	68b9      	ldr	r1, [r7, #8]
 8005042:	47a0      	blx	r4
 8005044:	4603      	mov	r3, r0
 8005046:	75fb      	strb	r3, [r7, #23]
  return res;
 8005048:	7dfb      	ldrb	r3, [r7, #23]
}
 800504a:	4618      	mov	r0, r3
 800504c:	371c      	adds	r7, #28
 800504e:	46bd      	mov	sp, r7
 8005050:	bd90      	pop	{r4, r7, pc}
 8005052:	bf00      	nop
 8005054:	20002618 	.word	0x20002618

08005058 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005058:	b590      	push	{r4, r7, lr}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	60b9      	str	r1, [r7, #8]
 8005060:	607a      	str	r2, [r7, #4]
 8005062:	603b      	str	r3, [r7, #0]
 8005064:	4603      	mov	r3, r0
 8005066:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005068:	7bfb      	ldrb	r3, [r7, #15]
 800506a:	4a0a      	ldr	r2, [pc, #40]	; (8005094 <disk_write+0x3c>)
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	68dc      	ldr	r4, [r3, #12]
 8005074:	7bfb      	ldrb	r3, [r7, #15]
 8005076:	4a07      	ldr	r2, [pc, #28]	; (8005094 <disk_write+0x3c>)
 8005078:	4413      	add	r3, r2
 800507a:	7a18      	ldrb	r0, [r3, #8]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	68b9      	ldr	r1, [r7, #8]
 8005082:	47a0      	blx	r4
 8005084:	4603      	mov	r3, r0
 8005086:	75fb      	strb	r3, [r7, #23]
  return res;
 8005088:	7dfb      	ldrb	r3, [r7, #23]
}
 800508a:	4618      	mov	r0, r3
 800508c:	371c      	adds	r7, #28
 800508e:	46bd      	mov	sp, r7
 8005090:	bd90      	pop	{r4, r7, pc}
 8005092:	bf00      	nop
 8005094:	20002618 	.word	0x20002618

08005098 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	4603      	mov	r3, r0
 80050a0:	603a      	str	r2, [r7, #0]
 80050a2:	71fb      	strb	r3, [r7, #7]
 80050a4:	460b      	mov	r3, r1
 80050a6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80050a8:	79fb      	ldrb	r3, [r7, #7]
 80050aa:	4a09      	ldr	r2, [pc, #36]	; (80050d0 <disk_ioctl+0x38>)
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	4413      	add	r3, r2
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	79fa      	ldrb	r2, [r7, #7]
 80050b6:	4906      	ldr	r1, [pc, #24]	; (80050d0 <disk_ioctl+0x38>)
 80050b8:	440a      	add	r2, r1
 80050ba:	7a10      	ldrb	r0, [r2, #8]
 80050bc:	79b9      	ldrb	r1, [r7, #6]
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	4798      	blx	r3
 80050c2:	4603      	mov	r3, r0
 80050c4:	73fb      	strb	r3, [r7, #15]
  return res;
 80050c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	20002618 	.word	0x20002618

080050d4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80050d4:	b480      	push	{r7}
 80050d6:	b087      	sub	sp, #28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80050e8:	e007      	b.n	80050fa <mem_cpy+0x26>
		*d++ = *s++;
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	1c53      	adds	r3, r2, #1
 80050ee:	613b      	str	r3, [r7, #16]
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	1c59      	adds	r1, r3, #1
 80050f4:	6179      	str	r1, [r7, #20]
 80050f6:	7812      	ldrb	r2, [r2, #0]
 80050f8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	1e5a      	subs	r2, r3, #1
 80050fe:	607a      	str	r2, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1f2      	bne.n	80050ea <mem_cpy+0x16>
}
 8005104:	bf00      	nop
 8005106:	bf00      	nop
 8005108:	371c      	adds	r7, #28
 800510a:	46bd      	mov	sp, r7
 800510c:	bc80      	pop	{r7}
 800510e:	4770      	bx	lr

08005110 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005110:	b480      	push	{r7}
 8005112:	b087      	sub	sp, #28
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8005120:	e005      	b.n	800512e <mem_set+0x1e>
		*d++ = (BYTE)val;
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	1c5a      	adds	r2, r3, #1
 8005126:	617a      	str	r2, [r7, #20]
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	b2d2      	uxtb	r2, r2
 800512c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	1e5a      	subs	r2, r3, #1
 8005132:	607a      	str	r2, [r7, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1f4      	bne.n	8005122 <mem_set+0x12>
}
 8005138:	bf00      	nop
 800513a:	bf00      	nop
 800513c:	371c      	adds	r7, #28
 800513e:	46bd      	mov	sp, r7
 8005140:	bc80      	pop	{r7}
 8005142:	4770      	bx	lr

08005144 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8005144:	b480      	push	{r7}
 8005146:	b089      	sub	sp, #36	; 0x24
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	61fb      	str	r3, [r7, #28]
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005158:	2300      	movs	r3, #0
 800515a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800515c:	bf00      	nop
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	1e5a      	subs	r2, r3, #1
 8005162:	607a      	str	r2, [r7, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00d      	beq.n	8005184 <mem_cmp+0x40>
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	1c5a      	adds	r2, r3, #1
 800516c:	61fa      	str	r2, [r7, #28]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	4619      	mov	r1, r3
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	61ba      	str	r2, [r7, #24]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	1acb      	subs	r3, r1, r3
 800517c:	617b      	str	r3, [r7, #20]
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0ec      	beq.n	800515e <mem_cmp+0x1a>
	return r;
 8005184:	697b      	ldr	r3, [r7, #20]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3724      	adds	r7, #36	; 0x24
 800518a:	46bd      	mov	sp, r7
 800518c:	bc80      	pop	{r7}
 800518e:	4770      	bx	lr

08005190 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800519a:	e002      	b.n	80051a2 <chk_chr+0x12>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	3301      	adds	r3, #1
 80051a0:	607b      	str	r3, [r7, #4]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d005      	beq.n	80051b6 <chk_chr+0x26>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	461a      	mov	r2, r3
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d1f2      	bne.n	800519c <chk_chr+0xc>
	return *str;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	781b      	ldrb	r3, [r3, #0]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	bc80      	pop	{r7}
 80051c2:	4770      	bx	lr

080051c4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80051ce:	2300      	movs	r3, #0
 80051d0:	60bb      	str	r3, [r7, #8]
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	60fb      	str	r3, [r7, #12]
 80051d6:	e03b      	b.n	8005250 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 80051d8:	4931      	ldr	r1, [pc, #196]	; (80052a0 <chk_lock+0xdc>)
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	4613      	mov	r3, r2
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	4413      	add	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	440b      	add	r3, r1
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d02c      	beq.n	8005246 <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80051ec:	492c      	ldr	r1, [pc, #176]	; (80052a0 <chk_lock+0xdc>)
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	4613      	mov	r3, r2
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	4413      	add	r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	440b      	add	r3, r1
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	429a      	cmp	r2, r3
 8005206:	d120      	bne.n	800524a <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8005208:	4925      	ldr	r1, [pc, #148]	; (80052a0 <chk_lock+0xdc>)
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	4613      	mov	r3, r2
 800520e:	005b      	lsls	r3, r3, #1
 8005210:	4413      	add	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	440b      	add	r3, r1
 8005216:	3304      	adds	r3, #4
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005220:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005222:	429a      	cmp	r2, r3
 8005224:	d111      	bne.n	800524a <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8005226:	491e      	ldr	r1, [pc, #120]	; (80052a0 <chk_lock+0xdc>)
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	4613      	mov	r3, r2
 800522c:	005b      	lsls	r3, r3, #1
 800522e:	4413      	add	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	440b      	add	r3, r1
 8005234:	3308      	adds	r3, #8
 8005236:	881a      	ldrh	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800523e:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8005240:	429a      	cmp	r2, r3
 8005242:	d102      	bne.n	800524a <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8005244:	e007      	b.n	8005256 <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 8005246:	2301      	movs	r3, #1
 8005248:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	3301      	adds	r3, #1
 800524e:	60fb      	str	r3, [r7, #12]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d9c0      	bls.n	80051d8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2b02      	cmp	r3, #2
 800525a:	d109      	bne.n	8005270 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d102      	bne.n	8005268 <chk_lock+0xa4>
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b02      	cmp	r3, #2
 8005266:	d101      	bne.n	800526c <chk_lock+0xa8>
 8005268:	2300      	movs	r3, #0
 800526a:	e013      	b.n	8005294 <chk_lock+0xd0>
 800526c:	2312      	movs	r3, #18
 800526e:	e011      	b.n	8005294 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10b      	bne.n	800528e <chk_lock+0xca>
 8005276:	490a      	ldr	r1, [pc, #40]	; (80052a0 <chk_lock+0xdc>)
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	4613      	mov	r3, r2
 800527c:	005b      	lsls	r3, r3, #1
 800527e:	4413      	add	r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	440b      	add	r3, r1
 8005284:	330a      	adds	r3, #10
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800528c:	d101      	bne.n	8005292 <chk_lock+0xce>
 800528e:	2310      	movs	r3, #16
 8005290:	e000      	b.n	8005294 <chk_lock+0xd0>
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	bc80      	pop	{r7}
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	20002400 	.word	0x20002400

080052a4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80052aa:	2300      	movs	r3, #0
 80052ac:	607b      	str	r3, [r7, #4]
 80052ae:	e002      	b.n	80052b6 <enq_lock+0x12>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	3301      	adds	r3, #1
 80052b4:	607b      	str	r3, [r7, #4]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d809      	bhi.n	80052d0 <enq_lock+0x2c>
 80052bc:	490a      	ldr	r1, [pc, #40]	; (80052e8 <enq_lock+0x44>)
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	4613      	mov	r3, r2
 80052c2:	005b      	lsls	r3, r3, #1
 80052c4:	4413      	add	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	440b      	add	r3, r1
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1ef      	bne.n	80052b0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	bf14      	ite	ne
 80052d6:	2301      	movne	r3, #1
 80052d8:	2300      	moveq	r3, #0
 80052da:	b2db      	uxtb	r3, r3
}
 80052dc:	4618      	mov	r0, r3
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bc80      	pop	{r7}
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	20002400 	.word	0x20002400

080052ec <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	e02e      	b.n	800535a <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 80052fc:	4958      	ldr	r1, [pc, #352]	; (8005460 <inc_lock+0x174>)
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	4613      	mov	r3, r2
 8005302:	005b      	lsls	r3, r3, #1
 8005304:	4413      	add	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	440b      	add	r3, r1
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	429a      	cmp	r2, r3
 8005316:	d11d      	bne.n	8005354 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8005318:	4951      	ldr	r1, [pc, #324]	; (8005460 <inc_lock+0x174>)
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	4613      	mov	r3, r2
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	4413      	add	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	440b      	add	r3, r1
 8005326:	3304      	adds	r3, #4
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005330:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8005332:	429a      	cmp	r2, r3
 8005334:	d10e      	bne.n	8005354 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8005336:	494a      	ldr	r1, [pc, #296]	; (8005460 <inc_lock+0x174>)
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	4613      	mov	r3, r2
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	4413      	add	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	440b      	add	r3, r1
 8005344:	3308      	adds	r3, #8
 8005346:	881a      	ldrh	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800534e:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8005350:	429a      	cmp	r2, r3
 8005352:	d006      	beq.n	8005362 <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	3301      	adds	r3, #1
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d9cd      	bls.n	80052fc <inc_lock+0x10>
 8005360:	e000      	b.n	8005364 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8005362:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2b02      	cmp	r3, #2
 8005368:	d148      	bne.n	80053fc <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800536a:	2300      	movs	r3, #0
 800536c:	60fb      	str	r3, [r7, #12]
 800536e:	e002      	b.n	8005376 <inc_lock+0x8a>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	3301      	adds	r3, #1
 8005374:	60fb      	str	r3, [r7, #12]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d809      	bhi.n	8005390 <inc_lock+0xa4>
 800537c:	4938      	ldr	r1, [pc, #224]	; (8005460 <inc_lock+0x174>)
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	4613      	mov	r3, r2
 8005382:	005b      	lsls	r3, r3, #1
 8005384:	4413      	add	r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	440b      	add	r3, r1
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1ef      	bne.n	8005370 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2b02      	cmp	r3, #2
 8005394:	d101      	bne.n	800539a <inc_lock+0xae>
 8005396:	2300      	movs	r3, #0
 8005398:	e05d      	b.n	8005456 <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053a0:	6819      	ldr	r1, [r3, #0]
 80053a2:	482f      	ldr	r0, [pc, #188]	; (8005460 <inc_lock+0x174>)
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	4613      	mov	r3, r2
 80053a8:	005b      	lsls	r3, r3, #1
 80053aa:	4413      	add	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4403      	add	r3, r0
 80053b0:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053b8:	6899      	ldr	r1, [r3, #8]
 80053ba:	4829      	ldr	r0, [pc, #164]	; (8005460 <inc_lock+0x174>)
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	4613      	mov	r3, r2
 80053c0:	005b      	lsls	r3, r3, #1
 80053c2:	4413      	add	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4403      	add	r3, r0
 80053c8:	3304      	adds	r3, #4
 80053ca:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053d2:	88d8      	ldrh	r0, [r3, #6]
 80053d4:	4922      	ldr	r1, [pc, #136]	; (8005460 <inc_lock+0x174>)
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	4613      	mov	r3, r2
 80053da:	005b      	lsls	r3, r3, #1
 80053dc:	4413      	add	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	440b      	add	r3, r1
 80053e2:	3308      	adds	r3, #8
 80053e4:	4602      	mov	r2, r0
 80053e6:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80053e8:	491d      	ldr	r1, [pc, #116]	; (8005460 <inc_lock+0x174>)
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	4613      	mov	r3, r2
 80053ee:	005b      	lsls	r3, r3, #1
 80053f0:	4413      	add	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	440b      	add	r3, r1
 80053f6:	330a      	adds	r3, #10
 80053f8:	2200      	movs	r2, #0
 80053fa:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00c      	beq.n	800541c <inc_lock+0x130>
 8005402:	4917      	ldr	r1, [pc, #92]	; (8005460 <inc_lock+0x174>)
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	4613      	mov	r3, r2
 8005408:	005b      	lsls	r3, r3, #1
 800540a:	4413      	add	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	440b      	add	r3, r1
 8005410:	330a      	adds	r3, #10
 8005412:	881b      	ldrh	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <inc_lock+0x130>
 8005418:	2300      	movs	r3, #0
 800541a:	e01c      	b.n	8005456 <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10b      	bne.n	800543a <inc_lock+0x14e>
 8005422:	490f      	ldr	r1, [pc, #60]	; (8005460 <inc_lock+0x174>)
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	4613      	mov	r3, r2
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	4413      	add	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	440b      	add	r3, r1
 8005430:	330a      	adds	r3, #10
 8005432:	881b      	ldrh	r3, [r3, #0]
 8005434:	3301      	adds	r3, #1
 8005436:	b299      	uxth	r1, r3
 8005438:	e001      	b.n	800543e <inc_lock+0x152>
 800543a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800543e:	4808      	ldr	r0, [pc, #32]	; (8005460 <inc_lock+0x174>)
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	4613      	mov	r3, r2
 8005444:	005b      	lsls	r3, r3, #1
 8005446:	4413      	add	r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4403      	add	r3, r0
 800544c:	330a      	adds	r3, #10
 800544e:	460a      	mov	r2, r1
 8005450:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	3301      	adds	r3, #1
}
 8005456:	4618      	mov	r0, r3
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	bc80      	pop	{r7}
 800545e:	4770      	bx	lr
 8005460:	20002400 	.word	0x20002400

08005464 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	3b01      	subs	r3, #1
 8005470:	607b      	str	r3, [r7, #4]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d82e      	bhi.n	80054d6 <dec_lock+0x72>
		n = Files[i].ctr;
 8005478:	491b      	ldr	r1, [pc, #108]	; (80054e8 <dec_lock+0x84>)
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	4613      	mov	r3, r2
 800547e:	005b      	lsls	r3, r3, #1
 8005480:	4413      	add	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	440b      	add	r3, r1
 8005486:	330a      	adds	r3, #10
 8005488:	881b      	ldrh	r3, [r3, #0]
 800548a:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800548c:	89fb      	ldrh	r3, [r7, #14]
 800548e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005492:	d101      	bne.n	8005498 <dec_lock+0x34>
 8005494:	2300      	movs	r3, #0
 8005496:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8005498:	89fb      	ldrh	r3, [r7, #14]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d002      	beq.n	80054a4 <dec_lock+0x40>
 800549e:	89fb      	ldrh	r3, [r7, #14]
 80054a0:	3b01      	subs	r3, #1
 80054a2:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80054a4:	4910      	ldr	r1, [pc, #64]	; (80054e8 <dec_lock+0x84>)
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	4613      	mov	r3, r2
 80054aa:	005b      	lsls	r3, r3, #1
 80054ac:	4413      	add	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	440b      	add	r3, r1
 80054b2:	330a      	adds	r3, #10
 80054b4:	89fa      	ldrh	r2, [r7, #14]
 80054b6:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80054b8:	89fb      	ldrh	r3, [r7, #14]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d108      	bne.n	80054d0 <dec_lock+0x6c>
 80054be:	490a      	ldr	r1, [pc, #40]	; (80054e8 <dec_lock+0x84>)
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	4613      	mov	r3, r2
 80054c4:	005b      	lsls	r3, r3, #1
 80054c6:	4413      	add	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	440b      	add	r3, r1
 80054cc:	2200      	movs	r2, #0
 80054ce:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80054d0:	2300      	movs	r3, #0
 80054d2:	737b      	strb	r3, [r7, #13]
 80054d4:	e001      	b.n	80054da <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80054d6:	2302      	movs	r3, #2
 80054d8:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80054da:	7b7b      	ldrb	r3, [r7, #13]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bc80      	pop	{r7}
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	20002400 	.word	0x20002400

080054ec <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80054f4:	2300      	movs	r3, #0
 80054f6:	60fb      	str	r3, [r7, #12]
 80054f8:	e016      	b.n	8005528 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80054fa:	4910      	ldr	r1, [pc, #64]	; (800553c <clear_lock+0x50>)
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	4613      	mov	r3, r2
 8005500:	005b      	lsls	r3, r3, #1
 8005502:	4413      	add	r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	440b      	add	r3, r1
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	429a      	cmp	r2, r3
 800550e:	d108      	bne.n	8005522 <clear_lock+0x36>
 8005510:	490a      	ldr	r1, [pc, #40]	; (800553c <clear_lock+0x50>)
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	4613      	mov	r3, r2
 8005516:	005b      	lsls	r3, r3, #1
 8005518:	4413      	add	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	440b      	add	r3, r1
 800551e:	2200      	movs	r2, #0
 8005520:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	3301      	adds	r3, #1
 8005526:	60fb      	str	r3, [r7, #12]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d9e5      	bls.n	80054fa <clear_lock+0xe>
	}
}
 800552e:	bf00      	nop
 8005530:	bf00      	nop
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	bc80      	pop	{r7}
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	20002400 	.word	0x20002400

08005540 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005548:	2300      	movs	r3, #0
 800554a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005552:	791b      	ldrb	r3, [r3, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d040      	beq.n	80055da <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800555e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005560:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005568:	7858      	ldrb	r0, [r3, #1]
 800556a:	6879      	ldr	r1, [r7, #4]
 800556c:	2301      	movs	r3, #1
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	f7ff fd72 	bl	8005058 <disk_write>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <sync_window+0x40>
			res = FR_DISK_ERR;
 800557a:	2301      	movs	r3, #1
 800557c:	73fb      	strb	r3, [r7, #15]
 800557e:	e02c      	b.n	80055da <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005586:	2200      	movs	r2, #0
 8005588:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	1ad2      	subs	r2, r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d21b      	bcs.n	80055da <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055a8:	78db      	ldrb	r3, [r3, #3]
 80055aa:	613b      	str	r3, [r7, #16]
 80055ac:	e012      	b.n	80055d4 <sync_window+0x94>
					wsect += fs->fsize;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	4413      	add	r3, r2
 80055ba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055c2:	7858      	ldrb	r0, [r3, #1]
 80055c4:	6879      	ldr	r1, [r7, #4]
 80055c6:	2301      	movs	r3, #1
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	f7ff fd45 	bl	8005058 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	3b01      	subs	r3, #1
 80055d2:	613b      	str	r3, [r7, #16]
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d8e9      	bhi.n	80055ae <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 80055da:	7bfb      	ldrb	r3, [r7, #15]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3718      	adds	r7, #24
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fa:	683a      	ldr	r2, [r7, #0]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d01e      	beq.n	800563e <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f7ff ff9d 	bl	8005540 <sync_window>
 8005606:	4603      	mov	r3, r0
 8005608:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800560a:	7bfb      	ldrb	r3, [r7, #15]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d116      	bne.n	800563e <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005616:	7858      	ldrb	r0, [r3, #1]
 8005618:	6879      	ldr	r1, [r7, #4]
 800561a:	2301      	movs	r3, #1
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	f7ff fcfb 	bl	8005018 <disk_read>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d004      	beq.n	8005632 <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005628:	f04f 33ff 	mov.w	r3, #4294967295
 800562c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800562e:	2301      	movs	r3, #1
 8005630:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005638:	461a      	mov	r2, r3
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 800563e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005640:	4618      	mov	r0, r3
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f7ff ff75 	bl	8005540 <sync_window>
 8005656:	4603      	mov	r3, r0
 8005658:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800565a:	7bfb      	ldrb	r3, [r7, #15]
 800565c:	2b00      	cmp	r3, #0
 800565e:	f040 80ad 	bne.w	80057bc <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	2b03      	cmp	r3, #3
 800566c:	f040 8098 	bne.w	80057a0 <sync_fs+0x158>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005676:	795b      	ldrb	r3, [r3, #5]
 8005678:	2b01      	cmp	r3, #1
 800567a:	f040 8091 	bne.w	80057a0 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005686:	895b      	ldrh	r3, [r3, #10]
 8005688:	461a      	mov	r2, r3
 800568a:	2100      	movs	r1, #0
 800568c:	f7ff fd40 	bl	8005110 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2255      	movs	r2, #85	; 0x55
 8005694:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	22aa      	movs	r2, #170	; 0xaa
 800569c:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2252      	movs	r2, #82	; 0x52
 80056a4:	701a      	strb	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2252      	movs	r2, #82	; 0x52
 80056aa:	705a      	strb	r2, [r3, #1]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2261      	movs	r2, #97	; 0x61
 80056b0:	709a      	strb	r2, [r3, #2]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2241      	movs	r2, #65	; 0x41
 80056b6:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2272      	movs	r2, #114	; 0x72
 80056bc:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2272      	movs	r2, #114	; 0x72
 80056c4:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2241      	movs	r2, #65	; 0x41
 80056cc:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2261      	movs	r2, #97	; 0x61
 80056d4:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	b2da      	uxtb	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	0a1b      	lsrs	r3, r3, #8
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	0c1b      	lsrs	r3, r3, #16
 8005708:	b2da      	uxtb	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	0e1b      	lsrs	r3, r3, #24
 800571a:	b2da      	uxtb	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	b2da      	uxtb	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	b29b      	uxth	r3, r3
 800573c:	0a1b      	lsrs	r3, r3, #8
 800573e:	b29b      	uxth	r3, r3
 8005740:	b2da      	uxtb	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	0c1b      	lsrs	r3, r3, #16
 8005752:	b2da      	uxtb	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	0e1b      	lsrs	r3, r3, #24
 8005764:	b2da      	uxtb	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005772:	69db      	ldr	r3, [r3, #28]
 8005774:	3301      	adds	r3, #1
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800577c:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005784:	7858      	ldrb	r0, [r3, #1]
 8005786:	6879      	ldr	r1, [r7, #4]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800578e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005790:	2301      	movs	r3, #1
 8005792:	f7ff fc61 	bl	8005058 <disk_write>
			fs->fsi_flag = 0;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800579c:	2200      	movs	r2, #0
 800579e:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057a6:	785b      	ldrb	r3, [r3, #1]
 80057a8:	2200      	movs	r2, #0
 80057aa:	2100      	movs	r1, #0
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7ff fc73 	bl	8005098 <disk_ioctl>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <sync_fs+0x174>
			res = FR_DISK_ERR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b083      	sub	sp, #12
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
 80057ce:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	3b02      	subs	r3, #2
 80057d4:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	3b02      	subs	r3, #2
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d301      	bcc.n	80057ea <clust2sect+0x24>
 80057e6:	2300      	movs	r3, #0
 80057e8:	e00c      	b.n	8005804 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057f0:	789b      	ldrb	r3, [r3, #2]
 80057f2:	461a      	mov	r2, r3
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	fb03 f202 	mul.w	r2, r3, r2
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005802:	4413      	add	r3, r2
}
 8005804:	4618      	mov	r0, r3
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	bc80      	pop	{r7}
 800580c:	4770      	bx	lr

0800580e <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b086      	sub	sp, #24
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
 8005816:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d906      	bls.n	800582c <get_fat+0x1e>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	429a      	cmp	r2, r3
 800582a:	d302      	bcc.n	8005832 <get_fat+0x24>
		val = 1;	/* Internal error */
 800582c:	2301      	movs	r3, #1
 800582e:	617b      	str	r3, [r7, #20]
 8005830:	e0e4      	b.n	80059fc <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005832:	f04f 33ff 	mov.w	r3, #4294967295
 8005836:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	2b03      	cmp	r3, #3
 8005842:	f000 8098 	beq.w	8005976 <get_fat+0x168>
 8005846:	2b03      	cmp	r3, #3
 8005848:	f300 80ce 	bgt.w	80059e8 <get_fat+0x1da>
 800584c:	2b01      	cmp	r3, #1
 800584e:	d002      	beq.n	8005856 <get_fat+0x48>
 8005850:	2b02      	cmp	r3, #2
 8005852:	d05f      	beq.n	8005914 <get_fat+0x106>
 8005854:	e0c8      	b.n	80059e8 <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	60fb      	str	r3, [r7, #12]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	085b      	lsrs	r3, r3, #1
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	4413      	add	r3, r2
 8005862:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800586a:	6a1a      	ldr	r2, [r3, #32]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005872:	895b      	ldrh	r3, [r3, #10]
 8005874:	4619      	mov	r1, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	fbb3 f3f1 	udiv	r3, r3, r1
 800587c:	4413      	add	r3, r2
 800587e:	4619      	mov	r1, r3
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f7ff feaf 	bl	80055e4 <move_window>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	f040 80b0 	bne.w	80059ee <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	1c5a      	adds	r2, r3, #1
 8005892:	60fa      	str	r2, [r7, #12]
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800589a:	8952      	ldrh	r2, [r2, #10]
 800589c:	fbb3 f1f2 	udiv	r1, r3, r2
 80058a0:	fb01 f202 	mul.w	r2, r1, r2
 80058a4:	1a9b      	subs	r3, r3, r2
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	5cd3      	ldrb	r3, [r2, r3]
 80058aa:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058b2:	6a1a      	ldr	r2, [r3, #32]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058ba:	895b      	ldrh	r3, [r3, #10]
 80058bc:	4619      	mov	r1, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80058c4:	4413      	add	r3, r2
 80058c6:	4619      	mov	r1, r3
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7ff fe8b 	bl	80055e4 <move_window>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f040 808e 	bne.w	80059f2 <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058dc:	895b      	ldrh	r3, [r3, #10]
 80058de:	461a      	mov	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80058e6:	fb01 f202 	mul.w	r2, r1, r2
 80058ea:	1a9b      	subs	r3, r3, r2
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	5cd3      	ldrb	r3, [r2, r3]
 80058f0:	021b      	lsls	r3, r3, #8
 80058f2:	461a      	mov	r2, r3
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	2b00      	cmp	r3, #0
 8005902:	d002      	beq.n	800590a <get_fat+0xfc>
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	091b      	lsrs	r3, r3, #4
 8005908:	e002      	b.n	8005910 <get_fat+0x102>
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005910:	617b      	str	r3, [r7, #20]
			break;
 8005912:	e073      	b.n	80059fc <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800591a:	6a1a      	ldr	r2, [r3, #32]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005922:	895b      	ldrh	r3, [r3, #10]
 8005924:	085b      	lsrs	r3, r3, #1
 8005926:	b29b      	uxth	r3, r3
 8005928:	4619      	mov	r1, r3
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005930:	4413      	add	r3, r2
 8005932:	4619      	mov	r1, r3
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f7ff fe55 	bl	80055e4 <move_window>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d15a      	bne.n	80059f6 <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	005b      	lsls	r3, r3, #1
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800594a:	8952      	ldrh	r2, [r2, #10]
 800594c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005950:	fb01 f202 	mul.w	r2, r1, r2
 8005954:	1a9b      	subs	r3, r3, r2
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	4413      	add	r3, r2
 800595a:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	3301      	adds	r3, #1
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	021b      	lsls	r3, r3, #8
 8005964:	b21a      	sxth	r2, r3
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	b21b      	sxth	r3, r3
 800596c:	4313      	orrs	r3, r2
 800596e:	b21b      	sxth	r3, r3
 8005970:	b29b      	uxth	r3, r3
 8005972:	617b      	str	r3, [r7, #20]
			break;
 8005974:	e042      	b.n	80059fc <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800597c:	6a1a      	ldr	r2, [r3, #32]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005984:	895b      	ldrh	r3, [r3, #10]
 8005986:	089b      	lsrs	r3, r3, #2
 8005988:	b29b      	uxth	r3, r3
 800598a:	4619      	mov	r1, r3
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005992:	4413      	add	r3, r2
 8005994:	4619      	mov	r1, r3
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7ff fe24 	bl	80055e4 <move_window>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d12b      	bne.n	80059fa <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80059ac:	8952      	ldrh	r2, [r2, #10]
 80059ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80059b2:	fb01 f202 	mul.w	r2, r1, r2
 80059b6:	1a9b      	subs	r3, r3, r2
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	4413      	add	r3, r2
 80059bc:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	3303      	adds	r3, #3
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	061a      	lsls	r2, r3, #24
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	3302      	adds	r3, #2
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	041b      	lsls	r3, r3, #16
 80059ce:	4313      	orrs	r3, r2
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	3201      	adds	r2, #1
 80059d4:	7812      	ldrb	r2, [r2, #0]
 80059d6:	0212      	lsls	r2, r2, #8
 80059d8:	4313      	orrs	r3, r2
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	7812      	ldrb	r2, [r2, #0]
 80059de:	4313      	orrs	r3, r2
 80059e0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80059e4:	617b      	str	r3, [r7, #20]
			break;
 80059e6:	e009      	b.n	80059fc <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 80059e8:	2301      	movs	r3, #1
 80059ea:	617b      	str	r3, [r7, #20]
 80059ec:	e006      	b.n	80059fc <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80059ee:	bf00      	nop
 80059f0:	e004      	b.n	80059fc <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80059f2:	bf00      	nop
 80059f4:	e002      	b.n	80059fc <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80059f6:	bf00      	nop
 80059f8:	e000      	b.n	80059fc <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80059fa:	bf00      	nop
		}
	}

	return val;
 80059fc:	697b      	ldr	r3, [r7, #20]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3718      	adds	r7, #24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b088      	sub	sp, #32
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	60f8      	str	r0, [r7, #12]
 8005a0e:	60b9      	str	r1, [r7, #8]
 8005a10:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d906      	bls.n	8005a26 <put_fat+0x20>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a1e:	695b      	ldr	r3, [r3, #20]
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d302      	bcc.n	8005a2c <put_fat+0x26>
		res = FR_INT_ERR;
 8005a26:	2302      	movs	r3, #2
 8005a28:	77fb      	strb	r3, [r7, #31]
 8005a2a:	e13a      	b.n	8005ca2 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	2b03      	cmp	r3, #3
 8005a36:	f000 80d0 	beq.w	8005bda <put_fat+0x1d4>
 8005a3a:	2b03      	cmp	r3, #3
 8005a3c:	f300 8127 	bgt.w	8005c8e <put_fat+0x288>
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d003      	beq.n	8005a4c <put_fat+0x46>
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	f000 808f 	beq.w	8005b68 <put_fat+0x162>
 8005a4a:	e120      	b.n	8005c8e <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	617b      	str	r3, [r7, #20]
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	085b      	lsrs	r3, r3, #1
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	4413      	add	r3, r2
 8005a58:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a60:	6a1a      	ldr	r2, [r3, #32]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a68:	895b      	ldrh	r3, [r3, #10]
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a72:	4413      	add	r3, r2
 8005a74:	4619      	mov	r1, r3
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f7ff fdb4 	bl	80055e4 <move_window>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005a80:	7ffb      	ldrb	r3, [r7, #31]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f040 8106 	bne.w	8005c94 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	1c5a      	adds	r2, r3, #1
 8005a8c:	617a      	str	r2, [r7, #20]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005a94:	8952      	ldrh	r2, [r2, #10]
 8005a96:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a9a:	fb01 f202 	mul.w	r2, r1, r2
 8005a9e:	1a9b      	subs	r3, r3, r2
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	f003 0301 	and.w	r3, r3, #1
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00d      	beq.n	8005acc <put_fat+0xc6>
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	b25b      	sxtb	r3, r3
 8005ab6:	f003 030f 	and.w	r3, r3, #15
 8005aba:	b25a      	sxtb	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	011b      	lsls	r3, r3, #4
 8005ac2:	b25b      	sxtb	r3, r3
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	b25b      	sxtb	r3, r3
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	e001      	b.n	8005ad0 <put_fat+0xca>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ada:	2201      	movs	r2, #1
 8005adc:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ae4:	6a1a      	ldr	r2, [r3, #32]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aec:	895b      	ldrh	r3, [r3, #10]
 8005aee:	4619      	mov	r1, r3
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005af6:	4413      	add	r3, r2
 8005af8:	4619      	mov	r1, r3
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f7ff fd72 	bl	80055e4 <move_window>
 8005b00:	4603      	mov	r3, r0
 8005b02:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005b04:	7ffb      	ldrb	r3, [r7, #31]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f040 80c6 	bne.w	8005c98 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b12:	895b      	ldrh	r3, [r3, #10]
 8005b14:	461a      	mov	r2, r3
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b1c:	fb01 f202 	mul.w	r2, r1, r2
 8005b20:	1a9b      	subs	r3, r3, r2
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4413      	add	r3, r2
 8005b26:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d003      	beq.n	8005b3a <put_fat+0x134>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	091b      	lsrs	r3, r3, #4
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	e00e      	b.n	8005b58 <put_fat+0x152>
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	b25b      	sxtb	r3, r3
 8005b40:	f023 030f 	bic.w	r3, r3, #15
 8005b44:	b25a      	sxtb	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	0a1b      	lsrs	r3, r3, #8
 8005b4a:	b25b      	sxtb	r3, r3
 8005b4c:	f003 030f 	and.w	r3, r3, #15
 8005b50:	b25b      	sxtb	r3, r3
 8005b52:	4313      	orrs	r3, r2
 8005b54:	b25b      	sxtb	r3, r3
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	69ba      	ldr	r2, [r7, #24]
 8005b5a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b62:	2201      	movs	r2, #1
 8005b64:	711a      	strb	r2, [r3, #4]
			break;
 8005b66:	e09c      	b.n	8005ca2 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b6e:	6a1a      	ldr	r2, [r3, #32]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b76:	895b      	ldrh	r3, [r3, #10]
 8005b78:	085b      	lsrs	r3, r3, #1
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b84:	4413      	add	r3, r2
 8005b86:	4619      	mov	r1, r3
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f7ff fd2b 	bl	80055e4 <move_window>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005b92:	7ffb      	ldrb	r3, [r7, #31]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f040 8081 	bne.w	8005c9c <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	005b      	lsls	r3, r3, #1
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005ba4:	8952      	ldrh	r2, [r2, #10]
 8005ba6:	fbb3 f1f2 	udiv	r1, r3, r2
 8005baa:	fb01 f202 	mul.w	r2, r1, r2
 8005bae:	1a9b      	subs	r3, r3, r2
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	701a      	strb	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	0a1b      	lsrs	r3, r3, #8
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	b2d2      	uxtb	r2, r2
 8005bcc:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	711a      	strb	r2, [r3, #4]
			break;
 8005bd8:	e063      	b.n	8005ca2 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005be0:	6a1a      	ldr	r2, [r3, #32]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005be8:	895b      	ldrh	r3, [r3, #10]
 8005bea:	089b      	lsrs	r3, r3, #2
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	4619      	mov	r1, r3
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005bf6:	4413      	add	r3, r2
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	f7ff fcf2 	bl	80055e4 <move_window>
 8005c00:	4603      	mov	r3, r0
 8005c02:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005c04:	7ffb      	ldrb	r3, [r7, #31]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d14a      	bne.n	8005ca0 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005c14:	8952      	ldrh	r2, [r2, #10]
 8005c16:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c1a:	fb01 f202 	mul.w	r2, r1, r2
 8005c1e:	1a9b      	subs	r3, r3, r2
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	4413      	add	r3, r2
 8005c24:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	3303      	adds	r3, #3
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	061a      	lsls	r2, r3, #24
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	3302      	adds	r3, #2
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	041b      	lsls	r3, r3, #16
 8005c36:	4313      	orrs	r3, r2
 8005c38:	69ba      	ldr	r2, [r7, #24]
 8005c3a:	3201      	adds	r2, #1
 8005c3c:	7812      	ldrb	r2, [r2, #0]
 8005c3e:	0212      	lsls	r2, r2, #8
 8005c40:	4313      	orrs	r3, r2
 8005c42:	69ba      	ldr	r2, [r7, #24]
 8005c44:	7812      	ldrb	r2, [r2, #0]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	701a      	strb	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	0a1b      	lsrs	r3, r3, #8
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	3301      	adds	r3, #1
 8005c66:	b2d2      	uxtb	r2, r2
 8005c68:	701a      	strb	r2, [r3, #0]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	0c1a      	lsrs	r2, r3, #16
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	3302      	adds	r3, #2
 8005c72:	b2d2      	uxtb	r2, r2
 8005c74:	701a      	strb	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	0e1a      	lsrs	r2, r3, #24
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	3303      	adds	r3, #3
 8005c7e:	b2d2      	uxtb	r2, r2
 8005c80:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c88:	2201      	movs	r2, #1
 8005c8a:	711a      	strb	r2, [r3, #4]
			break;
 8005c8c:	e009      	b.n	8005ca2 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8005c8e:	2302      	movs	r3, #2
 8005c90:	77fb      	strb	r3, [r7, #31]
 8005c92:	e006      	b.n	8005ca2 <put_fat+0x29c>
			if (res != FR_OK) break;
 8005c94:	bf00      	nop
 8005c96:	e004      	b.n	8005ca2 <put_fat+0x29c>
			if (res != FR_OK) break;
 8005c98:	bf00      	nop
 8005c9a:	e002      	b.n	8005ca2 <put_fat+0x29c>
			if (res != FR_OK) break;
 8005c9c:	bf00      	nop
 8005c9e:	e000      	b.n	8005ca2 <put_fat+0x29c>
			if (res != FR_OK) break;
 8005ca0:	bf00      	nop
		}
	}

	return res;
 8005ca2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3720      	adds	r7, #32
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d906      	bls.n	8005cca <remove_chain+0x1e>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cc2:	695b      	ldr	r3, [r3, #20]
 8005cc4:	683a      	ldr	r2, [r7, #0]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d302      	bcc.n	8005cd0 <remove_chain+0x24>
		res = FR_INT_ERR;
 8005cca:	2302      	movs	r3, #2
 8005ccc:	73fb      	strb	r3, [r7, #15]
 8005cce:	e049      	b.n	8005d64 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005cd4:	e03b      	b.n	8005d4e <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8005cd6:	6839      	ldr	r1, [r7, #0]
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f7ff fd98 	bl	800580e <get_fat>
 8005cde:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d03b      	beq.n	8005d5e <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d102      	bne.n	8005cf2 <remove_chain+0x46>
 8005cec:	2302      	movs	r3, #2
 8005cee:	73fb      	strb	r3, [r7, #15]
 8005cf0:	e038      	b.n	8005d64 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf8:	d102      	bne.n	8005d00 <remove_chain+0x54>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	73fb      	strb	r3, [r7, #15]
 8005cfe:	e031      	b.n	8005d64 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8005d00:	2200      	movs	r2, #0
 8005d02:	6839      	ldr	r1, [r7, #0]
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f7ff fe7e 	bl	8005a06 <put_fat>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005d0e:	7bfb      	ldrb	r3, [r7, #15]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d126      	bne.n	8005d62 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d20:	d013      	beq.n	8005d4a <remove_chain+0x9e>
				fs->free_clust++;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005d32:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d3a:	795b      	ldrb	r3, [r3, #5]
 8005d3c:	f043 0301 	orr.w	r3, r3, #1
 8005d40:	b2da      	uxtb	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d48:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d3bc      	bcc.n	8005cd6 <remove_chain+0x2a>
 8005d5c:	e002      	b.n	8005d64 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8005d5e:	bf00      	nop
 8005d60:	e000      	b.n	8005d64 <remove_chain+0xb8>
			if (res != FR_OK) break;
 8005d62:	bf00      	nop
		}
	}

	return res;
 8005d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b086      	sub	sp, #24
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
 8005d76:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d111      	bne.n	8005da2 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d006      	beq.n	8005d9c <create_chain+0x2e>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d31d      	bcc.n	8005dd8 <create_chain+0x6a>
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	613b      	str	r3, [r7, #16]
 8005da0:	e01a      	b.n	8005dd8 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8005da2:	6839      	ldr	r1, [r7, #0]
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f7ff fd32 	bl	800580e <get_fat>
 8005daa:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d801      	bhi.n	8005db6 <create_chain+0x48>
 8005db2:	2301      	movs	r3, #1
 8005db4:	e07f      	b.n	8005eb6 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dbc:	d101      	bne.n	8005dc2 <create_chain+0x54>
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	e079      	b.n	8005eb6 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d201      	bcs.n	8005dd4 <create_chain+0x66>
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	e070      	b.n	8005eb6 <create_chain+0x148>
		scl = clst;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	3301      	adds	r3, #1
 8005de0:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d307      	bcc.n	8005e00 <create_chain+0x92>
			ncl = 2;
 8005df0:	2302      	movs	r3, #2
 8005df2:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d901      	bls.n	8005e00 <create_chain+0x92>
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	e05a      	b.n	8005eb6 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8005e00:	6979      	ldr	r1, [r7, #20]
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7ff fd03 	bl	800580e <get_fat>
 8005e08:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00e      	beq.n	8005e2e <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e16:	d002      	beq.n	8005e1e <create_chain+0xb0>
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d101      	bne.n	8005e22 <create_chain+0xb4>
			return cs;
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	e049      	b.n	8005eb6 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d1d8      	bne.n	8005ddc <create_chain+0x6e>
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	e043      	b.n	8005eb6 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8005e2e:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8005e30:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8005e34:	6979      	ldr	r1, [r7, #20]
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7ff fde5 	bl	8005a06 <put_fat>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8005e40:	7bfb      	ldrb	r3, [r7, #15]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d109      	bne.n	8005e5a <create_chain+0xec>
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d006      	beq.n	8005e5a <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	6839      	ldr	r1, [r7, #0]
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f7ff fdd8 	bl	8005a06 <put_fat>
 8005e56:	4603      	mov	r3, r0
 8005e58:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8005e5a:	7bfb      	ldrb	r3, [r7, #15]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d121      	bne.n	8005ea4 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e66:	461a      	mov	r2, r3
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e78:	d01c      	beq.n	8005eb4 <create_chain+0x146>
			fs->free_clust--;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	3b01      	subs	r3, #1
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005e8a:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e92:	795b      	ldrb	r3, [r3, #5]
 8005e94:	f043 0301 	orr.w	r3, r3, #1
 8005e98:	b2da      	uxtb	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ea0:	715a      	strb	r2, [r3, #5]
 8005ea2:	e007      	b.n	8005eb4 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8005ea4:	7bfb      	ldrb	r3, [r7, #15]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d102      	bne.n	8005eb0 <create_chain+0x142>
 8005eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8005eae:	e000      	b.n	8005eb2 <create_chain+0x144>
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8005eb4:	697b      	ldr	r3, [r7, #20]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3718      	adds	r7, #24
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b087      	sub	sp, #28
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
 8005ec6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed0:	3304      	adds	r3, #4
 8005ed2:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ee0:	895b      	ldrh	r3, [r3, #10]
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	fbb3 f3f2 	udiv	r3, r3, r2
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005ef0:	6812      	ldr	r2, [r2, #0]
 8005ef2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005ef6:	7892      	ldrb	r2, [r2, #2]
 8005ef8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005efc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	1d1a      	adds	r2, r3, #4
 8005f02:	613a      	str	r2, [r7, #16]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <clmt_clust+0x54>
 8005f0e:	2300      	movs	r3, #0
 8005f10:	e010      	b.n	8005f34 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d307      	bcc.n	8005f2a <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	617b      	str	r3, [r7, #20]
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	3304      	adds	r3, #4
 8005f26:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005f28:	e7e9      	b.n	8005efe <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8005f2a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	4413      	add	r3, r2
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	371c      	adds	r7, #28
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bc80      	pop	{r7}
 8005f3c:	4770      	bx	lr

08005f3e <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b086      	sub	sp, #24
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
 8005f46:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f52:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d009      	beq.n	8005f78 <dir_sdi+0x3a>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d301      	bcc.n	8005f7c <dir_sdi+0x3e>
		return FR_INT_ERR;
 8005f78:	2302      	movs	r3, #2
 8005f7a:	e0aa      	b.n	80060d2 <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d110      	bne.n	8005fa4 <dir_sdi+0x66>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	2b03      	cmp	r3, #3
 8005f92:	d107      	bne.n	8005fa4 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa2:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d115      	bne.n	8005fd6 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fb6:	891b      	ldrh	r3, [r3, #8]
 8005fb8:	461a      	mov	r2, r3
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d301      	bcc.n	8005fc4 <dir_sdi+0x86>
			return FR_INT_ERR;
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	e086      	b.n	80060d2 <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd2:	613b      	str	r3, [r7, #16]
 8005fd4:	e043      	b.n	800605e <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fe2:	895b      	ldrh	r3, [r3, #10]
 8005fe4:	095b      	lsrs	r3, r3, #5
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	461a      	mov	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ff6:	789b      	ldrb	r3, [r3, #2]
 8005ff8:	fb02 f303 	mul.w	r3, r2, r3
 8005ffc:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8005ffe:	e021      	b.n	8006044 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6979      	ldr	r1, [r7, #20]
 800600a:	4618      	mov	r0, r3
 800600c:	f7ff fbff 	bl	800580e <get_fat>
 8006010:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006018:	d101      	bne.n	800601e <dir_sdi+0xe0>
 800601a:	2301      	movs	r3, #1
 800601c:	e059      	b.n	80060d2 <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d909      	bls.n	8006038 <dir_sdi+0xfa>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	429a      	cmp	r2, r3
 8006036:	d301      	bcc.n	800603c <dir_sdi+0xfe>
				return FR_INT_ERR;
 8006038:	2302      	movs	r3, #2
 800603a:	e04a      	b.n	80060d2 <dir_sdi+0x194>
			idx -= ic;
 800603c:	683a      	ldr	r2, [r7, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8006044:	683a      	ldr	r2, [r7, #0]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	429a      	cmp	r2, r3
 800604a:	d2d9      	bcs.n	8006000 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6979      	ldr	r1, [r7, #20]
 8006056:	4618      	mov	r0, r3
 8006058:	f7ff fbb5 	bl	80057c6 <clust2sect>
 800605c:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006064:	461a      	mov	r2, r3
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d101      	bne.n	8006074 <dir_sdi+0x136>
 8006070:	2302      	movs	r3, #2
 8006072:	e02e      	b.n	80060d2 <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006080:	895b      	ldrh	r3, [r3, #10]
 8006082:	095b      	lsrs	r3, r3, #5
 8006084:	b29b      	uxth	r3, r3
 8006086:	461a      	mov	r2, r3
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	fbb3 f2f2 	udiv	r2, r3, r2
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	4413      	add	r3, r2
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006098:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4618      	mov	r0, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060b0:	895b      	ldrh	r3, [r3, #10]
 80060b2:	095b      	lsrs	r3, r3, #5
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	461a      	mov	r2, r3
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80060be:	fb01 f202 	mul.w	r2, r1, r2
 80060c2:	1a9b      	subs	r3, r3, r2
 80060c4:	015b      	lsls	r3, r3, #5
 80060c6:	4403      	add	r3, r0
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80060ce:	6153      	str	r3, [r2, #20]

	return FR_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3718      	adds	r7, #24
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80060da:	b590      	push	{r4, r7, lr}
 80060dc:	b087      	sub	sp, #28
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
 80060e2:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ea:	88db      	ldrh	r3, [r3, #6]
 80060ec:	3301      	adds	r3, #1
 80060ee:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d005      	beq.n	8006104 <dir_next+0x2a>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d101      	bne.n	8006108 <dir_next+0x2e>
		return FR_NO_FILE;
 8006104:	2304      	movs	r3, #4
 8006106:	e12e      	b.n	8006366 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006114:	895b      	ldrh	r3, [r3, #10]
 8006116:	095b      	lsrs	r3, r3, #5
 8006118:	b29b      	uxth	r3, r3
 800611a:	461a      	mov	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006122:	fb01 f202 	mul.w	r2, r1, r2
 8006126:	1a9b      	subs	r3, r3, r2
 8006128:	2b00      	cmp	r3, #0
 800612a:	f040 80fa 	bne.w	8006322 <dir_next+0x248>
		dp->sect++;					/* Next sector */
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	3301      	adds	r3, #1
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800613e:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10d      	bne.n	8006168 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006158:	891b      	ldrh	r3, [r3, #8]
 800615a:	461a      	mov	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4293      	cmp	r3, r2
 8006160:	f0c0 80df 	bcc.w	8006322 <dir_next+0x248>
				return FR_NO_FILE;
 8006164:	2304      	movs	r3, #4
 8006166:	e0fe      	b.n	8006366 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006174:	895b      	ldrh	r3, [r3, #10]
 8006176:	095b      	lsrs	r3, r3, #5
 8006178:	b29b      	uxth	r3, r3
 800617a:	461a      	mov	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006188:	6812      	ldr	r2, [r2, #0]
 800618a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800618e:	7892      	ldrb	r2, [r2, #2]
 8006190:	3a01      	subs	r2, #1
 8006192:	4013      	ands	r3, r2
 8006194:	2b00      	cmp	r3, #0
 8006196:	f040 80c4 	bne.w	8006322 <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	4619      	mov	r1, r3
 80061ac:	4610      	mov	r0, r2
 80061ae:	f7ff fb2e 	bl	800580e <get_fat>
 80061b2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d801      	bhi.n	80061be <dir_next+0xe4>
 80061ba:	2302      	movs	r3, #2
 80061bc:	e0d3      	b.n	8006366 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c4:	d101      	bne.n	80061ca <dir_next+0xf0>
 80061c6:	2301      	movs	r3, #1
 80061c8:	e0cd      	b.n	8006366 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061d6:	695b      	ldr	r3, [r3, #20]
 80061d8:	697a      	ldr	r2, [r7, #20]
 80061da:	429a      	cmp	r2, r3
 80061dc:	f0c0 808e 	bcc.w	80062fc <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d101      	bne.n	80061ea <dir_next+0x110>
 80061e6:	2304      	movs	r3, #4
 80061e8:	e0bd      	b.n	8006366 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	4619      	mov	r1, r3
 80061fc:	4610      	mov	r0, r2
 80061fe:	f7ff fdb6 	bl	8005d6e <create_chain>
 8006202:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <dir_next+0x134>
 800620a:	2307      	movs	r3, #7
 800620c:	e0ab      	b.n	8006366 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d101      	bne.n	8006218 <dir_next+0x13e>
 8006214:	2302      	movs	r3, #2
 8006216:	e0a6      	b.n	8006366 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800621e:	d101      	bne.n	8006224 <dir_next+0x14a>
 8006220:	2301      	movs	r3, #1
 8006222:	e0a0      	b.n	8006366 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4618      	mov	r0, r3
 800622e:	f7ff f987 	bl	8005540 <sync_window>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d001      	beq.n	800623c <dir_next+0x162>
 8006238:	2301      	movs	r3, #1
 800623a:	e094      	b.n	8006366 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4618      	mov	r0, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006252:	895b      	ldrh	r3, [r3, #10]
 8006254:	461a      	mov	r2, r3
 8006256:	2100      	movs	r1, #0
 8006258:	f7fe ff5a 	bl	8005110 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800626a:	681c      	ldr	r4, [r3, #0]
 800626c:	6979      	ldr	r1, [r7, #20]
 800626e:	4610      	mov	r0, r2
 8006270:	f7ff faa9 	bl	80057c6 <clust2sect>
 8006274:	4603      	mov	r3, r0
 8006276:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 800627a:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800627c:	2300      	movs	r3, #0
 800627e:	613b      	str	r3, [r7, #16]
 8006280:	e021      	b.n	80062c6 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800628e:	2201      	movs	r2, #1
 8006290:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4618      	mov	r0, r3
 800629c:	f7ff f950 	bl	8005540 <sync_window>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d001      	beq.n	80062aa <dir_next+0x1d0>
 80062a6:	2301      	movs	r3, #1
 80062a8:	e05d      	b.n	8006366 <dir_next+0x28c>
						dp->fs->winsect++;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80062b6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80062b8:	3201      	adds	r2, #1
 80062ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062be:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	3301      	adds	r3, #1
 80062c4:	613b      	str	r3, [r7, #16]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062d2:	789b      	ldrb	r3, [r3, #2]
 80062d4:	461a      	mov	r2, r3
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	4293      	cmp	r3, r2
 80062da:	d3d2      	bcc.n	8006282 <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	1acb      	subs	r3, r1, r3
 80062f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80062fa:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006302:	461a      	mov	r2, r3
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6979      	ldr	r1, [r7, #20]
 8006312:	4618      	mov	r0, r3
 8006314:	f7ff fa57 	bl	80057c6 <clust2sect>
 8006318:	4602      	mov	r2, r0
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006320:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	b29a      	uxth	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800632c:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4618      	mov	r0, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006344:	895b      	ldrh	r3, [r3, #10]
 8006346:	095b      	lsrs	r3, r3, #5
 8006348:	b29b      	uxth	r3, r3
 800634a:	461a      	mov	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006352:	fb01 f202 	mul.w	r2, r1, r2
 8006356:	1a9b      	subs	r3, r3, r2
 8006358:	015b      	lsls	r3, r3, #5
 800635a:	4403      	add	r3, r0
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006362:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	371c      	adds	r7, #28
 800636a:	46bd      	mov	sp, r7
 800636c:	bd90      	pop	{r4, r7, pc}

0800636e <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b084      	sub	sp, #16
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
 8006376:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8006378:	2100      	movs	r1, #0
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f7ff fddf 	bl	8005f3e <dir_sdi>
 8006380:	4603      	mov	r3, r0
 8006382:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006384:	7bfb      	ldrb	r3, [r7, #15]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d135      	bne.n	80063f6 <dir_alloc+0x88>
		n = 0;
 800638a:	2300      	movs	r3, #0
 800638c:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	4619      	mov	r1, r3
 80063a0:	4610      	mov	r0, r2
 80063a2:	f7ff f91f 	bl	80055e4 <move_window>
 80063a6:	4603      	mov	r3, r0
 80063a8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80063aa:	7bfb      	ldrb	r3, [r7, #15]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d121      	bne.n	80063f4 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063b6:	695b      	ldr	r3, [r3, #20]
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	2be5      	cmp	r3, #229	; 0xe5
 80063bc:	d006      	beq.n	80063cc <dir_alloc+0x5e>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d107      	bne.n	80063dc <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	3301      	adds	r3, #1
 80063d0:	60bb      	str	r3, [r7, #8]
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d102      	bne.n	80063e0 <dir_alloc+0x72>
 80063da:	e00c      	b.n	80063f6 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80063dc:	2300      	movs	r3, #0
 80063de:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80063e0:	2101      	movs	r1, #1
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f7ff fe79 	bl	80060da <dir_next>
 80063e8:	4603      	mov	r3, r0
 80063ea:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80063ec:	7bfb      	ldrb	r3, [r7, #15]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d0cd      	beq.n	800638e <dir_alloc+0x20>
 80063f2:	e000      	b.n	80063f6 <dir_alloc+0x88>
			if (res != FR_OK) break;
 80063f4:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
 80063f8:	2b04      	cmp	r3, #4
 80063fa:	d101      	bne.n	8006400 <dir_alloc+0x92>
 80063fc:	2307      	movs	r3, #7
 80063fe:	73fb      	strb	r3, [r7, #15]
	return res;
 8006400:	7bfb      	ldrb	r3, [r7, #15]
}
 8006402:	4618      	mov	r0, r3
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800640a:	b480      	push	{r7}
 800640c:	b085      	sub	sp, #20
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
 8006412:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	331b      	adds	r3, #27
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	021b      	lsls	r3, r3, #8
 800641c:	b21a      	sxth	r2, r3
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	331a      	adds	r3, #26
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	b21b      	sxth	r3, r3
 8006426:	4313      	orrs	r3, r2
 8006428:	b21b      	sxth	r3, r3
 800642a:	b29b      	uxth	r3, r3
 800642c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	2b03      	cmp	r3, #3
 8006438:	d10f      	bne.n	800645a <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	3315      	adds	r3, #21
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	021b      	lsls	r3, r3, #8
 8006442:	b21a      	sxth	r2, r3
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	3314      	adds	r3, #20
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	b21b      	sxth	r3, r3
 800644c:	4313      	orrs	r3, r2
 800644e:	b21b      	sxth	r3, r3
 8006450:	b29b      	uxth	r3, r3
 8006452:	041b      	lsls	r3, r3, #16
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	4313      	orrs	r3, r2
 8006458:	60fb      	str	r3, [r7, #12]

	return cl;
 800645a:	68fb      	ldr	r3, [r7, #12]
}
 800645c:	4618      	mov	r0, r3
 800645e:	3714      	adds	r7, #20
 8006460:	46bd      	mov	sp, r7
 8006462:	bc80      	pop	{r7}
 8006464:	4770      	bx	lr

08006466 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8006466:	b480      	push	{r7}
 8006468:	b083      	sub	sp, #12
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
 800646e:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	331a      	adds	r3, #26
 8006474:	683a      	ldr	r2, [r7, #0]
 8006476:	b2d2      	uxtb	r2, r2
 8006478:	701a      	strb	r2, [r3, #0]
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	b29b      	uxth	r3, r3
 800647e:	0a1b      	lsrs	r3, r3, #8
 8006480:	b29a      	uxth	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	331b      	adds	r3, #27
 8006486:	b2d2      	uxtb	r2, r2
 8006488:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	0c1a      	lsrs	r2, r3, #16
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	3314      	adds	r3, #20
 8006492:	b2d2      	uxtb	r2, r2
 8006494:	701a      	strb	r2, [r3, #0]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	0c1b      	lsrs	r3, r3, #16
 800649a:	b29b      	uxth	r3, r3
 800649c:	0a1b      	lsrs	r3, r3, #8
 800649e:	b29a      	uxth	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	3315      	adds	r3, #21
 80064a4:	b2d2      	uxtb	r2, r2
 80064a6:	701a      	strb	r2, [r3, #0]
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bc80      	pop	{r7}
 80064b0:	4770      	bx	lr
	...

080064b4 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064c6:	1e5a      	subs	r2, r3, #1
 80064c8:	4613      	mov	r3, r2
 80064ca:	005b      	lsls	r3, r3, #1
 80064cc:	4413      	add	r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 80064d4:	2300      	movs	r3, #0
 80064d6:	613b      	str	r3, [r7, #16]
 80064d8:	2301      	movs	r3, #1
 80064da:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 80064dc:	4a2b      	ldr	r2, [pc, #172]	; (800658c <cmp_lfn+0xd8>)
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	4413      	add	r3, r2
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	3301      	adds	r3, #1
 80064e6:	683a      	ldr	r2, [r7, #0]
 80064e8:	4413      	add	r3, r2
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	021b      	lsls	r3, r3, #8
 80064ee:	b21a      	sxth	r2, r3
 80064f0:	4926      	ldr	r1, [pc, #152]	; (800658c <cmp_lfn+0xd8>)
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	440b      	add	r3, r1
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	4619      	mov	r1, r3
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	440b      	add	r3, r1
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	b21b      	sxth	r3, r3
 8006502:	4313      	orrs	r3, r2
 8006504:	b21b      	sxth	r3, r3
 8006506:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8006508:	89fb      	ldrh	r3, [r7, #14]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d019      	beq.n	8006542 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800650e:	89bb      	ldrh	r3, [r7, #12]
 8006510:	4618      	mov	r0, r3
 8006512:	f002 fbbd 	bl	8008c90 <ff_wtoupper>
 8006516:	4603      	mov	r3, r0
 8006518:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	2bfe      	cmp	r3, #254	; 0xfe
 800651e:	d80e      	bhi.n	800653e <cmp_lfn+0x8a>
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	1c5a      	adds	r2, r3, #1
 8006524:	617a      	str	r2, [r7, #20]
 8006526:	005b      	lsls	r3, r3, #1
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	4413      	add	r3, r2
 800652c:	881b      	ldrh	r3, [r3, #0]
 800652e:	4618      	mov	r0, r3
 8006530:	f002 fbae 	bl	8008c90 <ff_wtoupper>
 8006534:	4603      	mov	r3, r0
 8006536:	461a      	mov	r2, r3
 8006538:	89fb      	ldrh	r3, [r7, #14]
 800653a:	4293      	cmp	r3, r2
 800653c:	d008      	beq.n	8006550 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800653e:	2300      	movs	r3, #0
 8006540:	e01f      	b.n	8006582 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8006542:	89bb      	ldrh	r3, [r7, #12]
 8006544:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006548:	4293      	cmp	r3, r2
 800654a:	d001      	beq.n	8006550 <cmp_lfn+0x9c>
 800654c:	2300      	movs	r3, #0
 800654e:	e018      	b.n	8006582 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	3301      	adds	r3, #1
 8006554:	613b      	str	r3, [r7, #16]
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	2b0c      	cmp	r3, #12
 800655a:	d9bf      	bls.n	80064dc <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00b      	beq.n	8006580 <cmp_lfn+0xcc>
 8006568:	89fb      	ldrh	r3, [r7, #14]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d008      	beq.n	8006580 <cmp_lfn+0xcc>
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	005b      	lsls	r3, r3, #1
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	4413      	add	r3, r2
 8006576:	881b      	ldrh	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d001      	beq.n	8006580 <cmp_lfn+0xcc>
		return 0;
 800657c:	2300      	movs	r3, #0
 800657e:	e000      	b.n	8006582 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8006580:	2301      	movs	r3, #1
}
 8006582:	4618      	mov	r0, r3
 8006584:	3718      	adds	r7, #24
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	0800ca74 	.word	0x0800ca74

08006590 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8006590:	b480      	push	{r7}
 8006592:	b089      	sub	sp, #36	; 0x24
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	4611      	mov	r1, r2
 800659c:	461a      	mov	r2, r3
 800659e:	460b      	mov	r3, r1
 80065a0:	71fb      	strb	r3, [r7, #7]
 80065a2:	4613      	mov	r3, r2
 80065a4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	330d      	adds	r3, #13
 80065aa:	79ba      	ldrb	r2, [r7, #6]
 80065ac:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	330b      	adds	r3, #11
 80065b2:	220f      	movs	r2, #15
 80065b4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	330c      	adds	r3, #12
 80065ba:	2200      	movs	r2, #0
 80065bc:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	331a      	adds	r3, #26
 80065c2:	2200      	movs	r2, #0
 80065c4:	701a      	strb	r2, [r3, #0]
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	331b      	adds	r3, #27
 80065ca:	2200      	movs	r2, #0
 80065cc:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80065ce:	79fb      	ldrb	r3, [r7, #7]
 80065d0:	1e5a      	subs	r2, r3, #1
 80065d2:	4613      	mov	r3, r2
 80065d4:	005b      	lsls	r3, r3, #1
 80065d6:	4413      	add	r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4413      	add	r3, r2
 80065dc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80065de:	2300      	movs	r3, #0
 80065e0:	82fb      	strh	r3, [r7, #22]
 80065e2:	2300      	movs	r3, #0
 80065e4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 80065e6:	8afb      	ldrh	r3, [r7, #22]
 80065e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d007      	beq.n	8006600 <fit_lfn+0x70>
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	1c5a      	adds	r2, r3, #1
 80065f4:	61fa      	str	r2, [r7, #28]
 80065f6:	005b      	lsls	r3, r3, #1
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	4413      	add	r3, r2
 80065fc:	881b      	ldrh	r3, [r3, #0]
 80065fe:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8006600:	4a1c      	ldr	r2, [pc, #112]	; (8006674 <fit_lfn+0xe4>)
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	4413      	add	r3, r2
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	461a      	mov	r2, r3
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	4413      	add	r3, r2
 800660e:	8afa      	ldrh	r2, [r7, #22]
 8006610:	b2d2      	uxtb	r2, r2
 8006612:	701a      	strb	r2, [r3, #0]
 8006614:	8afb      	ldrh	r3, [r7, #22]
 8006616:	0a1b      	lsrs	r3, r3, #8
 8006618:	b299      	uxth	r1, r3
 800661a:	4a16      	ldr	r2, [pc, #88]	; (8006674 <fit_lfn+0xe4>)
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	4413      	add	r3, r2
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	3301      	adds	r3, #1
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	4413      	add	r3, r2
 8006628:	b2ca      	uxtb	r2, r1
 800662a:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800662c:	8afb      	ldrh	r3, [r7, #22]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d102      	bne.n	8006638 <fit_lfn+0xa8>
 8006632:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006636:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	3301      	adds	r3, #1
 800663c:	61bb      	str	r3, [r7, #24]
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	2b0c      	cmp	r3, #12
 8006642:	d9d0      	bls.n	80065e6 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8006644:	8afb      	ldrh	r3, [r7, #22]
 8006646:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800664a:	4293      	cmp	r3, r2
 800664c:	d006      	beq.n	800665c <fit_lfn+0xcc>
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	005b      	lsls	r3, r3, #1
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	4413      	add	r3, r2
 8006656:	881b      	ldrh	r3, [r3, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d103      	bne.n	8006664 <fit_lfn+0xd4>
 800665c:	79fb      	ldrb	r3, [r7, #7]
 800665e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006662:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	79fa      	ldrb	r2, [r7, #7]
 8006668:	701a      	strb	r2, [r3, #0]
}
 800666a:	bf00      	nop
 800666c:	3724      	adds	r7, #36	; 0x24
 800666e:	46bd      	mov	sp, r7
 8006670:	bc80      	pop	{r7}
 8006672:	4770      	bx	lr
 8006674:	0800ca74 	.word	0x0800ca74

08006678 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b08c      	sub	sp, #48	; 0x30
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
 8006684:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006686:	220b      	movs	r2, #11
 8006688:	68b9      	ldr	r1, [r7, #8]
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f7fe fd22 	bl	80050d4 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	2b05      	cmp	r3, #5
 8006694:	d92b      	bls.n	80066ee <gen_numname+0x76>
		sr = seq;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800669a:	e022      	b.n	80066e2 <gen_numname+0x6a>
			wc = *lfn++;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	1c9a      	adds	r2, r3, #2
 80066a0:	607a      	str	r2, [r7, #4]
 80066a2:	881b      	ldrh	r3, [r3, #0]
 80066a4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80066a6:	2300      	movs	r3, #0
 80066a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80066aa:	e017      	b.n	80066dc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	005a      	lsls	r2, r3, #1
 80066b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	4413      	add	r3, r2
 80066b8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80066ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80066bc:	085b      	lsrs	r3, r3, #1
 80066be:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d005      	beq.n	80066d6 <gen_numname+0x5e>
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80066d0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80066d4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80066d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d8:	3301      	adds	r3, #1
 80066da:	62bb      	str	r3, [r7, #40]	; 0x28
 80066dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066de:	2b0f      	cmp	r3, #15
 80066e0:	d9e4      	bls.n	80066ac <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	881b      	ldrh	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1d8      	bne.n	800669c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80066ee:	2307      	movs	r3, #7
 80066f0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	f003 030f 	and.w	r3, r3, #15
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	3330      	adds	r3, #48	; 0x30
 80066fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006702:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006706:	2b39      	cmp	r3, #57	; 0x39
 8006708:	d904      	bls.n	8006714 <gen_numname+0x9c>
 800670a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800670e:	3307      	adds	r3, #7
 8006710:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006716:	1e5a      	subs	r2, r3, #1
 8006718:	62ba      	str	r2, [r7, #40]	; 0x28
 800671a:	3330      	adds	r3, #48	; 0x30
 800671c:	443b      	add	r3, r7
 800671e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006722:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	091b      	lsrs	r3, r3, #4
 800672a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1df      	bne.n	80066f2 <gen_numname+0x7a>
	ns[i] = '~';
 8006732:	f107 0214 	add.w	r2, r7, #20
 8006736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006738:	4413      	add	r3, r2
 800673a:	227e      	movs	r2, #126	; 0x7e
 800673c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800673e:	2300      	movs	r3, #0
 8006740:	627b      	str	r3, [r7, #36]	; 0x24
 8006742:	e002      	b.n	800674a <gen_numname+0xd2>
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	3301      	adds	r3, #1
 8006748:	627b      	str	r3, [r7, #36]	; 0x24
 800674a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800674c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674e:	429a      	cmp	r2, r3
 8006750:	d205      	bcs.n	800675e <gen_numname+0xe6>
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006756:	4413      	add	r3, r2
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	2b20      	cmp	r3, #32
 800675c:	d1f2      	bne.n	8006744 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800675e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006760:	2b07      	cmp	r3, #7
 8006762:	d807      	bhi.n	8006774 <gen_numname+0xfc>
 8006764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006766:	1c5a      	adds	r2, r3, #1
 8006768:	62ba      	str	r2, [r7, #40]	; 0x28
 800676a:	3330      	adds	r3, #48	; 0x30
 800676c:	443b      	add	r3, r7
 800676e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006772:	e000      	b.n	8006776 <gen_numname+0xfe>
 8006774:	2120      	movs	r1, #32
 8006776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006778:	1c5a      	adds	r2, r3, #1
 800677a:	627a      	str	r2, [r7, #36]	; 0x24
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	4413      	add	r3, r2
 8006780:	460a      	mov	r2, r1
 8006782:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	2b07      	cmp	r3, #7
 8006788:	d9e9      	bls.n	800675e <gen_numname+0xe6>
}
 800678a:	bf00      	nop
 800678c:	bf00      	nop
 800678e:	3730      	adds	r7, #48	; 0x30
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800679c:	2300      	movs	r3, #0
 800679e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80067a0:	230b      	movs	r3, #11
 80067a2:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 80067a4:	7bfb      	ldrb	r3, [r7, #15]
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	0852      	lsrs	r2, r2, #1
 80067aa:	01db      	lsls	r3, r3, #7
 80067ac:	4313      	orrs	r3, r2
 80067ae:	b2da      	uxtb	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	1c59      	adds	r1, r3, #1
 80067b4:	6079      	str	r1, [r7, #4]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	4413      	add	r3, r2
 80067ba:	73fb      	strb	r3, [r7, #15]
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	3b01      	subs	r3, #1
 80067c0:	60bb      	str	r3, [r7, #8]
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1ed      	bne.n	80067a4 <sum_sfn+0x10>
	return sum;
 80067c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3714      	adds	r7, #20
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bc80      	pop	{r7}
 80067d2:	4770      	bx	lr

080067d4 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b086      	sub	sp, #24
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80067dc:	2100      	movs	r1, #0
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f7ff fbad 	bl	8005f3e <dir_sdi>
 80067e4:	4603      	mov	r3, r0
 80067e6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80067e8:	7dfb      	ldrb	r3, [r7, #23]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d001      	beq.n	80067f2 <dir_find+0x1e>
 80067ee:	7dfb      	ldrb	r3, [r7, #23]
 80067f0:	e0b8      	b.n	8006964 <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80067f2:	23ff      	movs	r3, #255	; 0xff
 80067f4:	753b      	strb	r3, [r7, #20]
 80067f6:	7d3b      	ldrb	r3, [r7, #20]
 80067f8:	757b      	strb	r3, [r7, #21]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006800:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006804:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	4619      	mov	r1, r3
 8006818:	4610      	mov	r0, r2
 800681a:	f7fe fee3 	bl	80055e4 <move_window>
 800681e:	4603      	mov	r3, r0
 8006820:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006822:	7dfb      	ldrb	r3, [r7, #23]
 8006824:	2b00      	cmp	r3, #0
 8006826:	f040 8097 	bne.w	8006958 <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800683a:	7dbb      	ldrb	r3, [r7, #22]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d102      	bne.n	8006846 <dir_find+0x72>
 8006840:	2304      	movs	r3, #4
 8006842:	75fb      	strb	r3, [r7, #23]
 8006844:	e08d      	b.n	8006962 <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	330b      	adds	r3, #11
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006850:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006852:	7dbb      	ldrb	r3, [r7, #22]
 8006854:	2be5      	cmp	r3, #229	; 0xe5
 8006856:	d007      	beq.n	8006868 <dir_find+0x94>
 8006858:	7bfb      	ldrb	r3, [r7, #15]
 800685a:	f003 0308 	and.w	r3, r3, #8
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00b      	beq.n	800687a <dir_find+0xa6>
 8006862:	7bfb      	ldrb	r3, [r7, #15]
 8006864:	2b0f      	cmp	r3, #15
 8006866:	d008      	beq.n	800687a <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006868:	23ff      	movs	r3, #255	; 0xff
 800686a:	757b      	strb	r3, [r7, #21]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006872:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006876:	849a      	strh	r2, [r3, #36]	; 0x24
 8006878:	e063      	b.n	8006942 <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800687a:	7bfb      	ldrb	r3, [r7, #15]
 800687c:	2b0f      	cmp	r3, #15
 800687e:	d137      	bne.n	80068f0 <dir_find+0x11c>
				if (dp->lfn) {
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006886:	6a1b      	ldr	r3, [r3, #32]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d05a      	beq.n	8006942 <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800688c:	7dbb      	ldrb	r3, [r7, #22]
 800688e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006892:	2b00      	cmp	r3, #0
 8006894:	d010      	beq.n	80068b8 <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	7b5b      	ldrb	r3, [r3, #13]
 800689a:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800689c:	7dbb      	ldrb	r3, [r7, #22]
 800689e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068a2:	75bb      	strb	r3, [r7, #22]
 80068a4:	7dbb      	ldrb	r3, [r7, #22]
 80068a6:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068ae:	88da      	ldrh	r2, [r3, #6]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068b6:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 80068b8:	7dba      	ldrb	r2, [r7, #22]
 80068ba:	7d7b      	ldrb	r3, [r7, #21]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d114      	bne.n	80068ea <dir_find+0x116>
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	330d      	adds	r3, #13
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	7d3a      	ldrb	r2, [r7, #20]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d10e      	bne.n	80068ea <dir_find+0x116>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068d2:	6a1b      	ldr	r3, [r3, #32]
 80068d4:	6939      	ldr	r1, [r7, #16]
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7ff fdec 	bl	80064b4 <cmp_lfn>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d003      	beq.n	80068ea <dir_find+0x116>
 80068e2:	7d7b      	ldrb	r3, [r7, #21]
 80068e4:	3b01      	subs	r3, #1
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	e000      	b.n	80068ec <dir_find+0x118>
 80068ea:	23ff      	movs	r3, #255	; 0xff
 80068ec:	757b      	strb	r3, [r7, #21]
 80068ee:	e028      	b.n	8006942 <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80068f0:	7d7b      	ldrb	r3, [r7, #21]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d107      	bne.n	8006906 <dir_find+0x132>
 80068f6:	6938      	ldr	r0, [r7, #16]
 80068f8:	f7ff ff4c 	bl	8006794 <sum_sfn>
 80068fc:	4603      	mov	r3, r0
 80068fe:	461a      	mov	r2, r3
 8006900:	7d3b      	ldrb	r3, [r7, #20]
 8006902:	4293      	cmp	r3, r2
 8006904:	d02a      	beq.n	800695c <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	330b      	adds	r3, #11
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b00      	cmp	r3, #0
 8006918:	d10b      	bne.n	8006932 <dir_find+0x15e>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	220b      	movs	r2, #11
 8006924:	4619      	mov	r1, r3
 8006926:	6938      	ldr	r0, [r7, #16]
 8006928:	f7fe fc0c 	bl	8005144 <mem_cmp>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d016      	beq.n	8006960 <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006932:	23ff      	movs	r3, #255	; 0xff
 8006934:	757b      	strb	r3, [r7, #21]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800693c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006940:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8006942:	2100      	movs	r1, #0
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f7ff fbc8 	bl	80060da <dir_next>
 800694a:	4603      	mov	r3, r0
 800694c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800694e:	7dfb      	ldrb	r3, [r7, #23]
 8006950:	2b00      	cmp	r3, #0
 8006952:	f43f af58 	beq.w	8006806 <dir_find+0x32>
 8006956:	e004      	b.n	8006962 <dir_find+0x18e>
		if (res != FR_OK) break;
 8006958:	bf00      	nop
 800695a:	e002      	b.n	8006962 <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800695c:	bf00      	nop
 800695e:	e000      	b.n	8006962 <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8006960:	bf00      	nop

	return res;
 8006962:	7dfb      	ldrb	r3, [r7, #23]
}
 8006964:	4618      	mov	r0, r3
 8006966:	3718      	adds	r7, #24
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b08c      	sub	sp, #48	; 0x30
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	623b      	str	r3, [r7, #32]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006984:	6a1b      	ldr	r3, [r3, #32]
 8006986:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8006988:	f107 030c 	add.w	r3, r7, #12
 800698c:	220c      	movs	r2, #12
 800698e:	6a39      	ldr	r1, [r7, #32]
 8006990:	4618      	mov	r0, r3
 8006992:	f7fe fb9f 	bl	80050d4 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006996:	7dfb      	ldrb	r3, [r7, #23]
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	2b00      	cmp	r3, #0
 800699e:	d03b      	beq.n	8006a18 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 80069a0:	6a3b      	ldr	r3, [r7, #32]
 80069a2:	330b      	adds	r3, #11
 80069a4:	2200      	movs	r2, #0
 80069a6:	701a      	strb	r2, [r3, #0]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069ae:	461a      	mov	r2, r3
 80069b0:	2300      	movs	r3, #0
 80069b2:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 80069b4:	2301      	movs	r3, #1
 80069b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80069b8:	e013      	b.n	80069e2 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 80069ba:	f107 010c 	add.w	r1, r7, #12
 80069be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c0:	69fa      	ldr	r2, [r7, #28]
 80069c2:	6a38      	ldr	r0, [r7, #32]
 80069c4:	f7ff fe58 	bl	8006678 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f7ff ff03 	bl	80067d4 <dir_find>
 80069ce:	4603      	mov	r3, r0
 80069d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80069d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d106      	bne.n	80069ea <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 80069dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069de:	3301      	adds	r3, #1
 80069e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80069e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e4:	2b63      	cmp	r3, #99	; 0x63
 80069e6:	d9e8      	bls.n	80069ba <dir_register+0x4e>
 80069e8:	e000      	b.n	80069ec <dir_register+0x80>
			if (res != FR_OK) break;
 80069ea:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80069ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ee:	2b64      	cmp	r3, #100	; 0x64
 80069f0:	d101      	bne.n	80069f6 <dir_register+0x8a>
 80069f2:	2307      	movs	r3, #7
 80069f4:	e0d8      	b.n	8006ba8 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80069f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80069fa:	2b04      	cmp	r3, #4
 80069fc:	d002      	beq.n	8006a04 <dir_register+0x98>
 80069fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a02:	e0d1      	b.n	8006ba8 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8006a04:	6a3b      	ldr	r3, [r7, #32]
 8006a06:	330b      	adds	r3, #11
 8006a08:	7dfa      	ldrb	r2, [r7, #23]
 8006a0a:	701a      	strb	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a12:	461a      	mov	r2, r3
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8006a18:	7dfb      	ldrb	r3, [r7, #23]
 8006a1a:	f003 0302 	and.w	r3, r3, #2
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d014      	beq.n	8006a4c <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 8006a22:	2300      	movs	r3, #0
 8006a24:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a26:	e002      	b.n	8006a2e <dir_register+0xc2>
 8006a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a30:	005b      	lsls	r3, r3, #1
 8006a32:	69fa      	ldr	r2, [r7, #28]
 8006a34:	4413      	add	r3, r2
 8006a36:	881b      	ldrh	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1f5      	bne.n	8006a28 <dir_register+0xbc>
		nent = (n + 25) / 13;
 8006a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3e:	3319      	adds	r3, #25
 8006a40:	4a5b      	ldr	r2, [pc, #364]	; (8006bb0 <dir_register+0x244>)
 8006a42:	fba2 2303 	umull	r2, r3, r2, r3
 8006a46:	089b      	lsrs	r3, r3, #2
 8006a48:	627b      	str	r3, [r7, #36]	; 0x24
 8006a4a:	e001      	b.n	8006a50 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006a50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f7ff fc8b 	bl	800636e <dir_alloc>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006a5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d15b      	bne.n	8006b1e <dir_register+0x1b2>
 8006a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d055      	beq.n	8006b1e <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a78:	88db      	ldrh	r3, [r3, #6]
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	4619      	mov	r1, r3
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f7ff fa5b 	bl	8005f3e <dir_sdi>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006a8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d143      	bne.n	8006b1e <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7ff fe78 	bl	8006794 <sum_sfn>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	4619      	mov	r1, r3
 8006aba:	4610      	mov	r0, r2
 8006abc:	f7fe fd92 	bl	80055e4 <move_window>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006ac6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d126      	bne.n	8006b1c <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ad4:	6a18      	ldr	r0, [r3, #32]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006adc:	6959      	ldr	r1, [r3, #20]
 8006ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae0:	b2da      	uxtb	r2, r3
 8006ae2:	7efb      	ldrb	r3, [r7, #27]
 8006ae4:	f7ff fd54 	bl	8006590 <fit_lfn>
				dp->fs->wflag = 1;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006af4:	2201      	movs	r2, #1
 8006af6:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8006af8:	2100      	movs	r1, #0
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7ff faed 	bl	80060da <dir_next>
 8006b00:	4603      	mov	r3, r0
 8006b02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006b06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d107      	bne.n	8006b1e <dir_register+0x1b2>
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b10:	3b01      	subs	r3, #1
 8006b12:	627b      	str	r3, [r7, #36]	; 0x24
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1c6      	bne.n	8006aa8 <dir_register+0x13c>
 8006b1a:	e000      	b.n	8006b1e <dir_register+0x1b2>
				if (res != FR_OK) break;
 8006b1c:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8006b1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d13e      	bne.n	8006ba4 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	4619      	mov	r1, r3
 8006b38:	4610      	mov	r0, r2
 8006b3a:	f7fe fd53 	bl	80055e4 <move_window>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006b44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d12b      	bne.n	8006ba4 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b52:	695b      	ldr	r3, [r3, #20]
 8006b54:	2220      	movs	r2, #32
 8006b56:	2100      	movs	r1, #0
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7fe fad9 	bl	8005110 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b64:	6958      	ldr	r0, [r3, #20]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	220b      	movs	r2, #11
 8006b70:	4619      	mov	r1, r3
 8006b72:	f7fe faaf 	bl	80050d4 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	330b      	adds	r3, #11
 8006b80:	781a      	ldrb	r2, [r3, #0]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	330c      	adds	r3, #12
 8006b8c:	f002 0218 	and.w	r2, r2, #24
 8006b90:	b2d2      	uxtb	r2, r2
 8006b92:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8006ba4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3730      	adds	r7, #48	; 0x30
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	4ec4ec4f 	.word	0x4ec4ec4f

08006bb4 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b08a      	sub	sp, #40	; 0x28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	613b      	str	r3, [r7, #16]
 8006bc4:	e002      	b.n	8006bcc <create_name+0x18>
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	613b      	str	r3, [r7, #16]
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	2b2f      	cmp	r3, #47	; 0x2f
 8006bd2:	d0f8      	beq.n	8006bc6 <create_name+0x12>
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	2b5c      	cmp	r3, #92	; 0x5c
 8006bda:	d0f4      	beq.n	8006bc6 <create_name+0x12>
	lfn = dp->lfn;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006be2:	6a1b      	ldr	r3, [r3, #32]
 8006be4:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8006be6:	2300      	movs	r3, #0
 8006be8:	617b      	str	r3, [r7, #20]
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	1c5a      	adds	r2, r3, #1
 8006bf2:	61ba      	str	r2, [r7, #24]
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8006bfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bfe:	2b1f      	cmp	r3, #31
 8006c00:	d92f      	bls.n	8006c62 <create_name+0xae>
 8006c02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c04:	2b2f      	cmp	r3, #47	; 0x2f
 8006c06:	d02c      	beq.n	8006c62 <create_name+0xae>
 8006c08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c0a:	2b5c      	cmp	r3, #92	; 0x5c
 8006c0c:	d029      	beq.n	8006c62 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	2bfe      	cmp	r3, #254	; 0xfe
 8006c12:	d901      	bls.n	8006c18 <create_name+0x64>
			return FR_INVALID_NAME;
 8006c14:	2306      	movs	r3, #6
 8006c16:	e186      	b.n	8006f26 <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006c18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006c1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c20:	2101      	movs	r1, #1
 8006c22:	4618      	mov	r0, r3
 8006c24:	f001 fffa 	bl	8008c1c <ff_convert>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006c2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <create_name+0x82>
 8006c32:	2306      	movs	r3, #6
 8006c34:	e177      	b.n	8006f26 <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8006c36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c38:	2b7f      	cmp	r3, #127	; 0x7f
 8006c3a:	d809      	bhi.n	8006c50 <create_name+0x9c>
 8006c3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c3e:	4619      	mov	r1, r3
 8006c40:	488e      	ldr	r0, [pc, #568]	; (8006e7c <create_name+0x2c8>)
 8006c42:	f7fe faa5 	bl	8005190 <chk_chr>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d001      	beq.n	8006c50 <create_name+0x9c>
			return FR_INVALID_NAME;
 8006c4c:	2306      	movs	r3, #6
 8006c4e:	e16a      	b.n	8006f26 <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	1c5a      	adds	r2, r3, #1
 8006c54:	617a      	str	r2, [r7, #20]
 8006c56:	005b      	lsls	r3, r3, #1
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006c5e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006c60:	e7c5      	b.n	8006bee <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	441a      	add	r2, r3
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8006c6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c6e:	2b1f      	cmp	r3, #31
 8006c70:	d801      	bhi.n	8006c76 <create_name+0xc2>
 8006c72:	2304      	movs	r3, #4
 8006c74:	e000      	b.n	8006c78 <create_name+0xc4>
 8006c76:	2300      	movs	r3, #0
 8006c78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8006c7c:	e011      	b.n	8006ca2 <create_name+0xee>
		w = lfn[di - 1];
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006c84:	3b01      	subs	r3, #1
 8006c86:	005b      	lsls	r3, r3, #1
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	881b      	ldrh	r3, [r3, #0]
 8006c8e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006c90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c92:	2b20      	cmp	r3, #32
 8006c94:	d002      	beq.n	8006c9c <create_name+0xe8>
 8006c96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c98:	2b2e      	cmp	r3, #46	; 0x2e
 8006c9a:	d106      	bne.n	8006caa <create_name+0xf6>
		di--;
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d1ea      	bne.n	8006c7e <create_name+0xca>
 8006ca8:	e000      	b.n	8006cac <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 8006caa:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d101      	bne.n	8006cb6 <create_name+0x102>
 8006cb2:	2306      	movs	r3, #6
 8006cb4:	e137      	b.n	8006f26 <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	005b      	lsls	r3, r3, #1
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	220b      	movs	r2, #11
 8006ccc:	2120      	movs	r1, #32
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7fe fa1e 	bl	8005110 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	61bb      	str	r3, [r7, #24]
 8006cd8:	e002      	b.n	8006ce0 <create_name+0x12c>
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	61bb      	str	r3, [r7, #24]
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	005b      	lsls	r3, r3, #1
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	881b      	ldrh	r3, [r3, #0]
 8006cea:	2b20      	cmp	r3, #32
 8006cec:	d0f5      	beq.n	8006cda <create_name+0x126>
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	005b      	lsls	r3, r3, #1
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	881b      	ldrh	r3, [r3, #0]
 8006cf8:	2b2e      	cmp	r3, #46	; 0x2e
 8006cfa:	d0ee      	beq.n	8006cda <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d009      	beq.n	8006d16 <create_name+0x162>
 8006d02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d06:	f043 0303 	orr.w	r3, r3, #3
 8006d0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006d0e:	e002      	b.n	8006d16 <create_name+0x162>
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	3b01      	subs	r3, #1
 8006d14:	617b      	str	r3, [r7, #20]
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d009      	beq.n	8006d30 <create_name+0x17c>
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006d22:	3b01      	subs	r3, #1
 8006d24:	005b      	lsls	r3, r3, #1
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	4413      	add	r3, r2
 8006d2a:	881b      	ldrh	r3, [r3, #0]
 8006d2c:	2b2e      	cmp	r3, #46	; 0x2e
 8006d2e:	d1ef      	bne.n	8006d10 <create_name+0x15c>

	b = i = 0; ni = 8;
 8006d30:	2300      	movs	r3, #0
 8006d32:	623b      	str	r3, [r7, #32]
 8006d34:	2300      	movs	r3, #0
 8006d36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006d3a:	2308      	movs	r3, #8
 8006d3c:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	1c5a      	adds	r2, r3, #1
 8006d42:	61ba      	str	r2, [r7, #24]
 8006d44:	005b      	lsls	r3, r3, #1
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	4413      	add	r3, r2
 8006d4a:	881b      	ldrh	r3, [r3, #0]
 8006d4c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006d4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f000 8091 	beq.w	8006e78 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006d56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d58:	2b20      	cmp	r3, #32
 8006d5a:	d006      	beq.n	8006d6a <create_name+0x1b6>
 8006d5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d5e:	2b2e      	cmp	r3, #46	; 0x2e
 8006d60:	d10a      	bne.n	8006d78 <create_name+0x1c4>
 8006d62:	69ba      	ldr	r2, [r7, #24]
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d006      	beq.n	8006d78 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 8006d6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d6e:	f043 0303 	orr.w	r3, r3, #3
 8006d72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d76:	e07e      	b.n	8006e76 <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006d78:	6a3a      	ldr	r2, [r7, #32]
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d203      	bcs.n	8006d88 <create_name+0x1d4>
 8006d80:	69ba      	ldr	r2, [r7, #24]
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d123      	bne.n	8006dd0 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	2b0b      	cmp	r3, #11
 8006d8c:	d106      	bne.n	8006d9c <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 8006d8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d92:	f043 0303 	orr.w	r3, r3, #3
 8006d96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d9a:	e076      	b.n	8006e8a <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006d9c:	69ba      	ldr	r2, [r7, #24]
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d005      	beq.n	8006db0 <create_name+0x1fc>
 8006da4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006da8:	f043 0303 	orr.w	r3, r3, #3
 8006dac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8006db0:	69ba      	ldr	r2, [r7, #24]
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d867      	bhi.n	8006e88 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	61bb      	str	r3, [r7, #24]
 8006dbc:	2308      	movs	r3, #8
 8006dbe:	623b      	str	r3, [r7, #32]
 8006dc0:	230b      	movs	r3, #11
 8006dc2:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006dc4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006dce:	e052      	b.n	8006e76 <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006dd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006dd2:	2b7f      	cmp	r3, #127	; 0x7f
 8006dd4:	d914      	bls.n	8006e00 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006dd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006dd8:	2100      	movs	r1, #0
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f001 ff1e 	bl	8008c1c <ff_convert>
 8006de0:	4603      	mov	r3, r0
 8006de2:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006de4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d004      	beq.n	8006df4 <create_name+0x240>
 8006dea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006dec:	3b80      	subs	r3, #128	; 0x80
 8006dee:	4a24      	ldr	r2, [pc, #144]	; (8006e80 <create_name+0x2cc>)
 8006df0:	5cd3      	ldrb	r3, [r2, r3]
 8006df2:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006df4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006df8:	f043 0302 	orr.w	r3, r3, #2
 8006dfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006e00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d007      	beq.n	8006e16 <create_name+0x262>
 8006e06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e08:	4619      	mov	r1, r3
 8006e0a:	481e      	ldr	r0, [pc, #120]	; (8006e84 <create_name+0x2d0>)
 8006e0c:	f7fe f9c0 	bl	8005190 <chk_chr>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d008      	beq.n	8006e28 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006e16:	235f      	movs	r3, #95	; 0x5f
 8006e18:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006e1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e1e:	f043 0303 	orr.w	r3, r3, #3
 8006e22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006e26:	e01b      	b.n	8006e60 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006e28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e2a:	2b40      	cmp	r3, #64	; 0x40
 8006e2c:	d909      	bls.n	8006e42 <create_name+0x28e>
 8006e2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e30:	2b5a      	cmp	r3, #90	; 0x5a
 8006e32:	d806      	bhi.n	8006e42 <create_name+0x28e>
					b |= 2;
 8006e34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006e38:	f043 0302 	orr.w	r3, r3, #2
 8006e3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006e40:	e00e      	b.n	8006e60 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006e42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e44:	2b60      	cmp	r3, #96	; 0x60
 8006e46:	d90b      	bls.n	8006e60 <create_name+0x2ac>
 8006e48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e4a:	2b7a      	cmp	r3, #122	; 0x7a
 8006e4c:	d808      	bhi.n	8006e60 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 8006e4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006e52:	f043 0301 	orr.w	r3, r3, #1
 8006e56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006e5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e5c:	3b20      	subs	r3, #32
 8006e5e:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e66:	699a      	ldr	r2, [r3, #24]
 8006e68:	6a3b      	ldr	r3, [r7, #32]
 8006e6a:	1c59      	adds	r1, r3, #1
 8006e6c:	6239      	str	r1, [r7, #32]
 8006e6e:	4413      	add	r3, r2
 8006e70:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006e72:	b2d2      	uxtb	r2, r2
 8006e74:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8006e76:	e762      	b.n	8006d3e <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 8006e78:	bf00      	nop
 8006e7a:	e006      	b.n	8006e8a <create_name+0x2d6>
 8006e7c:	0800c96c 	.word	0x0800c96c
 8006e80:	0800c9f4 	.word	0x0800c9f4
 8006e84:	0800c978 	.word	0x0800c978
			if (si > di) break;			/* No extension */
 8006e88:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	2be5      	cmp	r3, #229	; 0xe5
 8006e96:	d105      	bne.n	8006ea4 <create_name+0x2f0>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	2205      	movs	r2, #5
 8006ea2:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	2b08      	cmp	r3, #8
 8006ea8:	d104      	bne.n	8006eb4 <create_name+0x300>
 8006eaa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8006eb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006eb8:	f003 030c 	and.w	r3, r3, #12
 8006ebc:	2b0c      	cmp	r3, #12
 8006ebe:	d005      	beq.n	8006ecc <create_name+0x318>
 8006ec0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ec4:	f003 0303 	and.w	r3, r3, #3
 8006ec8:	2b03      	cmp	r3, #3
 8006eca:	d105      	bne.n	8006ed8 <create_name+0x324>
		cf |= NS_LFN;
 8006ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ed0:	f043 0302 	orr.w	r3, r3, #2
 8006ed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006ed8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006edc:	f003 0302 	and.w	r3, r3, #2
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d117      	bne.n	8006f14 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006ee4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ee8:	f003 0303 	and.w	r3, r3, #3
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d105      	bne.n	8006efc <create_name+0x348>
 8006ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ef4:	f043 0310 	orr.w	r3, r3, #16
 8006ef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006efc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006f00:	f003 030c 	and.w	r3, r3, #12
 8006f04:	2b04      	cmp	r3, #4
 8006f06:	d105      	bne.n	8006f14 <create_name+0x360>
 8006f08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f0c:	f043 0308 	orr.w	r3, r3, #8
 8006f10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f1a:	699b      	ldr	r3, [r3, #24]
 8006f1c:	330b      	adds	r3, #11
 8006f1e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006f22:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006f24:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3728      	adds	r7, #40	; 0x28
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop

08006f30 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	2b2f      	cmp	r3, #47	; 0x2f
 8006f40:	d003      	beq.n	8006f4a <follow_path+0x1a>
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	2b5c      	cmp	r3, #92	; 0x5c
 8006f48:	d102      	bne.n	8006f50 <follow_path+0x20>
		path++;
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f56:	461a      	mov	r2, r3
 8006f58:	2300      	movs	r3, #0
 8006f5a:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	2b1f      	cmp	r3, #31
 8006f62:	d80c      	bhi.n	8006f7e <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8006f64:	2100      	movs	r1, #0
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f7fe ffe9 	bl	8005f3e <dir_sdi>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f76:	461a      	mov	r2, r3
 8006f78:	2300      	movs	r3, #0
 8006f7a:	6153      	str	r3, [r2, #20]
 8006f7c:	e049      	b.n	8007012 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006f7e:	463b      	mov	r3, r7
 8006f80:	4619      	mov	r1, r3
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f7ff fe16 	bl	8006bb4 <create_name>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006f8c:	7bfb      	ldrb	r3, [r7, #15]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d13a      	bne.n	8007008 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f7ff fc1e 	bl	80067d4 <dir_find>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	7adb      	ldrb	r3, [r3, #11]
 8006fa6:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8006fa8:	7bfb      	ldrb	r3, [r7, #15]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00a      	beq.n	8006fc4 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006fae:	7bfb      	ldrb	r3, [r7, #15]
 8006fb0:	2b04      	cmp	r3, #4
 8006fb2:	d12b      	bne.n	800700c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006fb4:	7bbb      	ldrb	r3, [r7, #14]
 8006fb6:	f003 0304 	and.w	r3, r3, #4
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d126      	bne.n	800700c <follow_path+0xdc>
 8006fbe:	2305      	movs	r3, #5
 8006fc0:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8006fc2:	e023      	b.n	800700c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006fc4:	7bbb      	ldrb	r3, [r7, #14]
 8006fc6:	f003 0304 	and.w	r3, r3, #4
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d120      	bne.n	8007010 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	330b      	adds	r3, #11
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	f003 0310 	and.w	r3, r3, #16
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d102      	bne.n	8006fec <follow_path+0xbc>
				res = FR_NO_PATH; break;
 8006fe6:	2305      	movs	r3, #5
 8006fe8:	73fb      	strb	r3, [r7, #15]
 8006fea:	e012      	b.n	8007012 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68b9      	ldr	r1, [r7, #8]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7ff fa07 	bl	800640a <ld_clust>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007004:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007006:	e7ba      	b.n	8006f7e <follow_path+0x4e>
			if (res != FR_OK) break;
 8007008:	bf00      	nop
 800700a:	e002      	b.n	8007012 <follow_path+0xe2>
				break;
 800700c:	bf00      	nop
 800700e:	e000      	b.n	8007012 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007010:	bf00      	nop
		}
	}

	return res;
 8007012:	7bfb      	ldrb	r3, [r7, #15]
}
 8007014:	4618      	mov	r0, r3
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800701c:	b480      	push	{r7}
 800701e:	b087      	sub	sp, #28
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007024:	f04f 33ff 	mov.w	r3, #4294967295
 8007028:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d031      	beq.n	8007096 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	617b      	str	r3, [r7, #20]
 8007038:	e002      	b.n	8007040 <get_ldnumber+0x24>
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	3301      	adds	r3, #1
 800703e:	617b      	str	r3, [r7, #20]
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	2b1f      	cmp	r3, #31
 8007046:	d903      	bls.n	8007050 <get_ldnumber+0x34>
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	2b3a      	cmp	r3, #58	; 0x3a
 800704e:	d1f4      	bne.n	800703a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	2b3a      	cmp	r3, #58	; 0x3a
 8007056:	d11c      	bne.n	8007092 <get_ldnumber+0x76>
			tp = *path;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	1c5a      	adds	r2, r3, #1
 8007062:	60fa      	str	r2, [r7, #12]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	3b30      	subs	r3, #48	; 0x30
 8007068:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	2b09      	cmp	r3, #9
 800706e:	d80e      	bhi.n	800708e <get_ldnumber+0x72>
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	429a      	cmp	r2, r3
 8007076:	d10a      	bne.n	800708e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d107      	bne.n	800708e <get_ldnumber+0x72>
					vol = (int)i;
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	3301      	adds	r3, #1
 8007086:	617b      	str	r3, [r7, #20]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	697a      	ldr	r2, [r7, #20]
 800708c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	e002      	b.n	8007098 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007092:	2300      	movs	r3, #0
 8007094:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007096:	693b      	ldr	r3, [r7, #16]
}
 8007098:	4618      	mov	r0, r3
 800709a:	371c      	adds	r7, #28
 800709c:	46bd      	mov	sp, r7
 800709e:	bc80      	pop	{r7}
 80070a0:	4770      	bx	lr
	...

080070a4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070b4:	2200      	movs	r2, #0
 80070b6:	711a      	strb	r2, [r3, #4]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070be:	461a      	mov	r2, r3
 80070c0:	f04f 33ff 	mov.w	r3, #4294967295
 80070c4:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80070c6:	6839      	ldr	r1, [r7, #0]
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f7fe fa8b 	bl	80055e4 <move_window>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d001      	beq.n	80070d8 <check_fs+0x34>
		return 3;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e04a      	b.n	800716e <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80070de:	3301      	adds	r3, #1
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	021b      	lsls	r3, r3, #8
 80070e4:	b21a      	sxth	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80070ec:	b21b      	sxth	r3, r3
 80070ee:	4313      	orrs	r3, r2
 80070f0:	b21b      	sxth	r3, r3
 80070f2:	4a21      	ldr	r2, [pc, #132]	; (8007178 <check_fs+0xd4>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d001      	beq.n	80070fc <check_fs+0x58>
		return 2;
 80070f8:	2302      	movs	r3, #2
 80070fa:	e038      	b.n	800716e <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	3336      	adds	r3, #54	; 0x36
 8007100:	3303      	adds	r3, #3
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	061a      	lsls	r2, r3, #24
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	3336      	adds	r3, #54	; 0x36
 800710a:	3302      	adds	r3, #2
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	041b      	lsls	r3, r3, #16
 8007110:	4313      	orrs	r3, r2
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	3236      	adds	r2, #54	; 0x36
 8007116:	3201      	adds	r2, #1
 8007118:	7812      	ldrb	r2, [r2, #0]
 800711a:	0212      	lsls	r2, r2, #8
 800711c:	4313      	orrs	r3, r2
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8007124:	4313      	orrs	r3, r2
 8007126:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800712a:	4a14      	ldr	r2, [pc, #80]	; (800717c <check_fs+0xd8>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d101      	bne.n	8007134 <check_fs+0x90>
		return 0;
 8007130:	2300      	movs	r3, #0
 8007132:	e01c      	b.n	800716e <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	3352      	adds	r3, #82	; 0x52
 8007138:	3303      	adds	r3, #3
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	061a      	lsls	r2, r3, #24
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	3352      	adds	r3, #82	; 0x52
 8007142:	3302      	adds	r3, #2
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	041b      	lsls	r3, r3, #16
 8007148:	4313      	orrs	r3, r2
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	3252      	adds	r2, #82	; 0x52
 800714e:	3201      	adds	r2, #1
 8007150:	7812      	ldrb	r2, [r2, #0]
 8007152:	0212      	lsls	r2, r2, #8
 8007154:	4313      	orrs	r3, r2
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800715c:	4313      	orrs	r3, r2
 800715e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007162:	4a06      	ldr	r2, [pc, #24]	; (800717c <check_fs+0xd8>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d101      	bne.n	800716c <check_fs+0xc8>
		return 0;
 8007168:	2300      	movs	r3, #0
 800716a:	e000      	b.n	800716e <check_fs+0xca>

	return 1;
 800716c:	2301      	movs	r3, #1
}
 800716e:	4618      	mov	r0, r3
 8007170:	3708      	adds	r7, #8
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	ffffaa55 	.word	0xffffaa55
 800717c:	00544146 	.word	0x00544146

08007180 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b096      	sub	sp, #88	; 0x58
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	4613      	mov	r3, r2
 800718c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2200      	movs	r2, #0
 8007192:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007194:	68b8      	ldr	r0, [r7, #8]
 8007196:	f7ff ff41 	bl	800701c <get_ldnumber>
 800719a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800719c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800719e:	2b00      	cmp	r3, #0
 80071a0:	da01      	bge.n	80071a6 <find_volume+0x26>
 80071a2:	230b      	movs	r3, #11
 80071a4:	e311      	b.n	80077ca <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80071a6:	4a98      	ldr	r2, [pc, #608]	; (8007408 <find_volume+0x288>)
 80071a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071ae:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80071b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d101      	bne.n	80071ba <find_volume+0x3a>
 80071b6:	230c      	movs	r3, #12
 80071b8:	e307      	b.n	80077ca <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071be:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80071c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d01c      	beq.n	8007206 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80071cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071d2:	785b      	ldrb	r3, [r3, #1]
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7fd fedf 	bl	8004f98 <disk_status>
 80071da:	4603      	mov	r3, r0
 80071dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80071e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80071e4:	f003 0301 	and.w	r3, r3, #1
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10c      	bne.n	8007206 <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80071ec:	79fb      	ldrb	r3, [r7, #7]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d007      	beq.n	8007202 <find_volume+0x82>
 80071f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80071f6:	f003 0304 	and.w	r3, r3, #4
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d001      	beq.n	8007202 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80071fe:	230a      	movs	r3, #10
 8007200:	e2e3      	b.n	80077ca <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 8007202:	2300      	movs	r3, #0
 8007204:	e2e1      	b.n	80077ca <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800720c:	2200      	movs	r2, #0
 800720e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007212:	b2da      	uxtb	r2, r3
 8007214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800721a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800721c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007222:	785b      	ldrb	r3, [r3, #1]
 8007224:	4618      	mov	r0, r3
 8007226:	f7fd fed1 	bl	8004fcc <disk_initialize>
 800722a:	4603      	mov	r3, r0
 800722c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8007230:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007234:	f003 0301 	and.w	r3, r3, #1
 8007238:	2b00      	cmp	r3, #0
 800723a:	d001      	beq.n	8007240 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800723c:	2303      	movs	r3, #3
 800723e:	e2c4      	b.n	80077ca <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8007240:	79fb      	ldrb	r3, [r7, #7]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d007      	beq.n	8007256 <find_volume+0xd6>
 8007246:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800724a:	f003 0304 	and.w	r3, r3, #4
 800724e:	2b00      	cmp	r3, #0
 8007250:	d001      	beq.n	8007256 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8007252:	230a      	movs	r3, #10
 8007254:	e2b9      	b.n	80077ca <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8007256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800725c:	7858      	ldrb	r0, [r3, #1]
 800725e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007264:	330a      	adds	r3, #10
 8007266:	461a      	mov	r2, r3
 8007268:	2102      	movs	r1, #2
 800726a:	f7fd ff15 	bl	8005098 <disk_ioctl>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10d      	bne.n	8007290 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8007274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800727a:	895b      	ldrh	r3, [r3, #10]
 800727c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007280:	d306      	bcc.n	8007290 <find_volume+0x110>
 8007282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007288:	895b      	ldrh	r3, [r3, #10]
 800728a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800728e:	d901      	bls.n	8007294 <find_volume+0x114>
 8007290:	2301      	movs	r3, #1
 8007292:	e29a      	b.n	80077ca <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8007294:	2300      	movs	r3, #0
 8007296:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8007298:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800729a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800729c:	f7ff ff02 	bl	80070a4 <check_fs>
 80072a0:	4603      	mov	r3, r0
 80072a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80072a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d153      	bne.n	8007356 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80072ae:	2300      	movs	r3, #0
 80072b0:	643b      	str	r3, [r7, #64]	; 0x40
 80072b2:	e028      	b.n	8007306 <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 80072b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072b8:	011b      	lsls	r3, r3, #4
 80072ba:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80072be:	4413      	add	r3, r2
 80072c0:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80072c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c4:	3304      	adds	r3, #4
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d012      	beq.n	80072f2 <find_volume+0x172>
 80072cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ce:	330b      	adds	r3, #11
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	061a      	lsls	r2, r3, #24
 80072d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d6:	330a      	adds	r3, #10
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	041b      	lsls	r3, r3, #16
 80072dc:	4313      	orrs	r3, r2
 80072de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072e0:	3209      	adds	r2, #9
 80072e2:	7812      	ldrb	r2, [r2, #0]
 80072e4:	0212      	lsls	r2, r2, #8
 80072e6:	4313      	orrs	r3, r2
 80072e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072ea:	3208      	adds	r2, #8
 80072ec:	7812      	ldrb	r2, [r2, #0]
 80072ee:	431a      	orrs	r2, r3
 80072f0:	e000      	b.n	80072f4 <find_volume+0x174>
 80072f2:	2200      	movs	r2, #0
 80072f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	3358      	adds	r3, #88	; 0x58
 80072fa:	443b      	add	r3, r7
 80072fc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007302:	3301      	adds	r3, #1
 8007304:	643b      	str	r3, [r7, #64]	; 0x40
 8007306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007308:	2b03      	cmp	r3, #3
 800730a:	d9d3      	bls.n	80072b4 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800730c:	2300      	movs	r3, #0
 800730e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007312:	2b00      	cmp	r3, #0
 8007314:	d002      	beq.n	800731c <find_volume+0x19c>
 8007316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007318:	3b01      	subs	r3, #1
 800731a:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800731c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	3358      	adds	r3, #88	; 0x58
 8007322:	443b      	add	r3, r7
 8007324:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007328:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800732a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800732c:	2b00      	cmp	r3, #0
 800732e:	d005      	beq.n	800733c <find_volume+0x1bc>
 8007330:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007332:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007334:	f7ff feb6 	bl	80070a4 <check_fs>
 8007338:	4603      	mov	r3, r0
 800733a:	e000      	b.n	800733e <find_volume+0x1be>
 800733c:	2302      	movs	r3, #2
 800733e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8007342:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007346:	2b00      	cmp	r3, #0
 8007348:	d005      	beq.n	8007356 <find_volume+0x1d6>
 800734a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800734c:	3301      	adds	r3, #1
 800734e:	643b      	str	r3, [r7, #64]	; 0x40
 8007350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007352:	2b03      	cmp	r3, #3
 8007354:	d9e2      	bls.n	800731c <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007356:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800735a:	2b03      	cmp	r3, #3
 800735c:	d101      	bne.n	8007362 <find_volume+0x1e2>
 800735e:	2301      	movs	r3, #1
 8007360:	e233      	b.n	80077ca <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8007362:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007366:	2b00      	cmp	r3, #0
 8007368:	d001      	beq.n	800736e <find_volume+0x1ee>
 800736a:	230d      	movs	r3, #13
 800736c:	e22d      	b.n	80077ca <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800736e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007370:	7b1b      	ldrb	r3, [r3, #12]
 8007372:	021b      	lsls	r3, r3, #8
 8007374:	b21a      	sxth	r2, r3
 8007376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007378:	7adb      	ldrb	r3, [r3, #11]
 800737a:	b21b      	sxth	r3, r3
 800737c:	4313      	orrs	r3, r2
 800737e:	b21a      	sxth	r2, r3
 8007380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007386:	895b      	ldrh	r3, [r3, #10]
 8007388:	b21b      	sxth	r3, r3
 800738a:	429a      	cmp	r2, r3
 800738c:	d001      	beq.n	8007392 <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 800738e:	230d      	movs	r3, #13
 8007390:	e21b      	b.n	80077ca <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8007392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007394:	7ddb      	ldrb	r3, [r3, #23]
 8007396:	021b      	lsls	r3, r3, #8
 8007398:	b21a      	sxth	r2, r3
 800739a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739c:	7d9b      	ldrb	r3, [r3, #22]
 800739e:	b21b      	sxth	r3, r3
 80073a0:	4313      	orrs	r3, r2
 80073a2:	b21b      	sxth	r3, r3
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80073a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d112      	bne.n	80073d4 <find_volume+0x254>
 80073ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80073b4:	061a      	lsls	r2, r3, #24
 80073b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80073bc:	041b      	lsls	r3, r3, #16
 80073be:	4313      	orrs	r3, r2
 80073c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073c2:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 80073c6:	0212      	lsls	r2, r2, #8
 80073c8:	4313      	orrs	r3, r2
 80073ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073cc:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80073d0:	4313      	orrs	r3, r2
 80073d2:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 80073d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073da:	461a      	mov	r2, r3
 80073dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073de:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80073e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e2:	7c1a      	ldrb	r2, [r3, #16]
 80073e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073ea:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80073ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073f2:	78db      	ldrb	r3, [r3, #3]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d009      	beq.n	800740c <find_volume+0x28c>
 80073f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073fe:	78db      	ldrb	r3, [r3, #3]
 8007400:	2b02      	cmp	r3, #2
 8007402:	d003      	beq.n	800740c <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 8007404:	230d      	movs	r3, #13
 8007406:	e1e0      	b.n	80077ca <find_volume+0x64a>
 8007408:	200023f8 	.word	0x200023f8
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800740c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007412:	78db      	ldrb	r3, [r3, #3]
 8007414:	461a      	mov	r2, r3
 8007416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007418:	fb02 f303 	mul.w	r3, r2, r3
 800741c:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800741e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007420:	7b5a      	ldrb	r2, [r3, #13]
 8007422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007428:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800742a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800742c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007430:	789b      	ldrb	r3, [r3, #2]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00c      	beq.n	8007450 <find_volume+0x2d0>
 8007436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800743c:	789b      	ldrb	r3, [r3, #2]
 800743e:	461a      	mov	r2, r3
 8007440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007446:	789b      	ldrb	r3, [r3, #2]
 8007448:	3b01      	subs	r3, #1
 800744a:	4013      	ands	r3, r2
 800744c:	2b00      	cmp	r3, #0
 800744e:	d001      	beq.n	8007454 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 8007450:	230d      	movs	r3, #13
 8007452:	e1ba      	b.n	80077ca <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8007454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007456:	7c9b      	ldrb	r3, [r3, #18]
 8007458:	021b      	lsls	r3, r3, #8
 800745a:	b21a      	sxth	r2, r3
 800745c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745e:	7c5b      	ldrb	r3, [r3, #17]
 8007460:	b21b      	sxth	r3, r3
 8007462:	4313      	orrs	r3, r2
 8007464:	b21b      	sxth	r3, r3
 8007466:	b29a      	uxth	r2, r3
 8007468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800746a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800746e:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8007470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007476:	891b      	ldrh	r3, [r3, #8]
 8007478:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800747a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800747e:	8952      	ldrh	r2, [r2, #10]
 8007480:	0952      	lsrs	r2, r2, #5
 8007482:	b292      	uxth	r2, r2
 8007484:	fbb3 f1f2 	udiv	r1, r3, r2
 8007488:	fb01 f202 	mul.w	r2, r1, r2
 800748c:	1a9b      	subs	r3, r3, r2
 800748e:	b29b      	uxth	r3, r3
 8007490:	2b00      	cmp	r3, #0
 8007492:	d001      	beq.n	8007498 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 8007494:	230d      	movs	r3, #13
 8007496:	e198      	b.n	80077ca <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8007498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749a:	7d1b      	ldrb	r3, [r3, #20]
 800749c:	021b      	lsls	r3, r3, #8
 800749e:	b21a      	sxth	r2, r3
 80074a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a2:	7cdb      	ldrb	r3, [r3, #19]
 80074a4:	b21b      	sxth	r3, r3
 80074a6:	4313      	orrs	r3, r2
 80074a8:	b21b      	sxth	r3, r3
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80074ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d112      	bne.n	80074da <find_volume+0x35a>
 80074b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80074ba:	061a      	lsls	r2, r3, #24
 80074bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074be:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80074c2:	041b      	lsls	r3, r3, #16
 80074c4:	4313      	orrs	r3, r2
 80074c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074c8:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80074cc:	0212      	lsls	r2, r2, #8
 80074ce:	4313      	orrs	r3, r2
 80074d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074d2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80074da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074dc:	7bdb      	ldrb	r3, [r3, #15]
 80074de:	021b      	lsls	r3, r3, #8
 80074e0:	b21a      	sxth	r2, r3
 80074e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e4:	7b9b      	ldrb	r3, [r3, #14]
 80074e6:	b21b      	sxth	r3, r3
 80074e8:	4313      	orrs	r3, r2
 80074ea:	b21b      	sxth	r3, r3
 80074ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80074ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <find_volume+0x378>
 80074f4:	230d      	movs	r3, #13
 80074f6:	e168      	b.n	80077ca <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80074f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80074fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074fc:	4413      	add	r3, r2
 80074fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007500:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007504:	8911      	ldrh	r1, [r2, #8]
 8007506:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007508:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800750c:	8952      	ldrh	r2, [r2, #10]
 800750e:	0952      	lsrs	r2, r2, #5
 8007510:	b292      	uxth	r2, r2
 8007512:	fbb1 f2f2 	udiv	r2, r1, r2
 8007516:	b292      	uxth	r2, r2
 8007518:	4413      	add	r3, r2
 800751a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800751c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800751e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007520:	429a      	cmp	r2, r3
 8007522:	d201      	bcs.n	8007528 <find_volume+0x3a8>
 8007524:	230d      	movs	r3, #13
 8007526:	e150      	b.n	80077ca <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8007528:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800752a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007530:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007534:	7892      	ldrb	r2, [r2, #2]
 8007536:	fbb3 f3f2 	udiv	r3, r3, r2
 800753a:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800753c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753e:	2b00      	cmp	r3, #0
 8007540:	d101      	bne.n	8007546 <find_volume+0x3c6>
 8007542:	230d      	movs	r3, #13
 8007544:	e141      	b.n	80077ca <find_volume+0x64a>
	fmt = FS_FAT12;
 8007546:	2301      	movs	r3, #1
 8007548:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800754c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007552:	4293      	cmp	r3, r2
 8007554:	d902      	bls.n	800755c <find_volume+0x3dc>
 8007556:	2302      	movs	r3, #2
 8007558:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800755c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007562:	4293      	cmp	r3, r2
 8007564:	d902      	bls.n	800756c <find_volume+0x3ec>
 8007566:	2303      	movs	r3, #3
 8007568:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756e:	3302      	adds	r3, #2
 8007570:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007572:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007576:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 8007578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800757e:	461a      	mov	r2, r3
 8007580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007582:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8007584:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007588:	4413      	add	r3, r2
 800758a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800758c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007590:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 8007592:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007596:	4413      	add	r3, r2
 8007598:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800759a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800759e:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 80075a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80075a4:	2b03      	cmp	r3, #3
 80075a6:	d124      	bne.n	80075f2 <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80075a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075ae:	891b      	ldrh	r3, [r3, #8]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d001      	beq.n	80075b8 <find_volume+0x438>
 80075b4:	230d      	movs	r3, #13
 80075b6:	e108      	b.n	80077ca <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80075b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ba:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80075be:	061a      	lsls	r2, r3, #24
 80075c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80075c6:	041b      	lsls	r3, r3, #16
 80075c8:	4313      	orrs	r3, r2
 80075ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075cc:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80075d0:	0212      	lsls	r2, r2, #8
 80075d2:	4313      	orrs	r3, r2
 80075d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075d6:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80075da:	4313      	orrs	r3, r2
 80075dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80075e2:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80075e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075ea:	695b      	ldr	r3, [r3, #20]
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	647b      	str	r3, [r7, #68]	; 0x44
 80075f0:	e02b      	b.n	800764a <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80075f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075f8:	891b      	ldrh	r3, [r3, #8]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d101      	bne.n	8007602 <find_volume+0x482>
 80075fe:	230d      	movs	r3, #13
 8007600:	e0e3      	b.n	80077ca <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8007602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007608:	6a1a      	ldr	r2, [r3, #32]
 800760a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800760c:	4413      	add	r3, r2
 800760e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007610:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007614:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007616:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800761a:	2b02      	cmp	r3, #2
 800761c:	d105      	bne.n	800762a <find_volume+0x4aa>
 800761e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007624:	695b      	ldr	r3, [r3, #20]
 8007626:	005b      	lsls	r3, r3, #1
 8007628:	e00e      	b.n	8007648 <find_volume+0x4c8>
 800762a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007630:	695a      	ldr	r2, [r3, #20]
 8007632:	4613      	mov	r3, r2
 8007634:	005b      	lsls	r3, r3, #1
 8007636:	4413      	add	r3, r2
 8007638:	085a      	lsrs	r2, r3, #1
 800763a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8007648:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800764a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007650:	699a      	ldr	r2, [r3, #24]
 8007652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007658:	895b      	ldrh	r3, [r3, #10]
 800765a:	4619      	mov	r1, r3
 800765c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800765e:	440b      	add	r3, r1
 8007660:	3b01      	subs	r3, #1
 8007662:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007664:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8007668:	8949      	ldrh	r1, [r1, #10]
 800766a:	fbb3 f3f1 	udiv	r3, r3, r1
 800766e:	429a      	cmp	r2, r3
 8007670:	d201      	bcs.n	8007676 <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 8007672:	230d      	movs	r3, #13
 8007674:	e0a9      	b.n	80077ca <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8007676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800767c:	461a      	mov	r2, r3
 800767e:	f04f 33ff 	mov.w	r3, #4294967295
 8007682:	6113      	str	r3, [r2, #16]
 8007684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800768e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007692:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8007694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800769a:	2280      	movs	r2, #128	; 0x80
 800769c:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800769e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80076a2:	2b03      	cmp	r3, #3
 80076a4:	d17a      	bne.n	800779c <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80076a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80076ac:	021b      	lsls	r3, r3, #8
 80076ae:	b21a      	sxth	r2, r3
 80076b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80076b6:	b21b      	sxth	r3, r3
 80076b8:	4313      	orrs	r3, r2
 80076ba:	b21b      	sxth	r3, r3
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d16d      	bne.n	800779c <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 80076c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076c2:	3301      	adds	r3, #1
 80076c4:	4619      	mov	r1, r3
 80076c6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80076c8:	f7fd ff8c 	bl	80055e4 <move_window>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d164      	bne.n	800779c <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 80076d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076d8:	2200      	movs	r2, #0
 80076da:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80076dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076de:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80076e2:	021b      	lsls	r3, r3, #8
 80076e4:	b21a      	sxth	r2, r3
 80076e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e8:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80076ec:	b21b      	sxth	r3, r3
 80076ee:	4313      	orrs	r3, r2
 80076f0:	b21b      	sxth	r3, r3
 80076f2:	4a38      	ldr	r2, [pc, #224]	; (80077d4 <find_volume+0x654>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d151      	bne.n	800779c <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80076f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076fa:	78db      	ldrb	r3, [r3, #3]
 80076fc:	061a      	lsls	r2, r3, #24
 80076fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007700:	789b      	ldrb	r3, [r3, #2]
 8007702:	041b      	lsls	r3, r3, #16
 8007704:	4313      	orrs	r3, r2
 8007706:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007708:	7852      	ldrb	r2, [r2, #1]
 800770a:	0212      	lsls	r2, r2, #8
 800770c:	4313      	orrs	r3, r2
 800770e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007710:	7812      	ldrb	r2, [r2, #0]
 8007712:	4313      	orrs	r3, r2
 8007714:	4a30      	ldr	r2, [pc, #192]	; (80077d8 <find_volume+0x658>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d140      	bne.n	800779c <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800771a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771c:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8007720:	061a      	lsls	r2, r3, #24
 8007722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007724:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8007728:	041b      	lsls	r3, r3, #16
 800772a:	4313      	orrs	r3, r2
 800772c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800772e:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8007732:	0212      	lsls	r2, r2, #8
 8007734:	4313      	orrs	r3, r2
 8007736:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007738:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800773c:	4313      	orrs	r3, r2
 800773e:	4a27      	ldr	r2, [pc, #156]	; (80077dc <find_volume+0x65c>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d12b      	bne.n	800779c <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8007744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007746:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800774a:	061a      	lsls	r2, r3, #24
 800774c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774e:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8007752:	041b      	lsls	r3, r3, #16
 8007754:	4313      	orrs	r3, r2
 8007756:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007758:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800775c:	0212      	lsls	r2, r2, #8
 800775e:	4313      	orrs	r3, r2
 8007760:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007762:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8007766:	4313      	orrs	r3, r2
 8007768:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800776a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800776e:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8007770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007772:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8007776:	061a      	lsls	r2, r3, #24
 8007778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777a:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800777e:	041b      	lsls	r3, r3, #16
 8007780:	4313      	orrs	r3, r2
 8007782:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007784:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8007788:	0212      	lsls	r2, r2, #8
 800778a:	4313      	orrs	r3, r2
 800778c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800778e:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8007792:	4313      	orrs	r3, r2
 8007794:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007796:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800779a:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800779c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800779e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077a2:	461a      	mov	r2, r3
 80077a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80077a8:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 80077aa:	4b0d      	ldr	r3, [pc, #52]	; (80077e0 <find_volume+0x660>)
 80077ac:	881b      	ldrh	r3, [r3, #0]
 80077ae:	3301      	adds	r3, #1
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	4b0b      	ldr	r3, [pc, #44]	; (80077e0 <find_volume+0x660>)
 80077b4:	801a      	strh	r2, [r3, #0]
 80077b6:	4b0a      	ldr	r3, [pc, #40]	; (80077e0 <find_volume+0x660>)
 80077b8:	881a      	ldrh	r2, [r3, #0]
 80077ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077c0:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80077c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80077c4:	f7fd fe92 	bl	80054ec <clear_lock>
#endif

	return FR_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3758      	adds	r7, #88	; 0x58
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	ffffaa55 	.word	0xffffaa55
 80077d8:	41615252 	.word	0x41615252
 80077dc:	61417272 	.word	0x61417272
 80077e0:	200023fc 	.word	0x200023fc

080077e4 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d02a      	beq.n	800784c <validate+0x68>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d024      	beq.n	800784c <validate+0x68>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d01b      	beq.n	800784c <validate+0x68>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007820:	88da      	ldrh	r2, [r3, #6]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007828:	889b      	ldrh	r3, [r3, #4]
 800782a:	429a      	cmp	r2, r3
 800782c:	d10e      	bne.n	800784c <validate+0x68>
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800783a:	785b      	ldrb	r3, [r3, #1]
 800783c:	4618      	mov	r0, r3
 800783e:	f7fd fbab 	bl	8004f98 <disk_status>
 8007842:	4603      	mov	r3, r0
 8007844:	f003 0301 	and.w	r3, r3, #1
 8007848:	2b00      	cmp	r3, #0
 800784a:	d001      	beq.n	8007850 <validate+0x6c>
		return FR_INVALID_OBJECT;
 800784c:	2309      	movs	r3, #9
 800784e:	e000      	b.n	8007852 <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3710      	adds	r7, #16
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
	...

0800785c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b088      	sub	sp, #32
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	4613      	mov	r3, r2
 8007868:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800786e:	f107 0310 	add.w	r3, r7, #16
 8007872:	4618      	mov	r0, r3
 8007874:	f7ff fbd2 	bl	800701c <get_ldnumber>
 8007878:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	2b00      	cmp	r3, #0
 800787e:	da01      	bge.n	8007884 <f_mount+0x28>
 8007880:	230b      	movs	r3, #11
 8007882:	e02f      	b.n	80078e4 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007884:	4a19      	ldr	r2, [pc, #100]	; (80078ec <f_mount+0x90>)
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800788c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d007      	beq.n	80078a4 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8007894:	69b8      	ldr	r0, [r7, #24]
 8007896:	f7fd fe29 	bl	80054ec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078a0:	2200      	movs	r2, #0
 80078a2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d004      	beq.n	80078b4 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078b0:	2200      	movs	r2, #0
 80078b2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	490d      	ldr	r1, [pc, #52]	; (80078ec <f_mount+0x90>)
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d002      	beq.n	80078ca <f_mount+0x6e>
 80078c4:	79fb      	ldrb	r3, [r7, #7]
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d001      	beq.n	80078ce <f_mount+0x72>
 80078ca:	2300      	movs	r3, #0
 80078cc:	e00a      	b.n	80078e4 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80078ce:	f107 0108 	add.w	r1, r7, #8
 80078d2:	f107 030c 	add.w	r3, r7, #12
 80078d6:	2200      	movs	r2, #0
 80078d8:	4618      	mov	r0, r3
 80078da:	f7ff fc51 	bl	8007180 <find_volume>
 80078de:	4603      	mov	r3, r0
 80078e0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80078e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3720      	adds	r7, #32
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	200023f8 	.word	0x200023f8

080078f0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 80078f6:	b086      	sub	sp, #24
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80078fe:	f843 0c4c 	str.w	r0, [r3, #-76]
 8007902:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007906:	f843 1c50 	str.w	r1, [r3, #-80]
 800790a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800790e:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8007912:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007916:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d101      	bne.n	8007922 <f_open+0x32>
 800791e:	2309      	movs	r3, #9
 8007920:	e2f7      	b.n	8007f12 <f_open+0x622>
	fp->fs = 0;			/* Clear file object */
 8007922:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007926:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800792a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800792e:	461a      	mov	r2, r3
 8007930:	2300      	movs	r3, #0
 8007932:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8007934:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007938:	461a      	mov	r2, r3
 800793a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800793e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007942:	f003 031f 	and.w	r3, r3, #31
 8007946:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800794a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800794e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007952:	f023 0301 	bic.w	r3, r3, #1
 8007956:	b2da      	uxtb	r2, r3
 8007958:	f107 0118 	add.w	r1, r7, #24
 800795c:	3910      	subs	r1, #16
 800795e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007962:	3b18      	subs	r3, #24
 8007964:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007968:	4618      	mov	r0, r3
 800796a:	f7ff fc09 	bl	8007180 <find_volume>
 800796e:	4603      	mov	r3, r0
 8007970:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007974:	f102 0217 	add.w	r2, r2, #23
 8007978:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800797a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800797e:	f103 0317 	add.w	r3, r3, #23
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	f040 82bf 	bne.w	8007f08 <f_open+0x618>
		INIT_BUF(dj);
 800798a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800798e:	461a      	mov	r2, r3
 8007990:	f107 0318 	add.w	r3, r7, #24
 8007994:	3b04      	subs	r3, #4
 8007996:	f8c2 3fe0 	str.w	r3, [r2, #4064]	; 0xfe0
 800799a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800799e:	461a      	mov	r2, r3
 80079a0:	4bd4      	ldr	r3, [pc, #848]	; (8007cf4 <f_open+0x404>)
 80079a2:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 80079a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80079aa:	f853 2c50 	ldr.w	r2, [r3, #-80]
 80079ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80079b2:	3b18      	subs	r3, #24
 80079b4:	4611      	mov	r1, r2
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7ff faba 	bl	8006f30 <follow_path>
 80079bc:	4603      	mov	r3, r0
 80079be:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80079c2:	f102 0217 	add.w	r2, r2, #23
 80079c6:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 80079c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80079cc:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 80079d0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80079d4:	f102 0210 	add.w	r2, r2, #16
 80079d8:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80079da:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80079de:	f103 0317 	add.w	r3, r3, #23
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d126      	bne.n	8007a36 <f_open+0x146>
			if (!dir)	/* Default directory itself */
 80079e8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80079ec:	f103 0310 	add.w	r3, r3, #16
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d106      	bne.n	8007a04 <f_open+0x114>
				res = FR_INVALID_NAME;
 80079f6:	2306      	movs	r3, #6
 80079f8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80079fc:	f102 0217 	add.w	r2, r2, #23
 8007a00:	7013      	strb	r3, [r2, #0]
 8007a02:	e018      	b.n	8007a36 <f_open+0x146>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007a04:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007a08:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007a0c:	f023 0301 	bic.w	r3, r3, #1
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	bf14      	ite	ne
 8007a14:	2301      	movne	r3, #1
 8007a16:	2300      	moveq	r3, #0
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007a20:	3b18      	subs	r3, #24
 8007a22:	4611      	mov	r1, r2
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7fd fbcd 	bl	80051c4 <chk_lock>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007a30:	f102 0217 	add.w	r2, r2, #23
 8007a34:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007a36:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007a3a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007a3e:	f003 031c 	and.w	r3, r3, #28
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f000 813c 	beq.w	8007cc0 <f_open+0x3d0>
			if (res != FR_OK) {					/* No file, create new */
 8007a48:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007a4c:	f103 0317 	add.w	r3, r3, #23
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d02e      	beq.n	8007ab4 <f_open+0x1c4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8007a56:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007a5a:	f103 0317 	add.w	r3, r3, #23
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	2b04      	cmp	r3, #4
 8007a62:	d112      	bne.n	8007a8a <f_open+0x19a>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007a64:	f7fd fc1e 	bl	80052a4 <enq_lock>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d007      	beq.n	8007a7e <f_open+0x18e>
 8007a6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007a72:	3b18      	subs	r3, #24
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7fe ff79 	bl	800696c <dir_register>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	e000      	b.n	8007a80 <f_open+0x190>
 8007a7e:	2312      	movs	r3, #18
 8007a80:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007a84:	f102 0217 	add.w	r2, r2, #23
 8007a88:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007a8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007a8e:	461a      	mov	r2, r3
 8007a90:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007a94:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007a98:	f043 0308 	orr.w	r3, r3, #8
 8007a9c:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 8007aa0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007aa4:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 8007aa8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007aac:	f102 0210 	add.w	r2, r2, #16
 8007ab0:	6013      	str	r3, [r2, #0]
 8007ab2:	e01f      	b.n	8007af4 <f_open+0x204>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007ab4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007ab8:	f103 0310 	add.w	r3, r3, #16
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	330b      	adds	r3, #11
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	f003 0311 	and.w	r3, r3, #17
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d006      	beq.n	8007ad8 <f_open+0x1e8>
					res = FR_DENIED;
 8007aca:	2307      	movs	r3, #7
 8007acc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007ad0:	f102 0217 	add.w	r2, r2, #23
 8007ad4:	7013      	strb	r3, [r2, #0]
 8007ad6:	e00d      	b.n	8007af4 <f_open+0x204>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8007ad8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007adc:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007ae0:	f003 0304 	and.w	r3, r3, #4
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d005      	beq.n	8007af4 <f_open+0x204>
						res = FR_EXIST;
 8007ae8:	2308      	movs	r3, #8
 8007aea:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007aee:	f102 0217 	add.w	r2, r2, #23
 8007af2:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007af4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007af8:	f103 0317 	add.w	r3, r3, #23
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	f040 8113 	bne.w	8007d2a <f_open+0x43a>
 8007b04:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007b08:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007b0c:	f003 0308 	and.w	r3, r3, #8
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f000 810a 	beq.w	8007d2a <f_open+0x43a>
				dw = GET_FATTIME();				/* Created time */
 8007b16:	f7fd f9e3 	bl	8004ee0 <get_fattime>
 8007b1a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b1e:	f103 030c 	add.w	r3, r3, #12
 8007b22:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8007b24:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b28:	f103 0310 	add.w	r3, r3, #16
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	330e      	adds	r3, #14
 8007b30:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007b34:	f102 020c 	add.w	r2, r2, #12
 8007b38:	6812      	ldr	r2, [r2, #0]
 8007b3a:	b2d2      	uxtb	r2, r2
 8007b3c:	701a      	strb	r2, [r3, #0]
 8007b3e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b42:	f103 030c 	add.w	r3, r3, #12
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	0a1b      	lsrs	r3, r3, #8
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b52:	f103 0310 	add.w	r3, r3, #16
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	330f      	adds	r3, #15
 8007b5a:	b2d2      	uxtb	r2, r2
 8007b5c:	701a      	strb	r2, [r3, #0]
 8007b5e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b62:	f103 030c 	add.w	r3, r3, #12
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	0c1a      	lsrs	r2, r3, #16
 8007b6a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b6e:	f103 0310 	add.w	r3, r3, #16
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	3310      	adds	r3, #16
 8007b76:	b2d2      	uxtb	r2, r2
 8007b78:	701a      	strb	r2, [r3, #0]
 8007b7a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b7e:	f103 030c 	add.w	r3, r3, #12
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	0e1a      	lsrs	r2, r3, #24
 8007b86:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b8a:	f103 0310 	add.w	r3, r3, #16
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	3311      	adds	r3, #17
 8007b92:	b2d2      	uxtb	r2, r2
 8007b94:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8007b96:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b9a:	f103 0310 	add.w	r3, r3, #16
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	330b      	adds	r3, #11
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8007ba6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007baa:	f103 0310 	add.w	r3, r3, #16
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	331c      	adds	r3, #28
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	701a      	strb	r2, [r3, #0]
 8007bb6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007bba:	f103 0310 	add.w	r3, r3, #16
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	331d      	adds	r3, #29
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	701a      	strb	r2, [r3, #0]
 8007bc6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007bca:	f103 0310 	add.w	r3, r3, #16
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	331e      	adds	r3, #30
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	701a      	strb	r2, [r3, #0]
 8007bd6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007bda:	f103 0310 	add.w	r3, r3, #16
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	331f      	adds	r3, #31
 8007be2:	2200      	movs	r2, #0
 8007be4:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8007be6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007bea:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007bee:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007bf2:	f102 0210 	add.w	r2, r2, #16
 8007bf6:	6811      	ldr	r1, [r2, #0]
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7fe fc06 	bl	800640a <ld_clust>
 8007bfe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c02:	f103 0308 	add.w	r3, r3, #8
 8007c06:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8007c08:	2100      	movs	r1, #0
 8007c0a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c0e:	f103 0310 	add.w	r3, r3, #16
 8007c12:	6818      	ldr	r0, [r3, #0]
 8007c14:	f7fe fc27 	bl	8006466 <st_clust>
				dj.fs->wflag = 1;
 8007c18:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007c1c:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c24:	2201      	movs	r2, #1
 8007c26:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8007c28:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c2c:	f103 0308 	add.w	r3, r3, #8
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d079      	beq.n	8007d2a <f_open+0x43a>
					dw = dj.fs->winsect;
 8007c36:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007c3a:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007c3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c44:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007c48:	f102 020c 	add.w	r2, r2, #12
 8007c4c:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8007c4e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007c52:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007c56:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007c5a:	f102 0208 	add.w	r2, r2, #8
 8007c5e:	6811      	ldr	r1, [r2, #0]
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7fe f823 	bl	8005cac <remove_chain>
 8007c66:	4603      	mov	r3, r0
 8007c68:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007c6c:	f102 0217 	add.w	r2, r2, #23
 8007c70:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8007c72:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c76:	f103 0317 	add.w	r3, r3, #23
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d154      	bne.n	8007d2a <f_open+0x43a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8007c80:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007c84:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	; 0xfc8
 8007c88:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007c8c:	f103 0308 	add.w	r3, r3, #8
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	3b01      	subs	r3, #1
 8007c94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007c98:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 8007c9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007c9e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007ca2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007ca6:	f102 020c 	add.w	r2, r2, #12
 8007caa:	6811      	ldr	r1, [r2, #0]
 8007cac:	4618      	mov	r0, r3
 8007cae:	f7fd fc99 	bl	80055e4 <move_window>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007cb8:	f102 0217 	add.w	r2, r2, #23
 8007cbc:	7013      	strb	r3, [r2, #0]
 8007cbe:	e034      	b.n	8007d2a <f_open+0x43a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8007cc0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007cc4:	f103 0317 	add.w	r3, r3, #23
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d12d      	bne.n	8007d2a <f_open+0x43a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8007cce:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007cd2:	f103 0310 	add.w	r3, r3, #16
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	330b      	adds	r3, #11
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	f003 0310 	and.w	r3, r3, #16
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d009      	beq.n	8007cf8 <f_open+0x408>
					res = FR_NO_FILE;
 8007ce4:	2304      	movs	r3, #4
 8007ce6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007cea:	f102 0217 	add.w	r2, r2, #23
 8007cee:	7013      	strb	r3, [r2, #0]
 8007cf0:	e01b      	b.n	8007d2a <f_open+0x43a>
 8007cf2:	bf00      	nop
 8007cf4:	20002418 	.word	0x20002418
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8007cf8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007cfc:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007d00:	f003 0302 	and.w	r3, r3, #2
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d010      	beq.n	8007d2a <f_open+0x43a>
 8007d08:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007d0c:	f103 0310 	add.w	r3, r3, #16
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	330b      	adds	r3, #11
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	f003 0301 	and.w	r3, r3, #1
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d005      	beq.n	8007d2a <f_open+0x43a>
						res = FR_DENIED;
 8007d1e:	2307      	movs	r3, #7
 8007d20:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007d24:	f102 0217 	add.w	r2, r2, #23
 8007d28:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8007d2a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007d2e:	f103 0317 	add.w	r3, r3, #23
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d157      	bne.n	8007de8 <f_open+0x4f8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007d38:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007d3c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007d40:	f003 0308 	and.w	r3, r3, #8
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00a      	beq.n	8007d5e <f_open+0x46e>
				mode |= FA__WRITTEN;
 8007d48:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007d52:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007d56:	f043 0320 	orr.w	r3, r3, #32
 8007d5a:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8007d5e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007d62:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007d70:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8007d74:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007d78:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 8007d7a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007d7e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d86:	461a      	mov	r2, r3
 8007d88:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007d8c:	f103 0310 	add.w	r3, r3, #16
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007d94:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007d98:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007d9c:	f023 0301 	bic.w	r3, r3, #1
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	bf14      	ite	ne
 8007da4:	2301      	movne	r3, #1
 8007da6:	2300      	moveq	r3, #0
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	461a      	mov	r2, r3
 8007dac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007db0:	3b18      	subs	r3, #24
 8007db2:	4611      	mov	r1, r2
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7fd fa99 	bl	80052ec <inc_lock>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007dc0:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dc8:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8007dca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007dce:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007dd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d105      	bne.n	8007de8 <f_open+0x4f8>
 8007ddc:	2302      	movs	r3, #2
 8007dde:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007de2:	f102 0217 	add.w	r2, r2, #23
 8007de6:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8007de8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007dec:	f103 0317 	add.w	r3, r3, #23
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f040 8088 	bne.w	8007f08 <f_open+0x618>
			fp->flag = mode;					/* File access mode */
 8007df8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007dfc:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e04:	461a      	mov	r2, r3
 8007e06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007e0a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007e0e:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 8007e10:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007e14:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007e18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8007e20:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007e24:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007e28:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007e2c:	f102 0210 	add.w	r2, r2, #16
 8007e30:	6811      	ldr	r1, [r2, #0]
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7fe fae9 	bl	800640a <ld_clust>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007e3e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e46:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8007e48:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007e4c:	f103 0310 	add.w	r3, r3, #16
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	331f      	adds	r3, #31
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	061a      	lsls	r2, r3, #24
 8007e58:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007e5c:	f103 0310 	add.w	r3, r3, #16
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	331e      	adds	r3, #30
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	041b      	lsls	r3, r3, #16
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007e6e:	f102 0210 	add.w	r2, r2, #16
 8007e72:	6812      	ldr	r2, [r2, #0]
 8007e74:	321d      	adds	r2, #29
 8007e76:	7812      	ldrb	r2, [r2, #0]
 8007e78:	0212      	lsls	r2, r2, #8
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007e80:	f102 0210 	add.w	r2, r2, #16
 8007e84:	6812      	ldr	r2, [r2, #0]
 8007e86:	321c      	adds	r2, #28
 8007e88:	7812      	ldrb	r2, [r2, #0]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007e90:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8007e94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007e98:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 8007e9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007e9e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007ea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 8007eac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007eb0:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eb8:	461a      	mov	r2, r3
 8007eba:	2300      	movs	r3, #0
 8007ebc:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8007ebe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007ec2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eca:	461a      	mov	r2, r3
 8007ecc:	2300      	movs	r3, #0
 8007ece:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8007ed0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007ed4:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8007ed8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007edc:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8007ee0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007ee4:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 8007ee6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007eea:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007eee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ef8:	88da      	ldrh	r2, [r3, #6]
 8007efa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007efe:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f06:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8007f08:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007f0c:	f103 0317 	add.w	r3, r3, #23
 8007f10:	781b      	ldrb	r3, [r3, #0]
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8007f18:	3718      	adds	r7, #24
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop

08007f20 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b08a      	sub	sp, #40	; 0x28
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	60b9      	str	r1, [r7, #8]
 8007f2a:	607a      	str	r2, [r7, #4]
 8007f2c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	2200      	movs	r2, #0
 8007f36:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	f7ff fc53 	bl	80077e4 <validate>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007f42:	7dfb      	ldrb	r3, [r7, #23]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d001      	beq.n	8007f4c <f_write+0x2c>
 8007f48:	7dfb      	ldrb	r3, [r7, #23]
 8007f4a:	e21e      	b.n	800838a <f_write+0x46a>
	if (fp->err)							/* Check error */
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f52:	79db      	ldrb	r3, [r3, #7]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d004      	beq.n	8007f62 <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f5e:	79db      	ldrb	r3, [r3, #7]
 8007f60:	e213      	b.n	800838a <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f68:	799b      	ldrb	r3, [r3, #6]
 8007f6a:	f003 0302 	and.w	r3, r3, #2
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d101      	bne.n	8007f76 <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 8007f72:	2307      	movs	r3, #7
 8007f74:	e209      	b.n	800838a <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f7c:	689a      	ldr	r2, [r3, #8]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	441a      	add	r2, r3
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	f080 81d9 	bcs.w	8008342 <f_write+0x422>
 8007f90:	2300      	movs	r3, #0
 8007f92:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8007f94:	e1d5      	b.n	8008342 <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007fa4:	6812      	ldr	r2, [r2, #0]
 8007fa6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007faa:	8952      	ldrh	r2, [r2, #10]
 8007fac:	fbb3 f1f2 	udiv	r1, r3, r2
 8007fb0:	fb01 f202 	mul.w	r2, r1, r2
 8007fb4:	1a9b      	subs	r3, r3, r2
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f040 8169 	bne.w	800828e <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007fca:	6812      	ldr	r2, [r2, #0]
 8007fcc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007fd0:	8952      	ldrh	r2, [r2, #10]
 8007fd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fd6:	b2da      	uxtb	r2, r3
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fe4:	789b      	ldrb	r3, [r3, #2]
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	4013      	ands	r3, r2
 8007fec:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8007fee:	7dbb      	ldrb	r3, [r7, #22]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d15f      	bne.n	80080b4 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d111      	bne.n	8008024 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800800a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800c:	2b00      	cmp	r3, #0
 800800e:	d126      	bne.n	800805e <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2100      	movs	r1, #0
 800801a:	4618      	mov	r0, r3
 800801c:	f7fd fea7 	bl	8005d6e <create_chain>
 8008020:	6278      	str	r0, [r7, #36]	; 0x24
 8008022:	e01c      	b.n	800805e <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800802a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802c:	2b00      	cmp	r3, #0
 800802e:	d009      	beq.n	8008044 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	4619      	mov	r1, r3
 800803a:	68f8      	ldr	r0, [r7, #12]
 800803c:	f7fd ff3f 	bl	8005ebe <clmt_clust>
 8008040:	6278      	str	r0, [r7, #36]	; 0x24
 8008042:	e00c      	b.n	800805e <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008052:	695b      	ldr	r3, [r3, #20]
 8008054:	4619      	mov	r1, r3
 8008056:	4610      	mov	r0, r2
 8008058:	f7fd fe89 	bl	8005d6e <create_chain>
 800805c:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800805e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008060:	2b00      	cmp	r3, #0
 8008062:	f000 8173 	beq.w	800834c <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8008066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008068:	2b01      	cmp	r3, #1
 800806a:	d106      	bne.n	800807a <f_write+0x15a>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008072:	2202      	movs	r2, #2
 8008074:	71da      	strb	r2, [r3, #7]
 8008076:	2302      	movs	r3, #2
 8008078:	e187      	b.n	800838a <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800807a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008080:	d106      	bne.n	8008090 <f_write+0x170>
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008088:	2201      	movs	r2, #1
 800808a:	71da      	strb	r2, [r3, #7]
 800808c:	2301      	movs	r3, #1
 800808e:	e17c      	b.n	800838a <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008096:	461a      	mov	r2, r3
 8008098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809a:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d105      	bne.n	80080b4 <f_write+0x194>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080ae:	461a      	mov	r2, r3
 80080b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b2:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080ba:	799b      	ldrb	r3, [r3, #6]
 80080bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d023      	beq.n	800810c <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080d0:	7858      	ldrb	r0, [r3, #1]
 80080d2:	68f9      	ldr	r1, [r7, #12]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080da:	699a      	ldr	r2, [r3, #24]
 80080dc:	2301      	movs	r3, #1
 80080de:	f7fc ffbb 	bl	8005058 <disk_write>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d006      	beq.n	80080f6 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080ee:	2201      	movs	r2, #1
 80080f0:	71da      	strb	r2, [r3, #7]
 80080f2:	2301      	movs	r3, #1
 80080f4:	e149      	b.n	800838a <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080fc:	799b      	ldrb	r3, [r3, #6]
 80080fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008102:	b2da      	uxtb	r2, r3
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800810a:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800811a:	695b      	ldr	r3, [r3, #20]
 800811c:	4619      	mov	r1, r3
 800811e:	4610      	mov	r0, r2
 8008120:	f7fd fb51 	bl	80057c6 <clust2sect>
 8008124:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d106      	bne.n	800813a <f_write+0x21a>
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008132:	2202      	movs	r2, #2
 8008134:	71da      	strb	r2, [r3, #7]
 8008136:	2302      	movs	r3, #2
 8008138:	e127      	b.n	800838a <f_write+0x46a>
			sect += csect;
 800813a:	7dbb      	ldrb	r3, [r7, #22]
 800813c:	693a      	ldr	r2, [r7, #16]
 800813e:	4413      	add	r3, r2
 8008140:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800814e:	895b      	ldrh	r3, [r3, #10]
 8008150:	461a      	mov	r2, r3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	fbb3 f3f2 	udiv	r3, r3, r2
 8008158:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800815a:	69fb      	ldr	r3, [r7, #28]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d069      	beq.n	8008234 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8008160:	7dba      	ldrb	r2, [r7, #22]
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	4413      	add	r3, r2
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800816c:	6812      	ldr	r2, [r2, #0]
 800816e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008172:	7892      	ldrb	r2, [r2, #2]
 8008174:	4293      	cmp	r3, r2
 8008176:	d90a      	bls.n	800818e <f_write+0x26e>
					cc = fp->fs->csize - csect;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008184:	789b      	ldrb	r3, [r3, #2]
 8008186:	461a      	mov	r2, r3
 8008188:	7dbb      	ldrb	r3, [r7, #22]
 800818a:	1ad3      	subs	r3, r2, r3
 800818c:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800819a:	7858      	ldrb	r0, [r3, #1]
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	693a      	ldr	r2, [r7, #16]
 80081a0:	69b9      	ldr	r1, [r7, #24]
 80081a2:	f7fc ff59 	bl	8005058 <disk_write>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d006      	beq.n	80081ba <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081b2:	2201      	movs	r2, #1
 80081b4:	71da      	strb	r2, [r3, #7]
 80081b6:	2301      	movs	r3, #1
 80081b8:	e0e7      	b.n	800838a <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081c0:	699a      	ldr	r2, [r3, #24]
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	1ad3      	subs	r3, r2, r3
 80081c6:	69fa      	ldr	r2, [r7, #28]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d926      	bls.n	800821a <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80081cc:	68f8      	ldr	r0, [r7, #12]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081d4:	699a      	ldr	r2, [r3, #24]
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	1ad3      	subs	r3, r2, r3
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80081e0:	6812      	ldr	r2, [r2, #0]
 80081e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80081e6:	8952      	ldrh	r2, [r2, #10]
 80081e8:	fb02 f303 	mul.w	r3, r2, r3
 80081ec:	69ba      	ldr	r2, [r7, #24]
 80081ee:	18d1      	adds	r1, r2, r3
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081fc:	895b      	ldrh	r3, [r3, #10]
 80081fe:	461a      	mov	r2, r3
 8008200:	f7fc ff68 	bl	80050d4 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800820a:	799b      	ldrb	r3, [r3, #6]
 800820c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008210:	b2da      	uxtb	r2, r3
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008218:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008226:	895b      	ldrh	r3, [r3, #10]
 8008228:	461a      	mov	r2, r3
 800822a:	69fb      	ldr	r3, [r7, #28]
 800822c:	fb02 f303 	mul.w	r3, r2, r3
 8008230:	623b      	str	r3, [r7, #32]
				continue;
 8008232:	e06e      	b.n	8008312 <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800823a:	699b      	ldr	r3, [r3, #24]
 800823c:	693a      	ldr	r2, [r7, #16]
 800823e:	429a      	cmp	r2, r3
 8008240:	d01f      	beq.n	8008282 <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008248:	689a      	ldr	r2, [r3, #8]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	429a      	cmp	r2, r3
 8008254:	d215      	bcs.n	8008282 <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008262:	7858      	ldrb	r0, [r3, #1]
 8008264:	68f9      	ldr	r1, [r7, #12]
 8008266:	2301      	movs	r3, #1
 8008268:	693a      	ldr	r2, [r7, #16]
 800826a:	f7fc fed5 	bl	8005018 <disk_read>
 800826e:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8008270:	2b00      	cmp	r3, #0
 8008272:	d006      	beq.n	8008282 <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800827a:	2201      	movs	r2, #1
 800827c:	71da      	strb	r2, [r3, #7]
 800827e:	2301      	movs	r3, #1
 8008280:	e083      	b.n	800838a <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008288:	461a      	mov	r2, r3
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800829a:	895b      	ldrh	r3, [r3, #10]
 800829c:	4618      	mov	r0, r3
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	68fa      	ldr	r2, [r7, #12]
 80082a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80082ac:	6812      	ldr	r2, [r2, #0]
 80082ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80082b2:	8952      	ldrh	r2, [r2, #10]
 80082b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80082b8:	fb01 f202 	mul.w	r2, r1, r2
 80082bc:	1a9b      	subs	r3, r3, r2
 80082be:	1ac3      	subs	r3, r0, r3
 80082c0:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 80082c2:	6a3a      	ldr	r2, [r7, #32]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d901      	bls.n	80082ce <f_write+0x3ae>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	68fa      	ldr	r2, [r7, #12]
 80082d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80082dc:	6812      	ldr	r2, [r2, #0]
 80082de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80082e2:	8952      	ldrh	r2, [r2, #10]
 80082e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80082e8:	fb01 f202 	mul.w	r2, r1, r2
 80082ec:	1a9b      	subs	r3, r3, r2
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	4413      	add	r3, r2
 80082f2:	6a3a      	ldr	r2, [r7, #32]
 80082f4:	69b9      	ldr	r1, [r7, #24]
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7fc feec 	bl	80050d4 <mem_cpy>
		fp->flag |= FA__DIRTY;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008302:	799b      	ldrb	r3, [r3, #6]
 8008304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008308:	b2da      	uxtb	r2, r3
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008310:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8008312:	69ba      	ldr	r2, [r7, #24]
 8008314:	6a3b      	ldr	r3, [r7, #32]
 8008316:	4413      	add	r3, r2
 8008318:	61bb      	str	r3, [r7, #24]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008320:	689a      	ldr	r2, [r3, #8]
 8008322:	6a3b      	ldr	r3, [r7, #32]
 8008324:	4413      	add	r3, r2
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800832c:	6093      	str	r3, [r2, #8]
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	6a3b      	ldr	r3, [r7, #32]
 8008334:	441a      	add	r2, r3
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	601a      	str	r2, [r3, #0]
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	6a3b      	ldr	r3, [r7, #32]
 800833e:	1ad3      	subs	r3, r2, r3
 8008340:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2b00      	cmp	r3, #0
 8008346:	f47f ae26 	bne.w	8007f96 <f_write+0x76>
 800834a:	e000      	b.n	800834e <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800834c:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008354:	689a      	ldr	r2, [r3, #8]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	429a      	cmp	r2, r3
 8008360:	d907      	bls.n	8008372 <f_write+0x452>
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	68fa      	ldr	r2, [r7, #12]
 800836c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008370:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008378:	799b      	ldrb	r3, [r3, #6]
 800837a:	f043 0320 	orr.w	r3, r3, #32
 800837e:	b2da      	uxtb	r2, r3
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008386:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	3728      	adds	r7, #40	; 0x28
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008392:	b580      	push	{r7, lr}
 8008394:	b086      	sub	sp, #24
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f7ff fa22 	bl	80077e4 <validate>
 80083a0:	4603      	mov	r3, r0
 80083a2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80083a4:	7dfb      	ldrb	r3, [r7, #23]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f040 80bc 	bne.w	8008524 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083b2:	799b      	ldrb	r3, [r3, #6]
 80083b4:	f003 0320 	and.w	r3, r3, #32
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	f000 80b3 	beq.w	8008524 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083c4:	799b      	ldrb	r3, [r3, #6]
 80083c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d01e      	beq.n	800840c <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083da:	7858      	ldrb	r0, [r3, #1]
 80083dc:	6879      	ldr	r1, [r7, #4]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083e4:	699a      	ldr	r2, [r3, #24]
 80083e6:	2301      	movs	r3, #1
 80083e8:	f7fc fe36 	bl	8005058 <disk_write>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d001      	beq.n	80083f6 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80083f2:	2301      	movs	r3, #1
 80083f4:	e097      	b.n	8008526 <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083fc:	799b      	ldrb	r3, [r3, #6]
 80083fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008402:	b2da      	uxtb	r2, r3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800840a:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800841a:	69db      	ldr	r3, [r3, #28]
 800841c:	4619      	mov	r1, r3
 800841e:	4610      	mov	r0, r2
 8008420:	f7fd f8e0 	bl	80055e4 <move_window>
 8008424:	4603      	mov	r3, r0
 8008426:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8008428:	7dfb      	ldrb	r3, [r7, #23]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d17a      	bne.n	8008524 <f_sync+0x192>
				dir = fp->dir_ptr;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008434:	6a1b      	ldr	r3, [r3, #32]
 8008436:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	330b      	adds	r3, #11
 800843c:	781a      	ldrb	r2, [r3, #0]
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	330b      	adds	r3, #11
 8008442:	f042 0220 	orr.w	r2, r2, #32
 8008446:	b2d2      	uxtb	r2, r2
 8008448:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008450:	68da      	ldr	r2, [r3, #12]
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	331c      	adds	r3, #28
 8008456:	b2d2      	uxtb	r2, r2
 8008458:	701a      	strb	r2, [r3, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	b29b      	uxth	r3, r3
 8008464:	0a1b      	lsrs	r3, r3, #8
 8008466:	b29a      	uxth	r2, r3
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	331d      	adds	r3, #29
 800846c:	b2d2      	uxtb	r2, r2
 800846e:	701a      	strb	r2, [r3, #0]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	0c1a      	lsrs	r2, r3, #16
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	331e      	adds	r3, #30
 800847e:	b2d2      	uxtb	r2, r2
 8008480:	701a      	strb	r2, [r3, #0]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	0e1a      	lsrs	r2, r3, #24
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	331f      	adds	r3, #31
 8008490:	b2d2      	uxtb	r2, r2
 8008492:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800849a:	691b      	ldr	r3, [r3, #16]
 800849c:	4619      	mov	r1, r3
 800849e:	6938      	ldr	r0, [r7, #16]
 80084a0:	f7fd ffe1 	bl	8006466 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80084a4:	f7fc fd1c 	bl	8004ee0 <get_fattime>
 80084a8:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	3316      	adds	r3, #22
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	b2d2      	uxtb	r2, r2
 80084b2:	701a      	strb	r2, [r3, #0]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	0a1b      	lsrs	r3, r3, #8
 80084ba:	b29a      	uxth	r2, r3
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	3317      	adds	r3, #23
 80084c0:	b2d2      	uxtb	r2, r2
 80084c2:	701a      	strb	r2, [r3, #0]
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	0c1a      	lsrs	r2, r3, #16
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	3318      	adds	r3, #24
 80084cc:	b2d2      	uxtb	r2, r2
 80084ce:	701a      	strb	r2, [r3, #0]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	0e1a      	lsrs	r2, r3, #24
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	3319      	adds	r3, #25
 80084d8:	b2d2      	uxtb	r2, r2
 80084da:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	3312      	adds	r3, #18
 80084e0:	2200      	movs	r2, #0
 80084e2:	701a      	strb	r2, [r3, #0]
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	3313      	adds	r3, #19
 80084e8:	2200      	movs	r2, #0
 80084ea:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084f2:	799b      	ldrb	r3, [r3, #6]
 80084f4:	f023 0320 	bic.w	r3, r3, #32
 80084f8:	b2da      	uxtb	r2, r3
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008500:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800850e:	2201      	movs	r2, #1
 8008510:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4618      	mov	r0, r3
 800851c:	f7fd f894 	bl	8005648 <sync_fs>
 8008520:	4603      	mov	r3, r0
 8008522:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8008524:	7dfb      	ldrb	r3, [r7, #23]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3718      	adds	r7, #24
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b084      	sub	sp, #16
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f7ff ff2b 	bl	8008392 <f_sync>
 800853c:	4603      	mov	r3, r0
 800853e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008540:	7bfb      	ldrb	r3, [r7, #15]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d119      	bne.n	800857a <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f7ff f94c 	bl	80077e4 <validate>
 800854c:	4603      	mov	r3, r0
 800854e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008550:	7bfb      	ldrb	r3, [r7, #15]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d111      	bne.n	800857a <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800855c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800855e:	4618      	mov	r0, r3
 8008560:	f7fc ff80 	bl	8005464 <dec_lock>
 8008564:	4603      	mov	r3, r0
 8008566:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008568:	7bfb      	ldrb	r3, [r7, #15]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d105      	bne.n	800857a <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008574:	461a      	mov	r2, r3
 8008576:	2300      	movs	r3, #0
 8008578:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800857a:	7bfb      	ldrb	r3, [r7, #15]
}
 800857c:	4618      	mov	r0, r3
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b090      	sub	sp, #64	; 0x40
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f7ff f928 	bl	80077e4 <validate>
 8008594:	4603      	mov	r3, r0
 8008596:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800859a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d002      	beq.n	80085a8 <f_lseek+0x24>
 80085a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80085a6:	e2da      	b.n	8008b5e <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085ae:	79db      	ldrb	r3, [r3, #7]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d004      	beq.n	80085be <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085ba:	79db      	ldrb	r3, [r3, #7]
 80085bc:	e2cf      	b.n	8008b5e <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	f000 8124 	beq.w	8008814 <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d2:	d16c      	bne.n	80086ae <f_lseek+0x12a>
			tbl = fp->cltbl;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085dc:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80085de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e0:	1d1a      	adds	r2, r3, #4
 80085e2:	627a      	str	r2, [r7, #36]	; 0x24
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	617b      	str	r3, [r7, #20]
 80085e8:	2302      	movs	r3, #2
 80085ea:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085f2:	691b      	ldr	r3, [r3, #16]
 80085f4:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80085f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d046      	beq.n	800868a <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80085fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fe:	613b      	str	r3, [r7, #16]
 8008600:	2300      	movs	r3, #0
 8008602:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008606:	3302      	adds	r3, #2
 8008608:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800860a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860c:	60fb      	str	r3, [r7, #12]
 800860e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008610:	3301      	adds	r3, #1
 8008612:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800861e:	4618      	mov	r0, r3
 8008620:	f7fd f8f5 	bl	800580e <get_fat>
 8008624:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8008626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008628:	2b01      	cmp	r3, #1
 800862a:	d806      	bhi.n	800863a <f_lseek+0xb6>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008632:	2202      	movs	r2, #2
 8008634:	71da      	strb	r2, [r3, #7]
 8008636:	2302      	movs	r3, #2
 8008638:	e291      	b.n	8008b5e <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800863a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008640:	d106      	bne.n	8008650 <f_lseek+0xcc>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008648:	2201      	movs	r2, #1
 800864a:	71da      	strb	r2, [r3, #7]
 800864c:	2301      	movs	r3, #1
 800864e:	e286      	b.n	8008b5e <f_lseek+0x5da>
					} while (cl == pcl + 1);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	3301      	adds	r3, #1
 8008654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008656:	429a      	cmp	r2, r3
 8008658:	d0d7      	beq.n	800860a <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800865a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	429a      	cmp	r2, r3
 8008660:	d809      	bhi.n	8008676 <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 8008662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008664:	1d1a      	adds	r2, r3, #4
 8008666:	627a      	str	r2, [r7, #36]	; 0x24
 8008668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800866a:	601a      	str	r2, [r3, #0]
 800866c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866e:	1d1a      	adds	r2, r3, #4
 8008670:	627a      	str	r2, [r7, #36]	; 0x24
 8008672:	693a      	ldr	r2, [r7, #16]
 8008674:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008682:	695b      	ldr	r3, [r3, #20]
 8008684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008686:	429a      	cmp	r2, r3
 8008688:	d3b8      	bcc.n	80085fc <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008692:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008694:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8008696:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	429a      	cmp	r2, r3
 800869c:	d803      	bhi.n	80086a6 <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 800869e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a0:	2200      	movs	r2, #0
 80086a2:	601a      	str	r2, [r3, #0]
 80086a4:	e259      	b.n	8008b5a <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80086a6:	2311      	movs	r3, #17
 80086a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80086ac:	e255      	b.n	8008b5a <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	683a      	ldr	r2, [r7, #0]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d904      	bls.n	80086c6 <f_lseek+0x142>
				ofs = fp->fsize;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086cc:	461a      	mov	r2, r3
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	6093      	str	r3, [r2, #8]
			if (ofs) {
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	f000 8240 	beq.w	8008b5a <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	3b01      	subs	r3, #1
 80086de:	4619      	mov	r1, r3
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f7fd fbec 	bl	8005ebe <clmt_clust>
 80086e6:	4602      	mov	r2, r0
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086ee:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086fe:	695b      	ldr	r3, [r3, #20]
 8008700:	4619      	mov	r1, r3
 8008702:	4610      	mov	r0, r2
 8008704:	f7fd f85f 	bl	80057c6 <clust2sect>
 8008708:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d106      	bne.n	800871e <f_lseek+0x19a>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008716:	2202      	movs	r2, #2
 8008718:	71da      	strb	r2, [r3, #7]
 800871a:	2302      	movs	r3, #2
 800871c:	e21f      	b.n	8008b5e <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	3b01      	subs	r3, #1
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008728:	6812      	ldr	r2, [r2, #0]
 800872a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800872e:	8952      	ldrh	r2, [r2, #10]
 8008730:	fbb3 f3f2 	udiv	r3, r3, r2
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800873a:	6812      	ldr	r2, [r2, #0]
 800873c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008740:	7892      	ldrb	r2, [r2, #2]
 8008742:	3a01      	subs	r2, #1
 8008744:	4013      	ands	r3, r2
 8008746:	69ba      	ldr	r2, [r7, #24]
 8008748:	4413      	add	r3, r2
 800874a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800875a:	6812      	ldr	r2, [r2, #0]
 800875c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008760:	8952      	ldrh	r2, [r2, #10]
 8008762:	fbb3 f1f2 	udiv	r1, r3, r2
 8008766:	fb01 f202 	mul.w	r2, r1, r2
 800876a:	1a9b      	subs	r3, r3, r2
 800876c:	2b00      	cmp	r3, #0
 800876e:	f000 81f4 	beq.w	8008b5a <f_lseek+0x5d6>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008778:	699b      	ldr	r3, [r3, #24]
 800877a:	69ba      	ldr	r2, [r7, #24]
 800877c:	429a      	cmp	r2, r3
 800877e:	f000 81ec 	beq.w	8008b5a <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008788:	799b      	ldrb	r3, [r3, #6]
 800878a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800878e:	2b00      	cmp	r3, #0
 8008790:	d023      	beq.n	80087da <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800879e:	7858      	ldrb	r0, [r3, #1]
 80087a0:	6879      	ldr	r1, [r7, #4]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087a8:	699a      	ldr	r2, [r3, #24]
 80087aa:	2301      	movs	r3, #1
 80087ac:	f7fc fc54 	bl	8005058 <disk_write>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d006      	beq.n	80087c4 <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087bc:	2201      	movs	r2, #1
 80087be:	71da      	strb	r2, [r3, #7]
 80087c0:	2301      	movs	r3, #1
 80087c2:	e1cc      	b.n	8008b5e <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087ca:	799b      	ldrb	r3, [r3, #6]
 80087cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087d0:	b2da      	uxtb	r2, r3
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087d8:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087e6:	7858      	ldrb	r0, [r3, #1]
 80087e8:	6879      	ldr	r1, [r7, #4]
 80087ea:	2301      	movs	r3, #1
 80087ec:	69ba      	ldr	r2, [r7, #24]
 80087ee:	f7fc fc13 	bl	8005018 <disk_read>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d006      	beq.n	8008806 <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087fe:	2201      	movs	r2, #1
 8008800:	71da      	strb	r2, [r3, #7]
 8008802:	2301      	movs	r3, #1
 8008804:	e1ab      	b.n	8008b5e <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800880c:	461a      	mov	r2, r3
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	6193      	str	r3, [r2, #24]
 8008812:	e1a2      	b.n	8008b5a <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	683a      	ldr	r2, [r7, #0]
 800881e:	429a      	cmp	r2, r3
 8008820:	d90c      	bls.n	800883c <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008828:	799b      	ldrb	r3, [r3, #6]
 800882a:	f003 0302 	and.w	r3, r3, #2
 800882e:	2b00      	cmp	r3, #0
 8008830:	d104      	bne.n	800883c <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008838:	68db      	ldr	r3, [r3, #12]
 800883a:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008846:	2300      	movs	r3, #0
 8008848:	637b      	str	r3, [r7, #52]	; 0x34
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008850:	461a      	mov	r2, r3
 8008852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008854:	6093      	str	r3, [r2, #8]
		if (ofs) {
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	f000 8100 	beq.w	8008a5e <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800886a:	789b      	ldrb	r3, [r3, #2]
 800886c:	461a      	mov	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800887a:	895b      	ldrh	r3, [r3, #10]
 800887c:	fb02 f303 	mul.w	r3, r2, r3
 8008880:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008882:	6a3b      	ldr	r3, [r7, #32]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d021      	beq.n	80088cc <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	1e5a      	subs	r2, r3, #1
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008892:	6a3b      	ldr	r3, [r7, #32]
 8008894:	1e59      	subs	r1, r3, #1
 8008896:	69fb      	ldr	r3, [r7, #28]
 8008898:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800889c:	429a      	cmp	r2, r3
 800889e:	d315      	bcc.n	80088cc <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 80088a0:	6a3b      	ldr	r3, [r7, #32]
 80088a2:	1e5a      	subs	r2, r3, #1
 80088a4:	69fb      	ldr	r3, [r7, #28]
 80088a6:	425b      	negs	r3, r3
 80088a8:	4013      	ands	r3, r2
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80088b0:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	683a      	ldr	r2, [r7, #0]
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088c6:	695b      	ldr	r3, [r3, #20]
 80088c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80088ca:	e031      	b.n	8008930 <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088d2:	691b      	ldr	r3, [r3, #16]
 80088d4:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80088d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d123      	bne.n	8008924 <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2100      	movs	r1, #0
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7fd fa41 	bl	8005d6e <create_chain>
 80088ec:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80088ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d106      	bne.n	8008902 <f_lseek+0x37e>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088fa:	2202      	movs	r2, #2
 80088fc:	71da      	strb	r2, [r3, #7]
 80088fe:	2302      	movs	r3, #2
 8008900:	e12d      	b.n	8008b5e <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008908:	d106      	bne.n	8008918 <f_lseek+0x394>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008910:	2201      	movs	r2, #1
 8008912:	71da      	strb	r2, [r3, #7]
 8008914:	2301      	movs	r3, #1
 8008916:	e122      	b.n	8008b5e <f_lseek+0x5da>
					fp->sclust = clst;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800891e:	461a      	mov	r2, r3
 8008920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008922:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800892a:	461a      	mov	r2, r3
 800892c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892e:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 8008930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008932:	2b00      	cmp	r3, #0
 8008934:	f000 8093 	beq.w	8008a5e <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 8008938:	e052      	b.n	80089e0 <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008940:	799b      	ldrb	r3, [r3, #6]
 8008942:	f003 0302 	and.w	r3, r3, #2
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00e      	beq.n	8008968 <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008954:	4618      	mov	r0, r3
 8008956:	f7fd fa0a 	bl	8005d6e <create_chain>
 800895a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800895c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800895e:	2b00      	cmp	r3, #0
 8008960:	d10b      	bne.n	800897a <f_lseek+0x3f6>
							ofs = bcs; break;
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	603b      	str	r3, [r7, #0]
 8008966:	e03f      	b.n	80089e8 <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008972:	4618      	mov	r0, r3
 8008974:	f7fc ff4b 	bl	800580e <get_fat>
 8008978:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800897a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800897c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008980:	d106      	bne.n	8008990 <f_lseek+0x40c>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008988:	2201      	movs	r2, #1
 800898a:	71da      	strb	r2, [r3, #7]
 800898c:	2301      	movs	r3, #1
 800898e:	e0e6      	b.n	8008b5e <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8008990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008992:	2b01      	cmp	r3, #1
 8008994:	d909      	bls.n	80089aa <f_lseek+0x426>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089a2:	695b      	ldr	r3, [r3, #20]
 80089a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d306      	bcc.n	80089b8 <f_lseek+0x434>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089b0:	2202      	movs	r2, #2
 80089b2:	71da      	strb	r2, [r3, #7]
 80089b4:	2302      	movs	r3, #2
 80089b6:	e0d2      	b.n	8008b5e <f_lseek+0x5da>
					fp->clust = clst;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089be:	461a      	mov	r2, r3
 80089c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c2:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089ca:	689a      	ldr	r2, [r3, #8]
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	4413      	add	r3, r2
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80089d6:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 80089d8:	683a      	ldr	r2, [r7, #0]
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	1ad3      	subs	r3, r2, r3
 80089de:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 80089e0:	683a      	ldr	r2, [r7, #0]
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d8a8      	bhi.n	800893a <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089ee:	689a      	ldr	r2, [r3, #8]
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	4413      	add	r3, r2
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80089fa:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a08:	895b      	ldrh	r3, [r3, #10]
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a12:	fb01 f202 	mul.w	r2, r1, r2
 8008a16:	1a9b      	subs	r3, r3, r2
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d020      	beq.n	8008a5e <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7fc fecd 	bl	80057c6 <clust2sect>
 8008a2c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8008a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d106      	bne.n	8008a42 <f_lseek+0x4be>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a3a:	2202      	movs	r2, #2
 8008a3c:	71da      	strb	r2, [r3, #7]
 8008a3e:	2302      	movs	r3, #2
 8008a40:	e08d      	b.n	8008b5e <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a4e:	895b      	ldrh	r3, [r3, #10]
 8008a50:	461a      	mov	r2, r3
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a5a:	4413      	add	r3, r2
 8008a5c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008a6c:	6812      	ldr	r2, [r2, #0]
 8008a6e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008a72:	8952      	ldrh	r2, [r2, #10]
 8008a74:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a78:	fb01 f202 	mul.w	r2, r1, r2
 8008a7c:	1a9b      	subs	r3, r3, r2
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d04e      	beq.n	8008b20 <f_lseek+0x59c>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a88:	699b      	ldr	r3, [r3, #24]
 8008a8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d047      	beq.n	8008b20 <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a96:	799b      	ldrb	r3, [r3, #6]
 8008a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d023      	beq.n	8008ae8 <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aac:	7858      	ldrb	r0, [r3, #1]
 8008aae:	6879      	ldr	r1, [r7, #4]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ab6:	699a      	ldr	r2, [r3, #24]
 8008ab8:	2301      	movs	r3, #1
 8008aba:	f7fc facd 	bl	8005058 <disk_write>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d006      	beq.n	8008ad2 <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aca:	2201      	movs	r2, #1
 8008acc:	71da      	strb	r2, [r3, #7]
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e045      	b.n	8008b5e <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ad8:	799b      	ldrb	r3, [r3, #6]
 8008ada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ade:	b2da      	uxtb	r2, r3
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ae6:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008af4:	7858      	ldrb	r0, [r3, #1]
 8008af6:	6879      	ldr	r1, [r7, #4]
 8008af8:	2301      	movs	r3, #1
 8008afa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008afc:	f7fc fa8c 	bl	8005018 <disk_read>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d006      	beq.n	8008b14 <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	71da      	strb	r2, [r3, #7]
 8008b10:	2301      	movs	r3, #1
 8008b12:	e024      	b.n	8008b5e <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b1e:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b26:	689a      	ldr	r2, [r3, #8]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d912      	bls.n	8008b5a <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b42:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b4a:	799b      	ldrb	r3, [r3, #6]
 8008b4c:	f043 0320 	orr.w	r3, r3, #32
 8008b50:	b2da      	uxtb	r2, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b58:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8008b5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3740      	adds	r7, #64	; 0x40
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
	...

08008b68 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b087      	sub	sp, #28
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	4613      	mov	r3, r2
 8008b74:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008b76:	2301      	movs	r3, #1
 8008b78:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8008b7e:	4b1e      	ldr	r3, [pc, #120]	; (8008bf8 <FATFS_LinkDriverEx+0x90>)
 8008b80:	7a5b      	ldrb	r3, [r3, #9]
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d831      	bhi.n	8008bec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008b88:	4b1b      	ldr	r3, [pc, #108]	; (8008bf8 <FATFS_LinkDriverEx+0x90>)
 8008b8a:	7a5b      	ldrb	r3, [r3, #9]
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	461a      	mov	r2, r3
 8008b90:	4b19      	ldr	r3, [pc, #100]	; (8008bf8 <FATFS_LinkDriverEx+0x90>)
 8008b92:	2100      	movs	r1, #0
 8008b94:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8008b96:	4b18      	ldr	r3, [pc, #96]	; (8008bf8 <FATFS_LinkDriverEx+0x90>)
 8008b98:	7a5b      	ldrb	r3, [r3, #9]
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	4a16      	ldr	r2, [pc, #88]	; (8008bf8 <FATFS_LinkDriverEx+0x90>)
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	4413      	add	r3, r2
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8008ba6:	4b14      	ldr	r3, [pc, #80]	; (8008bf8 <FATFS_LinkDriverEx+0x90>)
 8008ba8:	7a5b      	ldrb	r3, [r3, #9]
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	461a      	mov	r2, r3
 8008bae:	4b12      	ldr	r3, [pc, #72]	; (8008bf8 <FATFS_LinkDriverEx+0x90>)
 8008bb0:	4413      	add	r3, r2
 8008bb2:	79fa      	ldrb	r2, [r7, #7]
 8008bb4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008bb6:	4b10      	ldr	r3, [pc, #64]	; (8008bf8 <FATFS_LinkDriverEx+0x90>)
 8008bb8:	7a5b      	ldrb	r3, [r3, #9]
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	1c5a      	adds	r2, r3, #1
 8008bbe:	b2d1      	uxtb	r1, r2
 8008bc0:	4a0d      	ldr	r2, [pc, #52]	; (8008bf8 <FATFS_LinkDriverEx+0x90>)
 8008bc2:	7251      	strb	r1, [r2, #9]
 8008bc4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008bc6:	7dbb      	ldrb	r3, [r7, #22]
 8008bc8:	3330      	adds	r3, #48	; 0x30
 8008bca:	b2da      	uxtb	r2, r3
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	223a      	movs	r2, #58	; 0x3a
 8008bd6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	3302      	adds	r3, #2
 8008bdc:	222f      	movs	r2, #47	; 0x2f
 8008bde:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	3303      	adds	r3, #3
 8008be4:	2200      	movs	r2, #0
 8008be6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008be8:	2300      	movs	r3, #0
 8008bea:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8008bec:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	371c      	adds	r7, #28
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bc80      	pop	{r7}
 8008bf6:	4770      	bx	lr
 8008bf8:	20002618 	.word	0x20002618

08008bfc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008c06:	2200      	movs	r2, #0
 8008c08:	6839      	ldr	r1, [r7, #0]
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f7ff ffac 	bl	8008b68 <FATFS_LinkDriverEx>
 8008c10:	4603      	mov	r3, r0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3708      	adds	r7, #8
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
	...

08008c1c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b085      	sub	sp, #20
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	4603      	mov	r3, r0
 8008c24:	6039      	str	r1, [r7, #0]
 8008c26:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008c28:	88fb      	ldrh	r3, [r7, #6]
 8008c2a:	2b7f      	cmp	r3, #127	; 0x7f
 8008c2c:	d802      	bhi.n	8008c34 <ff_convert+0x18>
		c = chr;
 8008c2e:	88fb      	ldrh	r3, [r7, #6]
 8008c30:	81fb      	strh	r3, [r7, #14]
 8008c32:	e025      	b.n	8008c80 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00b      	beq.n	8008c52 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008c3a:	88fb      	ldrh	r3, [r7, #6]
 8008c3c:	2bff      	cmp	r3, #255	; 0xff
 8008c3e:	d805      	bhi.n	8008c4c <ff_convert+0x30>
 8008c40:	88fb      	ldrh	r3, [r7, #6]
 8008c42:	3b80      	subs	r3, #128	; 0x80
 8008c44:	4a11      	ldr	r2, [pc, #68]	; (8008c8c <ff_convert+0x70>)
 8008c46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c4a:	e000      	b.n	8008c4e <ff_convert+0x32>
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	81fb      	strh	r3, [r7, #14]
 8008c50:	e016      	b.n	8008c80 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8008c52:	2300      	movs	r3, #0
 8008c54:	81fb      	strh	r3, [r7, #14]
 8008c56:	e009      	b.n	8008c6c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008c58:	89fb      	ldrh	r3, [r7, #14]
 8008c5a:	4a0c      	ldr	r2, [pc, #48]	; (8008c8c <ff_convert+0x70>)
 8008c5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c60:	88fa      	ldrh	r2, [r7, #6]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d006      	beq.n	8008c74 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008c66:	89fb      	ldrh	r3, [r7, #14]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	81fb      	strh	r3, [r7, #14]
 8008c6c:	89fb      	ldrh	r3, [r7, #14]
 8008c6e:	2b7f      	cmp	r3, #127	; 0x7f
 8008c70:	d9f2      	bls.n	8008c58 <ff_convert+0x3c>
 8008c72:	e000      	b.n	8008c76 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008c74:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008c76:	89fb      	ldrh	r3, [r7, #14]
 8008c78:	3380      	adds	r3, #128	; 0x80
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008c80:	89fb      	ldrh	r3, [r7, #14]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3714      	adds	r7, #20
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bc80      	pop	{r7}
 8008c8a:	4770      	bx	lr
 8008c8c:	0800ca84 	.word	0x0800ca84

08008c90 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b085      	sub	sp, #20
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	4603      	mov	r3, r0
 8008c98:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	60fb      	str	r3, [r7, #12]
 8008c9e:	e002      	b.n	8008ca6 <ff_wtoupper+0x16>
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	60fb      	str	r3, [r7, #12]
 8008ca6:	4a0f      	ldr	r2, [pc, #60]	; (8008ce4 <ff_wtoupper+0x54>)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d006      	beq.n	8008cc0 <ff_wtoupper+0x30>
 8008cb2:	4a0c      	ldr	r2, [pc, #48]	; (8008ce4 <ff_wtoupper+0x54>)
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cba:	88fa      	ldrh	r2, [r7, #6]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d1ef      	bne.n	8008ca0 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8008cc0:	4a08      	ldr	r2, [pc, #32]	; (8008ce4 <ff_wtoupper+0x54>)
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d004      	beq.n	8008cd6 <ff_wtoupper+0x46>
 8008ccc:	4a06      	ldr	r2, [pc, #24]	; (8008ce8 <ff_wtoupper+0x58>)
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cd4:	e000      	b.n	8008cd8 <ff_wtoupper+0x48>
 8008cd6:	88fb      	ldrh	r3, [r7, #6]
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3714      	adds	r7, #20
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bc80      	pop	{r7}
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop
 8008ce4:	0800cb84 	.word	0x0800cb84
 8008ce8:	0800cd64 	.word	0x0800cd64

08008cec <__errno>:
 8008cec:	4b01      	ldr	r3, [pc, #4]	; (8008cf4 <__errno+0x8>)
 8008cee:	6818      	ldr	r0, [r3, #0]
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	20000024 	.word	0x20000024

08008cf8 <__libc_init_array>:
 8008cf8:	b570      	push	{r4, r5, r6, lr}
 8008cfa:	2600      	movs	r6, #0
 8008cfc:	4d0c      	ldr	r5, [pc, #48]	; (8008d30 <__libc_init_array+0x38>)
 8008cfe:	4c0d      	ldr	r4, [pc, #52]	; (8008d34 <__libc_init_array+0x3c>)
 8008d00:	1b64      	subs	r4, r4, r5
 8008d02:	10a4      	asrs	r4, r4, #2
 8008d04:	42a6      	cmp	r6, r4
 8008d06:	d109      	bne.n	8008d1c <__libc_init_array+0x24>
 8008d08:	f003 fdf0 	bl	800c8ec <_init>
 8008d0c:	2600      	movs	r6, #0
 8008d0e:	4d0a      	ldr	r5, [pc, #40]	; (8008d38 <__libc_init_array+0x40>)
 8008d10:	4c0a      	ldr	r4, [pc, #40]	; (8008d3c <__libc_init_array+0x44>)
 8008d12:	1b64      	subs	r4, r4, r5
 8008d14:	10a4      	asrs	r4, r4, #2
 8008d16:	42a6      	cmp	r6, r4
 8008d18:	d105      	bne.n	8008d26 <__libc_init_array+0x2e>
 8008d1a:	bd70      	pop	{r4, r5, r6, pc}
 8008d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d20:	4798      	blx	r3
 8008d22:	3601      	adds	r6, #1
 8008d24:	e7ee      	b.n	8008d04 <__libc_init_array+0xc>
 8008d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d2a:	4798      	blx	r3
 8008d2c:	3601      	adds	r6, #1
 8008d2e:	e7f2      	b.n	8008d16 <__libc_init_array+0x1e>
 8008d30:	0800d350 	.word	0x0800d350
 8008d34:	0800d350 	.word	0x0800d350
 8008d38:	0800d350 	.word	0x0800d350
 8008d3c:	0800d354 	.word	0x0800d354

08008d40 <memset>:
 8008d40:	4603      	mov	r3, r0
 8008d42:	4402      	add	r2, r0
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d100      	bne.n	8008d4a <memset+0xa>
 8008d48:	4770      	bx	lr
 8008d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8008d4e:	e7f9      	b.n	8008d44 <memset+0x4>

08008d50 <__cvt>:
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d56:	461f      	mov	r7, r3
 8008d58:	bfbb      	ittet	lt
 8008d5a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008d5e:	461f      	movlt	r7, r3
 8008d60:	2300      	movge	r3, #0
 8008d62:	232d      	movlt	r3, #45	; 0x2d
 8008d64:	b088      	sub	sp, #32
 8008d66:	4614      	mov	r4, r2
 8008d68:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d6a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008d6c:	7013      	strb	r3, [r2, #0]
 8008d6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d70:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008d74:	f023 0820 	bic.w	r8, r3, #32
 8008d78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d7c:	d005      	beq.n	8008d8a <__cvt+0x3a>
 8008d7e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008d82:	d100      	bne.n	8008d86 <__cvt+0x36>
 8008d84:	3501      	adds	r5, #1
 8008d86:	2302      	movs	r3, #2
 8008d88:	e000      	b.n	8008d8c <__cvt+0x3c>
 8008d8a:	2303      	movs	r3, #3
 8008d8c:	aa07      	add	r2, sp, #28
 8008d8e:	9204      	str	r2, [sp, #16]
 8008d90:	aa06      	add	r2, sp, #24
 8008d92:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008d96:	e9cd 3500 	strd	r3, r5, [sp]
 8008d9a:	4622      	mov	r2, r4
 8008d9c:	463b      	mov	r3, r7
 8008d9e:	f000 fcf7 	bl	8009790 <_dtoa_r>
 8008da2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008da6:	4606      	mov	r6, r0
 8008da8:	d102      	bne.n	8008db0 <__cvt+0x60>
 8008daa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008dac:	07db      	lsls	r3, r3, #31
 8008dae:	d522      	bpl.n	8008df6 <__cvt+0xa6>
 8008db0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008db4:	eb06 0905 	add.w	r9, r6, r5
 8008db8:	d110      	bne.n	8008ddc <__cvt+0x8c>
 8008dba:	7833      	ldrb	r3, [r6, #0]
 8008dbc:	2b30      	cmp	r3, #48	; 0x30
 8008dbe:	d10a      	bne.n	8008dd6 <__cvt+0x86>
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	4639      	mov	r1, r7
 8008dc8:	f7f7 fdee 	bl	80009a8 <__aeabi_dcmpeq>
 8008dcc:	b918      	cbnz	r0, 8008dd6 <__cvt+0x86>
 8008dce:	f1c5 0501 	rsb	r5, r5, #1
 8008dd2:	f8ca 5000 	str.w	r5, [sl]
 8008dd6:	f8da 3000 	ldr.w	r3, [sl]
 8008dda:	4499      	add	r9, r3
 8008ddc:	2200      	movs	r2, #0
 8008dde:	2300      	movs	r3, #0
 8008de0:	4620      	mov	r0, r4
 8008de2:	4639      	mov	r1, r7
 8008de4:	f7f7 fde0 	bl	80009a8 <__aeabi_dcmpeq>
 8008de8:	b108      	cbz	r0, 8008dee <__cvt+0x9e>
 8008dea:	f8cd 901c 	str.w	r9, [sp, #28]
 8008dee:	2230      	movs	r2, #48	; 0x30
 8008df0:	9b07      	ldr	r3, [sp, #28]
 8008df2:	454b      	cmp	r3, r9
 8008df4:	d307      	bcc.n	8008e06 <__cvt+0xb6>
 8008df6:	4630      	mov	r0, r6
 8008df8:	9b07      	ldr	r3, [sp, #28]
 8008dfa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008dfc:	1b9b      	subs	r3, r3, r6
 8008dfe:	6013      	str	r3, [r2, #0]
 8008e00:	b008      	add	sp, #32
 8008e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e06:	1c59      	adds	r1, r3, #1
 8008e08:	9107      	str	r1, [sp, #28]
 8008e0a:	701a      	strb	r2, [r3, #0]
 8008e0c:	e7f0      	b.n	8008df0 <__cvt+0xa0>

08008e0e <__exponent>:
 8008e0e:	4603      	mov	r3, r0
 8008e10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e12:	2900      	cmp	r1, #0
 8008e14:	f803 2b02 	strb.w	r2, [r3], #2
 8008e18:	bfb6      	itet	lt
 8008e1a:	222d      	movlt	r2, #45	; 0x2d
 8008e1c:	222b      	movge	r2, #43	; 0x2b
 8008e1e:	4249      	neglt	r1, r1
 8008e20:	2909      	cmp	r1, #9
 8008e22:	7042      	strb	r2, [r0, #1]
 8008e24:	dd2b      	ble.n	8008e7e <__exponent+0x70>
 8008e26:	f10d 0407 	add.w	r4, sp, #7
 8008e2a:	46a4      	mov	ip, r4
 8008e2c:	270a      	movs	r7, #10
 8008e2e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008e32:	460a      	mov	r2, r1
 8008e34:	46a6      	mov	lr, r4
 8008e36:	fb07 1516 	mls	r5, r7, r6, r1
 8008e3a:	2a63      	cmp	r2, #99	; 0x63
 8008e3c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8008e40:	4631      	mov	r1, r6
 8008e42:	f104 34ff 	add.w	r4, r4, #4294967295
 8008e46:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008e4a:	dcf0      	bgt.n	8008e2e <__exponent+0x20>
 8008e4c:	3130      	adds	r1, #48	; 0x30
 8008e4e:	f1ae 0502 	sub.w	r5, lr, #2
 8008e52:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008e56:	4629      	mov	r1, r5
 8008e58:	1c44      	adds	r4, r0, #1
 8008e5a:	4561      	cmp	r1, ip
 8008e5c:	d30a      	bcc.n	8008e74 <__exponent+0x66>
 8008e5e:	f10d 0209 	add.w	r2, sp, #9
 8008e62:	eba2 020e 	sub.w	r2, r2, lr
 8008e66:	4565      	cmp	r5, ip
 8008e68:	bf88      	it	hi
 8008e6a:	2200      	movhi	r2, #0
 8008e6c:	4413      	add	r3, r2
 8008e6e:	1a18      	subs	r0, r3, r0
 8008e70:	b003      	add	sp, #12
 8008e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e74:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e78:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008e7c:	e7ed      	b.n	8008e5a <__exponent+0x4c>
 8008e7e:	2330      	movs	r3, #48	; 0x30
 8008e80:	3130      	adds	r1, #48	; 0x30
 8008e82:	7083      	strb	r3, [r0, #2]
 8008e84:	70c1      	strb	r1, [r0, #3]
 8008e86:	1d03      	adds	r3, r0, #4
 8008e88:	e7f1      	b.n	8008e6e <__exponent+0x60>
	...

08008e8c <_printf_float>:
 8008e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e90:	b091      	sub	sp, #68	; 0x44
 8008e92:	460c      	mov	r4, r1
 8008e94:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008e98:	4616      	mov	r6, r2
 8008e9a:	461f      	mov	r7, r3
 8008e9c:	4605      	mov	r5, r0
 8008e9e:	f001 fa65 	bl	800a36c <_localeconv_r>
 8008ea2:	6803      	ldr	r3, [r0, #0]
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	9309      	str	r3, [sp, #36]	; 0x24
 8008ea8:	f7f7 f952 	bl	8000150 <strlen>
 8008eac:	2300      	movs	r3, #0
 8008eae:	930e      	str	r3, [sp, #56]	; 0x38
 8008eb0:	f8d8 3000 	ldr.w	r3, [r8]
 8008eb4:	900a      	str	r0, [sp, #40]	; 0x28
 8008eb6:	3307      	adds	r3, #7
 8008eb8:	f023 0307 	bic.w	r3, r3, #7
 8008ebc:	f103 0208 	add.w	r2, r3, #8
 8008ec0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008ec4:	f8d4 b000 	ldr.w	fp, [r4]
 8008ec8:	f8c8 2000 	str.w	r2, [r8]
 8008ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008ed4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008ed8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008edc:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ede:	f04f 32ff 	mov.w	r2, #4294967295
 8008ee2:	4640      	mov	r0, r8
 8008ee4:	4b9c      	ldr	r3, [pc, #624]	; (8009158 <_printf_float+0x2cc>)
 8008ee6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ee8:	f7f7 fd90 	bl	8000a0c <__aeabi_dcmpun>
 8008eec:	bb70      	cbnz	r0, 8008f4c <_printf_float+0xc0>
 8008eee:	f04f 32ff 	mov.w	r2, #4294967295
 8008ef2:	4640      	mov	r0, r8
 8008ef4:	4b98      	ldr	r3, [pc, #608]	; (8009158 <_printf_float+0x2cc>)
 8008ef6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ef8:	f7f7 fd6a 	bl	80009d0 <__aeabi_dcmple>
 8008efc:	bb30      	cbnz	r0, 8008f4c <_printf_float+0xc0>
 8008efe:	2200      	movs	r2, #0
 8008f00:	2300      	movs	r3, #0
 8008f02:	4640      	mov	r0, r8
 8008f04:	4651      	mov	r1, sl
 8008f06:	f7f7 fd59 	bl	80009bc <__aeabi_dcmplt>
 8008f0a:	b110      	cbz	r0, 8008f12 <_printf_float+0x86>
 8008f0c:	232d      	movs	r3, #45	; 0x2d
 8008f0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f12:	4b92      	ldr	r3, [pc, #584]	; (800915c <_printf_float+0x2d0>)
 8008f14:	4892      	ldr	r0, [pc, #584]	; (8009160 <_printf_float+0x2d4>)
 8008f16:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008f1a:	bf94      	ite	ls
 8008f1c:	4698      	movls	r8, r3
 8008f1e:	4680      	movhi	r8, r0
 8008f20:	2303      	movs	r3, #3
 8008f22:	f04f 0a00 	mov.w	sl, #0
 8008f26:	6123      	str	r3, [r4, #16]
 8008f28:	f02b 0304 	bic.w	r3, fp, #4
 8008f2c:	6023      	str	r3, [r4, #0]
 8008f2e:	4633      	mov	r3, r6
 8008f30:	4621      	mov	r1, r4
 8008f32:	4628      	mov	r0, r5
 8008f34:	9700      	str	r7, [sp, #0]
 8008f36:	aa0f      	add	r2, sp, #60	; 0x3c
 8008f38:	f000 f9d4 	bl	80092e4 <_printf_common>
 8008f3c:	3001      	adds	r0, #1
 8008f3e:	f040 8090 	bne.w	8009062 <_printf_float+0x1d6>
 8008f42:	f04f 30ff 	mov.w	r0, #4294967295
 8008f46:	b011      	add	sp, #68	; 0x44
 8008f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f4c:	4642      	mov	r2, r8
 8008f4e:	4653      	mov	r3, sl
 8008f50:	4640      	mov	r0, r8
 8008f52:	4651      	mov	r1, sl
 8008f54:	f7f7 fd5a 	bl	8000a0c <__aeabi_dcmpun>
 8008f58:	b148      	cbz	r0, 8008f6e <_printf_float+0xe2>
 8008f5a:	f1ba 0f00 	cmp.w	sl, #0
 8008f5e:	bfb8      	it	lt
 8008f60:	232d      	movlt	r3, #45	; 0x2d
 8008f62:	4880      	ldr	r0, [pc, #512]	; (8009164 <_printf_float+0x2d8>)
 8008f64:	bfb8      	it	lt
 8008f66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008f6a:	4b7f      	ldr	r3, [pc, #508]	; (8009168 <_printf_float+0x2dc>)
 8008f6c:	e7d3      	b.n	8008f16 <_printf_float+0x8a>
 8008f6e:	6863      	ldr	r3, [r4, #4]
 8008f70:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008f74:	1c5a      	adds	r2, r3, #1
 8008f76:	d142      	bne.n	8008ffe <_printf_float+0x172>
 8008f78:	2306      	movs	r3, #6
 8008f7a:	6063      	str	r3, [r4, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	9206      	str	r2, [sp, #24]
 8008f80:	aa0e      	add	r2, sp, #56	; 0x38
 8008f82:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008f86:	aa0d      	add	r2, sp, #52	; 0x34
 8008f88:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008f8c:	9203      	str	r2, [sp, #12]
 8008f8e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008f92:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008f96:	6023      	str	r3, [r4, #0]
 8008f98:	6863      	ldr	r3, [r4, #4]
 8008f9a:	4642      	mov	r2, r8
 8008f9c:	9300      	str	r3, [sp, #0]
 8008f9e:	4628      	mov	r0, r5
 8008fa0:	4653      	mov	r3, sl
 8008fa2:	910b      	str	r1, [sp, #44]	; 0x2c
 8008fa4:	f7ff fed4 	bl	8008d50 <__cvt>
 8008fa8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008faa:	4680      	mov	r8, r0
 8008fac:	2947      	cmp	r1, #71	; 0x47
 8008fae:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008fb0:	d108      	bne.n	8008fc4 <_printf_float+0x138>
 8008fb2:	1cc8      	adds	r0, r1, #3
 8008fb4:	db02      	blt.n	8008fbc <_printf_float+0x130>
 8008fb6:	6863      	ldr	r3, [r4, #4]
 8008fb8:	4299      	cmp	r1, r3
 8008fba:	dd40      	ble.n	800903e <_printf_float+0x1b2>
 8008fbc:	f1a9 0902 	sub.w	r9, r9, #2
 8008fc0:	fa5f f989 	uxtb.w	r9, r9
 8008fc4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008fc8:	d81f      	bhi.n	800900a <_printf_float+0x17e>
 8008fca:	464a      	mov	r2, r9
 8008fcc:	3901      	subs	r1, #1
 8008fce:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008fd2:	910d      	str	r1, [sp, #52]	; 0x34
 8008fd4:	f7ff ff1b 	bl	8008e0e <__exponent>
 8008fd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fda:	4682      	mov	sl, r0
 8008fdc:	1813      	adds	r3, r2, r0
 8008fde:	2a01      	cmp	r2, #1
 8008fe0:	6123      	str	r3, [r4, #16]
 8008fe2:	dc02      	bgt.n	8008fea <_printf_float+0x15e>
 8008fe4:	6822      	ldr	r2, [r4, #0]
 8008fe6:	07d2      	lsls	r2, r2, #31
 8008fe8:	d501      	bpl.n	8008fee <_printf_float+0x162>
 8008fea:	3301      	adds	r3, #1
 8008fec:	6123      	str	r3, [r4, #16]
 8008fee:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d09b      	beq.n	8008f2e <_printf_float+0xa2>
 8008ff6:	232d      	movs	r3, #45	; 0x2d
 8008ff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ffc:	e797      	b.n	8008f2e <_printf_float+0xa2>
 8008ffe:	2947      	cmp	r1, #71	; 0x47
 8009000:	d1bc      	bne.n	8008f7c <_printf_float+0xf0>
 8009002:	2b00      	cmp	r3, #0
 8009004:	d1ba      	bne.n	8008f7c <_printf_float+0xf0>
 8009006:	2301      	movs	r3, #1
 8009008:	e7b7      	b.n	8008f7a <_printf_float+0xee>
 800900a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800900e:	d118      	bne.n	8009042 <_printf_float+0x1b6>
 8009010:	2900      	cmp	r1, #0
 8009012:	6863      	ldr	r3, [r4, #4]
 8009014:	dd0b      	ble.n	800902e <_printf_float+0x1a2>
 8009016:	6121      	str	r1, [r4, #16]
 8009018:	b913      	cbnz	r3, 8009020 <_printf_float+0x194>
 800901a:	6822      	ldr	r2, [r4, #0]
 800901c:	07d0      	lsls	r0, r2, #31
 800901e:	d502      	bpl.n	8009026 <_printf_float+0x19a>
 8009020:	3301      	adds	r3, #1
 8009022:	440b      	add	r3, r1
 8009024:	6123      	str	r3, [r4, #16]
 8009026:	f04f 0a00 	mov.w	sl, #0
 800902a:	65a1      	str	r1, [r4, #88]	; 0x58
 800902c:	e7df      	b.n	8008fee <_printf_float+0x162>
 800902e:	b913      	cbnz	r3, 8009036 <_printf_float+0x1aa>
 8009030:	6822      	ldr	r2, [r4, #0]
 8009032:	07d2      	lsls	r2, r2, #31
 8009034:	d501      	bpl.n	800903a <_printf_float+0x1ae>
 8009036:	3302      	adds	r3, #2
 8009038:	e7f4      	b.n	8009024 <_printf_float+0x198>
 800903a:	2301      	movs	r3, #1
 800903c:	e7f2      	b.n	8009024 <_printf_float+0x198>
 800903e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009042:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009044:	4299      	cmp	r1, r3
 8009046:	db05      	blt.n	8009054 <_printf_float+0x1c8>
 8009048:	6823      	ldr	r3, [r4, #0]
 800904a:	6121      	str	r1, [r4, #16]
 800904c:	07d8      	lsls	r0, r3, #31
 800904e:	d5ea      	bpl.n	8009026 <_printf_float+0x19a>
 8009050:	1c4b      	adds	r3, r1, #1
 8009052:	e7e7      	b.n	8009024 <_printf_float+0x198>
 8009054:	2900      	cmp	r1, #0
 8009056:	bfcc      	ite	gt
 8009058:	2201      	movgt	r2, #1
 800905a:	f1c1 0202 	rsble	r2, r1, #2
 800905e:	4413      	add	r3, r2
 8009060:	e7e0      	b.n	8009024 <_printf_float+0x198>
 8009062:	6823      	ldr	r3, [r4, #0]
 8009064:	055a      	lsls	r2, r3, #21
 8009066:	d407      	bmi.n	8009078 <_printf_float+0x1ec>
 8009068:	6923      	ldr	r3, [r4, #16]
 800906a:	4642      	mov	r2, r8
 800906c:	4631      	mov	r1, r6
 800906e:	4628      	mov	r0, r5
 8009070:	47b8      	blx	r7
 8009072:	3001      	adds	r0, #1
 8009074:	d12b      	bne.n	80090ce <_printf_float+0x242>
 8009076:	e764      	b.n	8008f42 <_printf_float+0xb6>
 8009078:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800907c:	f240 80dd 	bls.w	800923a <_printf_float+0x3ae>
 8009080:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009084:	2200      	movs	r2, #0
 8009086:	2300      	movs	r3, #0
 8009088:	f7f7 fc8e 	bl	80009a8 <__aeabi_dcmpeq>
 800908c:	2800      	cmp	r0, #0
 800908e:	d033      	beq.n	80090f8 <_printf_float+0x26c>
 8009090:	2301      	movs	r3, #1
 8009092:	4631      	mov	r1, r6
 8009094:	4628      	mov	r0, r5
 8009096:	4a35      	ldr	r2, [pc, #212]	; (800916c <_printf_float+0x2e0>)
 8009098:	47b8      	blx	r7
 800909a:	3001      	adds	r0, #1
 800909c:	f43f af51 	beq.w	8008f42 <_printf_float+0xb6>
 80090a0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80090a4:	429a      	cmp	r2, r3
 80090a6:	db02      	blt.n	80090ae <_printf_float+0x222>
 80090a8:	6823      	ldr	r3, [r4, #0]
 80090aa:	07d8      	lsls	r0, r3, #31
 80090ac:	d50f      	bpl.n	80090ce <_printf_float+0x242>
 80090ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090b2:	4631      	mov	r1, r6
 80090b4:	4628      	mov	r0, r5
 80090b6:	47b8      	blx	r7
 80090b8:	3001      	adds	r0, #1
 80090ba:	f43f af42 	beq.w	8008f42 <_printf_float+0xb6>
 80090be:	f04f 0800 	mov.w	r8, #0
 80090c2:	f104 091a 	add.w	r9, r4, #26
 80090c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090c8:	3b01      	subs	r3, #1
 80090ca:	4543      	cmp	r3, r8
 80090cc:	dc09      	bgt.n	80090e2 <_printf_float+0x256>
 80090ce:	6823      	ldr	r3, [r4, #0]
 80090d0:	079b      	lsls	r3, r3, #30
 80090d2:	f100 8102 	bmi.w	80092da <_printf_float+0x44e>
 80090d6:	68e0      	ldr	r0, [r4, #12]
 80090d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090da:	4298      	cmp	r0, r3
 80090dc:	bfb8      	it	lt
 80090de:	4618      	movlt	r0, r3
 80090e0:	e731      	b.n	8008f46 <_printf_float+0xba>
 80090e2:	2301      	movs	r3, #1
 80090e4:	464a      	mov	r2, r9
 80090e6:	4631      	mov	r1, r6
 80090e8:	4628      	mov	r0, r5
 80090ea:	47b8      	blx	r7
 80090ec:	3001      	adds	r0, #1
 80090ee:	f43f af28 	beq.w	8008f42 <_printf_float+0xb6>
 80090f2:	f108 0801 	add.w	r8, r8, #1
 80090f6:	e7e6      	b.n	80090c6 <_printf_float+0x23a>
 80090f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	dc38      	bgt.n	8009170 <_printf_float+0x2e4>
 80090fe:	2301      	movs	r3, #1
 8009100:	4631      	mov	r1, r6
 8009102:	4628      	mov	r0, r5
 8009104:	4a19      	ldr	r2, [pc, #100]	; (800916c <_printf_float+0x2e0>)
 8009106:	47b8      	blx	r7
 8009108:	3001      	adds	r0, #1
 800910a:	f43f af1a 	beq.w	8008f42 <_printf_float+0xb6>
 800910e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009112:	4313      	orrs	r3, r2
 8009114:	d102      	bne.n	800911c <_printf_float+0x290>
 8009116:	6823      	ldr	r3, [r4, #0]
 8009118:	07d9      	lsls	r1, r3, #31
 800911a:	d5d8      	bpl.n	80090ce <_printf_float+0x242>
 800911c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009120:	4631      	mov	r1, r6
 8009122:	4628      	mov	r0, r5
 8009124:	47b8      	blx	r7
 8009126:	3001      	adds	r0, #1
 8009128:	f43f af0b 	beq.w	8008f42 <_printf_float+0xb6>
 800912c:	f04f 0900 	mov.w	r9, #0
 8009130:	f104 0a1a 	add.w	sl, r4, #26
 8009134:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009136:	425b      	negs	r3, r3
 8009138:	454b      	cmp	r3, r9
 800913a:	dc01      	bgt.n	8009140 <_printf_float+0x2b4>
 800913c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800913e:	e794      	b.n	800906a <_printf_float+0x1de>
 8009140:	2301      	movs	r3, #1
 8009142:	4652      	mov	r2, sl
 8009144:	4631      	mov	r1, r6
 8009146:	4628      	mov	r0, r5
 8009148:	47b8      	blx	r7
 800914a:	3001      	adds	r0, #1
 800914c:	f43f aef9 	beq.w	8008f42 <_printf_float+0xb6>
 8009150:	f109 0901 	add.w	r9, r9, #1
 8009154:	e7ee      	b.n	8009134 <_printf_float+0x2a8>
 8009156:	bf00      	nop
 8009158:	7fefffff 	.word	0x7fefffff
 800915c:	0800cf48 	.word	0x0800cf48
 8009160:	0800cf4c 	.word	0x0800cf4c
 8009164:	0800cf54 	.word	0x0800cf54
 8009168:	0800cf50 	.word	0x0800cf50
 800916c:	0800cf58 	.word	0x0800cf58
 8009170:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009172:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009174:	429a      	cmp	r2, r3
 8009176:	bfa8      	it	ge
 8009178:	461a      	movge	r2, r3
 800917a:	2a00      	cmp	r2, #0
 800917c:	4691      	mov	r9, r2
 800917e:	dc37      	bgt.n	80091f0 <_printf_float+0x364>
 8009180:	f04f 0b00 	mov.w	fp, #0
 8009184:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009188:	f104 021a 	add.w	r2, r4, #26
 800918c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009190:	ebaa 0309 	sub.w	r3, sl, r9
 8009194:	455b      	cmp	r3, fp
 8009196:	dc33      	bgt.n	8009200 <_printf_float+0x374>
 8009198:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800919c:	429a      	cmp	r2, r3
 800919e:	db3b      	blt.n	8009218 <_printf_float+0x38c>
 80091a0:	6823      	ldr	r3, [r4, #0]
 80091a2:	07da      	lsls	r2, r3, #31
 80091a4:	d438      	bmi.n	8009218 <_printf_float+0x38c>
 80091a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091a8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80091aa:	eba3 020a 	sub.w	r2, r3, sl
 80091ae:	eba3 0901 	sub.w	r9, r3, r1
 80091b2:	4591      	cmp	r9, r2
 80091b4:	bfa8      	it	ge
 80091b6:	4691      	movge	r9, r2
 80091b8:	f1b9 0f00 	cmp.w	r9, #0
 80091bc:	dc34      	bgt.n	8009228 <_printf_float+0x39c>
 80091be:	f04f 0800 	mov.w	r8, #0
 80091c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80091c6:	f104 0a1a 	add.w	sl, r4, #26
 80091ca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80091ce:	1a9b      	subs	r3, r3, r2
 80091d0:	eba3 0309 	sub.w	r3, r3, r9
 80091d4:	4543      	cmp	r3, r8
 80091d6:	f77f af7a 	ble.w	80090ce <_printf_float+0x242>
 80091da:	2301      	movs	r3, #1
 80091dc:	4652      	mov	r2, sl
 80091de:	4631      	mov	r1, r6
 80091e0:	4628      	mov	r0, r5
 80091e2:	47b8      	blx	r7
 80091e4:	3001      	adds	r0, #1
 80091e6:	f43f aeac 	beq.w	8008f42 <_printf_float+0xb6>
 80091ea:	f108 0801 	add.w	r8, r8, #1
 80091ee:	e7ec      	b.n	80091ca <_printf_float+0x33e>
 80091f0:	4613      	mov	r3, r2
 80091f2:	4631      	mov	r1, r6
 80091f4:	4642      	mov	r2, r8
 80091f6:	4628      	mov	r0, r5
 80091f8:	47b8      	blx	r7
 80091fa:	3001      	adds	r0, #1
 80091fc:	d1c0      	bne.n	8009180 <_printf_float+0x2f4>
 80091fe:	e6a0      	b.n	8008f42 <_printf_float+0xb6>
 8009200:	2301      	movs	r3, #1
 8009202:	4631      	mov	r1, r6
 8009204:	4628      	mov	r0, r5
 8009206:	920b      	str	r2, [sp, #44]	; 0x2c
 8009208:	47b8      	blx	r7
 800920a:	3001      	adds	r0, #1
 800920c:	f43f ae99 	beq.w	8008f42 <_printf_float+0xb6>
 8009210:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009212:	f10b 0b01 	add.w	fp, fp, #1
 8009216:	e7b9      	b.n	800918c <_printf_float+0x300>
 8009218:	4631      	mov	r1, r6
 800921a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800921e:	4628      	mov	r0, r5
 8009220:	47b8      	blx	r7
 8009222:	3001      	adds	r0, #1
 8009224:	d1bf      	bne.n	80091a6 <_printf_float+0x31a>
 8009226:	e68c      	b.n	8008f42 <_printf_float+0xb6>
 8009228:	464b      	mov	r3, r9
 800922a:	4631      	mov	r1, r6
 800922c:	4628      	mov	r0, r5
 800922e:	eb08 020a 	add.w	r2, r8, sl
 8009232:	47b8      	blx	r7
 8009234:	3001      	adds	r0, #1
 8009236:	d1c2      	bne.n	80091be <_printf_float+0x332>
 8009238:	e683      	b.n	8008f42 <_printf_float+0xb6>
 800923a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800923c:	2a01      	cmp	r2, #1
 800923e:	dc01      	bgt.n	8009244 <_printf_float+0x3b8>
 8009240:	07db      	lsls	r3, r3, #31
 8009242:	d537      	bpl.n	80092b4 <_printf_float+0x428>
 8009244:	2301      	movs	r3, #1
 8009246:	4642      	mov	r2, r8
 8009248:	4631      	mov	r1, r6
 800924a:	4628      	mov	r0, r5
 800924c:	47b8      	blx	r7
 800924e:	3001      	adds	r0, #1
 8009250:	f43f ae77 	beq.w	8008f42 <_printf_float+0xb6>
 8009254:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009258:	4631      	mov	r1, r6
 800925a:	4628      	mov	r0, r5
 800925c:	47b8      	blx	r7
 800925e:	3001      	adds	r0, #1
 8009260:	f43f ae6f 	beq.w	8008f42 <_printf_float+0xb6>
 8009264:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009268:	2200      	movs	r2, #0
 800926a:	2300      	movs	r3, #0
 800926c:	f7f7 fb9c 	bl	80009a8 <__aeabi_dcmpeq>
 8009270:	b9d8      	cbnz	r0, 80092aa <_printf_float+0x41e>
 8009272:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009274:	f108 0201 	add.w	r2, r8, #1
 8009278:	3b01      	subs	r3, #1
 800927a:	4631      	mov	r1, r6
 800927c:	4628      	mov	r0, r5
 800927e:	47b8      	blx	r7
 8009280:	3001      	adds	r0, #1
 8009282:	d10e      	bne.n	80092a2 <_printf_float+0x416>
 8009284:	e65d      	b.n	8008f42 <_printf_float+0xb6>
 8009286:	2301      	movs	r3, #1
 8009288:	464a      	mov	r2, r9
 800928a:	4631      	mov	r1, r6
 800928c:	4628      	mov	r0, r5
 800928e:	47b8      	blx	r7
 8009290:	3001      	adds	r0, #1
 8009292:	f43f ae56 	beq.w	8008f42 <_printf_float+0xb6>
 8009296:	f108 0801 	add.w	r8, r8, #1
 800929a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800929c:	3b01      	subs	r3, #1
 800929e:	4543      	cmp	r3, r8
 80092a0:	dcf1      	bgt.n	8009286 <_printf_float+0x3fa>
 80092a2:	4653      	mov	r3, sl
 80092a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80092a8:	e6e0      	b.n	800906c <_printf_float+0x1e0>
 80092aa:	f04f 0800 	mov.w	r8, #0
 80092ae:	f104 091a 	add.w	r9, r4, #26
 80092b2:	e7f2      	b.n	800929a <_printf_float+0x40e>
 80092b4:	2301      	movs	r3, #1
 80092b6:	4642      	mov	r2, r8
 80092b8:	e7df      	b.n	800927a <_printf_float+0x3ee>
 80092ba:	2301      	movs	r3, #1
 80092bc:	464a      	mov	r2, r9
 80092be:	4631      	mov	r1, r6
 80092c0:	4628      	mov	r0, r5
 80092c2:	47b8      	blx	r7
 80092c4:	3001      	adds	r0, #1
 80092c6:	f43f ae3c 	beq.w	8008f42 <_printf_float+0xb6>
 80092ca:	f108 0801 	add.w	r8, r8, #1
 80092ce:	68e3      	ldr	r3, [r4, #12]
 80092d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80092d2:	1a5b      	subs	r3, r3, r1
 80092d4:	4543      	cmp	r3, r8
 80092d6:	dcf0      	bgt.n	80092ba <_printf_float+0x42e>
 80092d8:	e6fd      	b.n	80090d6 <_printf_float+0x24a>
 80092da:	f04f 0800 	mov.w	r8, #0
 80092de:	f104 0919 	add.w	r9, r4, #25
 80092e2:	e7f4      	b.n	80092ce <_printf_float+0x442>

080092e4 <_printf_common>:
 80092e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092e8:	4616      	mov	r6, r2
 80092ea:	4699      	mov	r9, r3
 80092ec:	688a      	ldr	r2, [r1, #8]
 80092ee:	690b      	ldr	r3, [r1, #16]
 80092f0:	4607      	mov	r7, r0
 80092f2:	4293      	cmp	r3, r2
 80092f4:	bfb8      	it	lt
 80092f6:	4613      	movlt	r3, r2
 80092f8:	6033      	str	r3, [r6, #0]
 80092fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092fe:	460c      	mov	r4, r1
 8009300:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009304:	b10a      	cbz	r2, 800930a <_printf_common+0x26>
 8009306:	3301      	adds	r3, #1
 8009308:	6033      	str	r3, [r6, #0]
 800930a:	6823      	ldr	r3, [r4, #0]
 800930c:	0699      	lsls	r1, r3, #26
 800930e:	bf42      	ittt	mi
 8009310:	6833      	ldrmi	r3, [r6, #0]
 8009312:	3302      	addmi	r3, #2
 8009314:	6033      	strmi	r3, [r6, #0]
 8009316:	6825      	ldr	r5, [r4, #0]
 8009318:	f015 0506 	ands.w	r5, r5, #6
 800931c:	d106      	bne.n	800932c <_printf_common+0x48>
 800931e:	f104 0a19 	add.w	sl, r4, #25
 8009322:	68e3      	ldr	r3, [r4, #12]
 8009324:	6832      	ldr	r2, [r6, #0]
 8009326:	1a9b      	subs	r3, r3, r2
 8009328:	42ab      	cmp	r3, r5
 800932a:	dc28      	bgt.n	800937e <_printf_common+0x9a>
 800932c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009330:	1e13      	subs	r3, r2, #0
 8009332:	6822      	ldr	r2, [r4, #0]
 8009334:	bf18      	it	ne
 8009336:	2301      	movne	r3, #1
 8009338:	0692      	lsls	r2, r2, #26
 800933a:	d42d      	bmi.n	8009398 <_printf_common+0xb4>
 800933c:	4649      	mov	r1, r9
 800933e:	4638      	mov	r0, r7
 8009340:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009344:	47c0      	blx	r8
 8009346:	3001      	adds	r0, #1
 8009348:	d020      	beq.n	800938c <_printf_common+0xa8>
 800934a:	6823      	ldr	r3, [r4, #0]
 800934c:	68e5      	ldr	r5, [r4, #12]
 800934e:	f003 0306 	and.w	r3, r3, #6
 8009352:	2b04      	cmp	r3, #4
 8009354:	bf18      	it	ne
 8009356:	2500      	movne	r5, #0
 8009358:	6832      	ldr	r2, [r6, #0]
 800935a:	f04f 0600 	mov.w	r6, #0
 800935e:	68a3      	ldr	r3, [r4, #8]
 8009360:	bf08      	it	eq
 8009362:	1aad      	subeq	r5, r5, r2
 8009364:	6922      	ldr	r2, [r4, #16]
 8009366:	bf08      	it	eq
 8009368:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800936c:	4293      	cmp	r3, r2
 800936e:	bfc4      	itt	gt
 8009370:	1a9b      	subgt	r3, r3, r2
 8009372:	18ed      	addgt	r5, r5, r3
 8009374:	341a      	adds	r4, #26
 8009376:	42b5      	cmp	r5, r6
 8009378:	d11a      	bne.n	80093b0 <_printf_common+0xcc>
 800937a:	2000      	movs	r0, #0
 800937c:	e008      	b.n	8009390 <_printf_common+0xac>
 800937e:	2301      	movs	r3, #1
 8009380:	4652      	mov	r2, sl
 8009382:	4649      	mov	r1, r9
 8009384:	4638      	mov	r0, r7
 8009386:	47c0      	blx	r8
 8009388:	3001      	adds	r0, #1
 800938a:	d103      	bne.n	8009394 <_printf_common+0xb0>
 800938c:	f04f 30ff 	mov.w	r0, #4294967295
 8009390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009394:	3501      	adds	r5, #1
 8009396:	e7c4      	b.n	8009322 <_printf_common+0x3e>
 8009398:	2030      	movs	r0, #48	; 0x30
 800939a:	18e1      	adds	r1, r4, r3
 800939c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80093a0:	1c5a      	adds	r2, r3, #1
 80093a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80093a6:	4422      	add	r2, r4
 80093a8:	3302      	adds	r3, #2
 80093aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80093ae:	e7c5      	b.n	800933c <_printf_common+0x58>
 80093b0:	2301      	movs	r3, #1
 80093b2:	4622      	mov	r2, r4
 80093b4:	4649      	mov	r1, r9
 80093b6:	4638      	mov	r0, r7
 80093b8:	47c0      	blx	r8
 80093ba:	3001      	adds	r0, #1
 80093bc:	d0e6      	beq.n	800938c <_printf_common+0xa8>
 80093be:	3601      	adds	r6, #1
 80093c0:	e7d9      	b.n	8009376 <_printf_common+0x92>
	...

080093c4 <_printf_i>:
 80093c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093c8:	7e0f      	ldrb	r7, [r1, #24]
 80093ca:	4691      	mov	r9, r2
 80093cc:	2f78      	cmp	r7, #120	; 0x78
 80093ce:	4680      	mov	r8, r0
 80093d0:	460c      	mov	r4, r1
 80093d2:	469a      	mov	sl, r3
 80093d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80093d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80093da:	d807      	bhi.n	80093ec <_printf_i+0x28>
 80093dc:	2f62      	cmp	r7, #98	; 0x62
 80093de:	d80a      	bhi.n	80093f6 <_printf_i+0x32>
 80093e0:	2f00      	cmp	r7, #0
 80093e2:	f000 80d9 	beq.w	8009598 <_printf_i+0x1d4>
 80093e6:	2f58      	cmp	r7, #88	; 0x58
 80093e8:	f000 80a4 	beq.w	8009534 <_printf_i+0x170>
 80093ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80093f4:	e03a      	b.n	800946c <_printf_i+0xa8>
 80093f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80093fa:	2b15      	cmp	r3, #21
 80093fc:	d8f6      	bhi.n	80093ec <_printf_i+0x28>
 80093fe:	a101      	add	r1, pc, #4	; (adr r1, 8009404 <_printf_i+0x40>)
 8009400:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009404:	0800945d 	.word	0x0800945d
 8009408:	08009471 	.word	0x08009471
 800940c:	080093ed 	.word	0x080093ed
 8009410:	080093ed 	.word	0x080093ed
 8009414:	080093ed 	.word	0x080093ed
 8009418:	080093ed 	.word	0x080093ed
 800941c:	08009471 	.word	0x08009471
 8009420:	080093ed 	.word	0x080093ed
 8009424:	080093ed 	.word	0x080093ed
 8009428:	080093ed 	.word	0x080093ed
 800942c:	080093ed 	.word	0x080093ed
 8009430:	0800957f 	.word	0x0800957f
 8009434:	080094a1 	.word	0x080094a1
 8009438:	08009561 	.word	0x08009561
 800943c:	080093ed 	.word	0x080093ed
 8009440:	080093ed 	.word	0x080093ed
 8009444:	080095a1 	.word	0x080095a1
 8009448:	080093ed 	.word	0x080093ed
 800944c:	080094a1 	.word	0x080094a1
 8009450:	080093ed 	.word	0x080093ed
 8009454:	080093ed 	.word	0x080093ed
 8009458:	08009569 	.word	0x08009569
 800945c:	682b      	ldr	r3, [r5, #0]
 800945e:	1d1a      	adds	r2, r3, #4
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	602a      	str	r2, [r5, #0]
 8009464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009468:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800946c:	2301      	movs	r3, #1
 800946e:	e0a4      	b.n	80095ba <_printf_i+0x1f6>
 8009470:	6820      	ldr	r0, [r4, #0]
 8009472:	6829      	ldr	r1, [r5, #0]
 8009474:	0606      	lsls	r6, r0, #24
 8009476:	f101 0304 	add.w	r3, r1, #4
 800947a:	d50a      	bpl.n	8009492 <_printf_i+0xce>
 800947c:	680e      	ldr	r6, [r1, #0]
 800947e:	602b      	str	r3, [r5, #0]
 8009480:	2e00      	cmp	r6, #0
 8009482:	da03      	bge.n	800948c <_printf_i+0xc8>
 8009484:	232d      	movs	r3, #45	; 0x2d
 8009486:	4276      	negs	r6, r6
 8009488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800948c:	230a      	movs	r3, #10
 800948e:	485e      	ldr	r0, [pc, #376]	; (8009608 <_printf_i+0x244>)
 8009490:	e019      	b.n	80094c6 <_printf_i+0x102>
 8009492:	680e      	ldr	r6, [r1, #0]
 8009494:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009498:	602b      	str	r3, [r5, #0]
 800949a:	bf18      	it	ne
 800949c:	b236      	sxthne	r6, r6
 800949e:	e7ef      	b.n	8009480 <_printf_i+0xbc>
 80094a0:	682b      	ldr	r3, [r5, #0]
 80094a2:	6820      	ldr	r0, [r4, #0]
 80094a4:	1d19      	adds	r1, r3, #4
 80094a6:	6029      	str	r1, [r5, #0]
 80094a8:	0601      	lsls	r1, r0, #24
 80094aa:	d501      	bpl.n	80094b0 <_printf_i+0xec>
 80094ac:	681e      	ldr	r6, [r3, #0]
 80094ae:	e002      	b.n	80094b6 <_printf_i+0xf2>
 80094b0:	0646      	lsls	r6, r0, #25
 80094b2:	d5fb      	bpl.n	80094ac <_printf_i+0xe8>
 80094b4:	881e      	ldrh	r6, [r3, #0]
 80094b6:	2f6f      	cmp	r7, #111	; 0x6f
 80094b8:	bf0c      	ite	eq
 80094ba:	2308      	moveq	r3, #8
 80094bc:	230a      	movne	r3, #10
 80094be:	4852      	ldr	r0, [pc, #328]	; (8009608 <_printf_i+0x244>)
 80094c0:	2100      	movs	r1, #0
 80094c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80094c6:	6865      	ldr	r5, [r4, #4]
 80094c8:	2d00      	cmp	r5, #0
 80094ca:	bfa8      	it	ge
 80094cc:	6821      	ldrge	r1, [r4, #0]
 80094ce:	60a5      	str	r5, [r4, #8]
 80094d0:	bfa4      	itt	ge
 80094d2:	f021 0104 	bicge.w	r1, r1, #4
 80094d6:	6021      	strge	r1, [r4, #0]
 80094d8:	b90e      	cbnz	r6, 80094de <_printf_i+0x11a>
 80094da:	2d00      	cmp	r5, #0
 80094dc:	d04d      	beq.n	800957a <_printf_i+0x1b6>
 80094de:	4615      	mov	r5, r2
 80094e0:	fbb6 f1f3 	udiv	r1, r6, r3
 80094e4:	fb03 6711 	mls	r7, r3, r1, r6
 80094e8:	5dc7      	ldrb	r7, [r0, r7]
 80094ea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80094ee:	4637      	mov	r7, r6
 80094f0:	42bb      	cmp	r3, r7
 80094f2:	460e      	mov	r6, r1
 80094f4:	d9f4      	bls.n	80094e0 <_printf_i+0x11c>
 80094f6:	2b08      	cmp	r3, #8
 80094f8:	d10b      	bne.n	8009512 <_printf_i+0x14e>
 80094fa:	6823      	ldr	r3, [r4, #0]
 80094fc:	07de      	lsls	r6, r3, #31
 80094fe:	d508      	bpl.n	8009512 <_printf_i+0x14e>
 8009500:	6923      	ldr	r3, [r4, #16]
 8009502:	6861      	ldr	r1, [r4, #4]
 8009504:	4299      	cmp	r1, r3
 8009506:	bfde      	ittt	le
 8009508:	2330      	movle	r3, #48	; 0x30
 800950a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800950e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009512:	1b52      	subs	r2, r2, r5
 8009514:	6122      	str	r2, [r4, #16]
 8009516:	464b      	mov	r3, r9
 8009518:	4621      	mov	r1, r4
 800951a:	4640      	mov	r0, r8
 800951c:	f8cd a000 	str.w	sl, [sp]
 8009520:	aa03      	add	r2, sp, #12
 8009522:	f7ff fedf 	bl	80092e4 <_printf_common>
 8009526:	3001      	adds	r0, #1
 8009528:	d14c      	bne.n	80095c4 <_printf_i+0x200>
 800952a:	f04f 30ff 	mov.w	r0, #4294967295
 800952e:	b004      	add	sp, #16
 8009530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009534:	4834      	ldr	r0, [pc, #208]	; (8009608 <_printf_i+0x244>)
 8009536:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800953a:	6829      	ldr	r1, [r5, #0]
 800953c:	6823      	ldr	r3, [r4, #0]
 800953e:	f851 6b04 	ldr.w	r6, [r1], #4
 8009542:	6029      	str	r1, [r5, #0]
 8009544:	061d      	lsls	r5, r3, #24
 8009546:	d514      	bpl.n	8009572 <_printf_i+0x1ae>
 8009548:	07df      	lsls	r7, r3, #31
 800954a:	bf44      	itt	mi
 800954c:	f043 0320 	orrmi.w	r3, r3, #32
 8009550:	6023      	strmi	r3, [r4, #0]
 8009552:	b91e      	cbnz	r6, 800955c <_printf_i+0x198>
 8009554:	6823      	ldr	r3, [r4, #0]
 8009556:	f023 0320 	bic.w	r3, r3, #32
 800955a:	6023      	str	r3, [r4, #0]
 800955c:	2310      	movs	r3, #16
 800955e:	e7af      	b.n	80094c0 <_printf_i+0xfc>
 8009560:	6823      	ldr	r3, [r4, #0]
 8009562:	f043 0320 	orr.w	r3, r3, #32
 8009566:	6023      	str	r3, [r4, #0]
 8009568:	2378      	movs	r3, #120	; 0x78
 800956a:	4828      	ldr	r0, [pc, #160]	; (800960c <_printf_i+0x248>)
 800956c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009570:	e7e3      	b.n	800953a <_printf_i+0x176>
 8009572:	0659      	lsls	r1, r3, #25
 8009574:	bf48      	it	mi
 8009576:	b2b6      	uxthmi	r6, r6
 8009578:	e7e6      	b.n	8009548 <_printf_i+0x184>
 800957a:	4615      	mov	r5, r2
 800957c:	e7bb      	b.n	80094f6 <_printf_i+0x132>
 800957e:	682b      	ldr	r3, [r5, #0]
 8009580:	6826      	ldr	r6, [r4, #0]
 8009582:	1d18      	adds	r0, r3, #4
 8009584:	6961      	ldr	r1, [r4, #20]
 8009586:	6028      	str	r0, [r5, #0]
 8009588:	0635      	lsls	r5, r6, #24
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	d501      	bpl.n	8009592 <_printf_i+0x1ce>
 800958e:	6019      	str	r1, [r3, #0]
 8009590:	e002      	b.n	8009598 <_printf_i+0x1d4>
 8009592:	0670      	lsls	r0, r6, #25
 8009594:	d5fb      	bpl.n	800958e <_printf_i+0x1ca>
 8009596:	8019      	strh	r1, [r3, #0]
 8009598:	2300      	movs	r3, #0
 800959a:	4615      	mov	r5, r2
 800959c:	6123      	str	r3, [r4, #16]
 800959e:	e7ba      	b.n	8009516 <_printf_i+0x152>
 80095a0:	682b      	ldr	r3, [r5, #0]
 80095a2:	2100      	movs	r1, #0
 80095a4:	1d1a      	adds	r2, r3, #4
 80095a6:	602a      	str	r2, [r5, #0]
 80095a8:	681d      	ldr	r5, [r3, #0]
 80095aa:	6862      	ldr	r2, [r4, #4]
 80095ac:	4628      	mov	r0, r5
 80095ae:	f000 fee9 	bl	800a384 <memchr>
 80095b2:	b108      	cbz	r0, 80095b8 <_printf_i+0x1f4>
 80095b4:	1b40      	subs	r0, r0, r5
 80095b6:	6060      	str	r0, [r4, #4]
 80095b8:	6863      	ldr	r3, [r4, #4]
 80095ba:	6123      	str	r3, [r4, #16]
 80095bc:	2300      	movs	r3, #0
 80095be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095c2:	e7a8      	b.n	8009516 <_printf_i+0x152>
 80095c4:	462a      	mov	r2, r5
 80095c6:	4649      	mov	r1, r9
 80095c8:	4640      	mov	r0, r8
 80095ca:	6923      	ldr	r3, [r4, #16]
 80095cc:	47d0      	blx	sl
 80095ce:	3001      	adds	r0, #1
 80095d0:	d0ab      	beq.n	800952a <_printf_i+0x166>
 80095d2:	6823      	ldr	r3, [r4, #0]
 80095d4:	079b      	lsls	r3, r3, #30
 80095d6:	d413      	bmi.n	8009600 <_printf_i+0x23c>
 80095d8:	68e0      	ldr	r0, [r4, #12]
 80095da:	9b03      	ldr	r3, [sp, #12]
 80095dc:	4298      	cmp	r0, r3
 80095de:	bfb8      	it	lt
 80095e0:	4618      	movlt	r0, r3
 80095e2:	e7a4      	b.n	800952e <_printf_i+0x16a>
 80095e4:	2301      	movs	r3, #1
 80095e6:	4632      	mov	r2, r6
 80095e8:	4649      	mov	r1, r9
 80095ea:	4640      	mov	r0, r8
 80095ec:	47d0      	blx	sl
 80095ee:	3001      	adds	r0, #1
 80095f0:	d09b      	beq.n	800952a <_printf_i+0x166>
 80095f2:	3501      	adds	r5, #1
 80095f4:	68e3      	ldr	r3, [r4, #12]
 80095f6:	9903      	ldr	r1, [sp, #12]
 80095f8:	1a5b      	subs	r3, r3, r1
 80095fa:	42ab      	cmp	r3, r5
 80095fc:	dcf2      	bgt.n	80095e4 <_printf_i+0x220>
 80095fe:	e7eb      	b.n	80095d8 <_printf_i+0x214>
 8009600:	2500      	movs	r5, #0
 8009602:	f104 0619 	add.w	r6, r4, #25
 8009606:	e7f5      	b.n	80095f4 <_printf_i+0x230>
 8009608:	0800cf5a 	.word	0x0800cf5a
 800960c:	0800cf6b 	.word	0x0800cf6b

08009610 <sniprintf>:
 8009610:	b40c      	push	{r2, r3}
 8009612:	b530      	push	{r4, r5, lr}
 8009614:	4b17      	ldr	r3, [pc, #92]	; (8009674 <sniprintf+0x64>)
 8009616:	1e0c      	subs	r4, r1, #0
 8009618:	681d      	ldr	r5, [r3, #0]
 800961a:	b09d      	sub	sp, #116	; 0x74
 800961c:	da08      	bge.n	8009630 <sniprintf+0x20>
 800961e:	238b      	movs	r3, #139	; 0x8b
 8009620:	f04f 30ff 	mov.w	r0, #4294967295
 8009624:	602b      	str	r3, [r5, #0]
 8009626:	b01d      	add	sp, #116	; 0x74
 8009628:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800962c:	b002      	add	sp, #8
 800962e:	4770      	bx	lr
 8009630:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009634:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009638:	bf0c      	ite	eq
 800963a:	4623      	moveq	r3, r4
 800963c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009640:	9304      	str	r3, [sp, #16]
 8009642:	9307      	str	r3, [sp, #28]
 8009644:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009648:	9002      	str	r0, [sp, #8]
 800964a:	9006      	str	r0, [sp, #24]
 800964c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009650:	4628      	mov	r0, r5
 8009652:	ab21      	add	r3, sp, #132	; 0x84
 8009654:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009656:	a902      	add	r1, sp, #8
 8009658:	9301      	str	r3, [sp, #4]
 800965a:	f001 fb7d 	bl	800ad58 <_svfiprintf_r>
 800965e:	1c43      	adds	r3, r0, #1
 8009660:	bfbc      	itt	lt
 8009662:	238b      	movlt	r3, #139	; 0x8b
 8009664:	602b      	strlt	r3, [r5, #0]
 8009666:	2c00      	cmp	r4, #0
 8009668:	d0dd      	beq.n	8009626 <sniprintf+0x16>
 800966a:	2200      	movs	r2, #0
 800966c:	9b02      	ldr	r3, [sp, #8]
 800966e:	701a      	strb	r2, [r3, #0]
 8009670:	e7d9      	b.n	8009626 <sniprintf+0x16>
 8009672:	bf00      	nop
 8009674:	20000024 	.word	0x20000024

08009678 <quorem>:
 8009678:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800967c:	6903      	ldr	r3, [r0, #16]
 800967e:	690c      	ldr	r4, [r1, #16]
 8009680:	4607      	mov	r7, r0
 8009682:	42a3      	cmp	r3, r4
 8009684:	f2c0 8082 	blt.w	800978c <quorem+0x114>
 8009688:	3c01      	subs	r4, #1
 800968a:	f100 0514 	add.w	r5, r0, #20
 800968e:	f101 0814 	add.w	r8, r1, #20
 8009692:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009696:	9301      	str	r3, [sp, #4]
 8009698:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800969c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096a0:	3301      	adds	r3, #1
 80096a2:	429a      	cmp	r2, r3
 80096a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80096a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80096ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80096b0:	d331      	bcc.n	8009716 <quorem+0x9e>
 80096b2:	f04f 0e00 	mov.w	lr, #0
 80096b6:	4640      	mov	r0, r8
 80096b8:	46ac      	mov	ip, r5
 80096ba:	46f2      	mov	sl, lr
 80096bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80096c0:	b293      	uxth	r3, r2
 80096c2:	fb06 e303 	mla	r3, r6, r3, lr
 80096c6:	0c12      	lsrs	r2, r2, #16
 80096c8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	fb06 e202 	mla	r2, r6, r2, lr
 80096d2:	ebaa 0303 	sub.w	r3, sl, r3
 80096d6:	f8dc a000 	ldr.w	sl, [ip]
 80096da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80096de:	fa1f fa8a 	uxth.w	sl, sl
 80096e2:	4453      	add	r3, sl
 80096e4:	f8dc a000 	ldr.w	sl, [ip]
 80096e8:	b292      	uxth	r2, r2
 80096ea:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80096ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80096f2:	b29b      	uxth	r3, r3
 80096f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096f8:	4581      	cmp	r9, r0
 80096fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80096fe:	f84c 3b04 	str.w	r3, [ip], #4
 8009702:	d2db      	bcs.n	80096bc <quorem+0x44>
 8009704:	f855 300b 	ldr.w	r3, [r5, fp]
 8009708:	b92b      	cbnz	r3, 8009716 <quorem+0x9e>
 800970a:	9b01      	ldr	r3, [sp, #4]
 800970c:	3b04      	subs	r3, #4
 800970e:	429d      	cmp	r5, r3
 8009710:	461a      	mov	r2, r3
 8009712:	d32f      	bcc.n	8009774 <quorem+0xfc>
 8009714:	613c      	str	r4, [r7, #16]
 8009716:	4638      	mov	r0, r7
 8009718:	f001 f8ce 	bl	800a8b8 <__mcmp>
 800971c:	2800      	cmp	r0, #0
 800971e:	db25      	blt.n	800976c <quorem+0xf4>
 8009720:	4628      	mov	r0, r5
 8009722:	f04f 0c00 	mov.w	ip, #0
 8009726:	3601      	adds	r6, #1
 8009728:	f858 1b04 	ldr.w	r1, [r8], #4
 800972c:	f8d0 e000 	ldr.w	lr, [r0]
 8009730:	b28b      	uxth	r3, r1
 8009732:	ebac 0303 	sub.w	r3, ip, r3
 8009736:	fa1f f28e 	uxth.w	r2, lr
 800973a:	4413      	add	r3, r2
 800973c:	0c0a      	lsrs	r2, r1, #16
 800973e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009742:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009746:	b29b      	uxth	r3, r3
 8009748:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800974c:	45c1      	cmp	r9, r8
 800974e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009752:	f840 3b04 	str.w	r3, [r0], #4
 8009756:	d2e7      	bcs.n	8009728 <quorem+0xb0>
 8009758:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800975c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009760:	b922      	cbnz	r2, 800976c <quorem+0xf4>
 8009762:	3b04      	subs	r3, #4
 8009764:	429d      	cmp	r5, r3
 8009766:	461a      	mov	r2, r3
 8009768:	d30a      	bcc.n	8009780 <quorem+0x108>
 800976a:	613c      	str	r4, [r7, #16]
 800976c:	4630      	mov	r0, r6
 800976e:	b003      	add	sp, #12
 8009770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009774:	6812      	ldr	r2, [r2, #0]
 8009776:	3b04      	subs	r3, #4
 8009778:	2a00      	cmp	r2, #0
 800977a:	d1cb      	bne.n	8009714 <quorem+0x9c>
 800977c:	3c01      	subs	r4, #1
 800977e:	e7c6      	b.n	800970e <quorem+0x96>
 8009780:	6812      	ldr	r2, [r2, #0]
 8009782:	3b04      	subs	r3, #4
 8009784:	2a00      	cmp	r2, #0
 8009786:	d1f0      	bne.n	800976a <quorem+0xf2>
 8009788:	3c01      	subs	r4, #1
 800978a:	e7eb      	b.n	8009764 <quorem+0xec>
 800978c:	2000      	movs	r0, #0
 800978e:	e7ee      	b.n	800976e <quorem+0xf6>

08009790 <_dtoa_r>:
 8009790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009794:	4616      	mov	r6, r2
 8009796:	461f      	mov	r7, r3
 8009798:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800979a:	b099      	sub	sp, #100	; 0x64
 800979c:	4605      	mov	r5, r0
 800979e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80097a2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80097a6:	b974      	cbnz	r4, 80097c6 <_dtoa_r+0x36>
 80097a8:	2010      	movs	r0, #16
 80097aa:	f000 fde3 	bl	800a374 <malloc>
 80097ae:	4602      	mov	r2, r0
 80097b0:	6268      	str	r0, [r5, #36]	; 0x24
 80097b2:	b920      	cbnz	r0, 80097be <_dtoa_r+0x2e>
 80097b4:	21ea      	movs	r1, #234	; 0xea
 80097b6:	4ba8      	ldr	r3, [pc, #672]	; (8009a58 <_dtoa_r+0x2c8>)
 80097b8:	48a8      	ldr	r0, [pc, #672]	; (8009a5c <_dtoa_r+0x2cc>)
 80097ba:	f001 fbdd 	bl	800af78 <__assert_func>
 80097be:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80097c2:	6004      	str	r4, [r0, #0]
 80097c4:	60c4      	str	r4, [r0, #12]
 80097c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80097c8:	6819      	ldr	r1, [r3, #0]
 80097ca:	b151      	cbz	r1, 80097e2 <_dtoa_r+0x52>
 80097cc:	685a      	ldr	r2, [r3, #4]
 80097ce:	2301      	movs	r3, #1
 80097d0:	4093      	lsls	r3, r2
 80097d2:	604a      	str	r2, [r1, #4]
 80097d4:	608b      	str	r3, [r1, #8]
 80097d6:	4628      	mov	r0, r5
 80097d8:	f000 fe30 	bl	800a43c <_Bfree>
 80097dc:	2200      	movs	r2, #0
 80097de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80097e0:	601a      	str	r2, [r3, #0]
 80097e2:	1e3b      	subs	r3, r7, #0
 80097e4:	bfaf      	iteee	ge
 80097e6:	2300      	movge	r3, #0
 80097e8:	2201      	movlt	r2, #1
 80097ea:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80097ee:	9305      	strlt	r3, [sp, #20]
 80097f0:	bfa8      	it	ge
 80097f2:	f8c8 3000 	strge.w	r3, [r8]
 80097f6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80097fa:	4b99      	ldr	r3, [pc, #612]	; (8009a60 <_dtoa_r+0x2d0>)
 80097fc:	bfb8      	it	lt
 80097fe:	f8c8 2000 	strlt.w	r2, [r8]
 8009802:	ea33 0309 	bics.w	r3, r3, r9
 8009806:	d119      	bne.n	800983c <_dtoa_r+0xac>
 8009808:	f242 730f 	movw	r3, #9999	; 0x270f
 800980c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800980e:	6013      	str	r3, [r2, #0]
 8009810:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009814:	4333      	orrs	r3, r6
 8009816:	f000 857f 	beq.w	800a318 <_dtoa_r+0xb88>
 800981a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800981c:	b953      	cbnz	r3, 8009834 <_dtoa_r+0xa4>
 800981e:	4b91      	ldr	r3, [pc, #580]	; (8009a64 <_dtoa_r+0x2d4>)
 8009820:	e022      	b.n	8009868 <_dtoa_r+0xd8>
 8009822:	4b91      	ldr	r3, [pc, #580]	; (8009a68 <_dtoa_r+0x2d8>)
 8009824:	9303      	str	r3, [sp, #12]
 8009826:	3308      	adds	r3, #8
 8009828:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800982a:	6013      	str	r3, [r2, #0]
 800982c:	9803      	ldr	r0, [sp, #12]
 800982e:	b019      	add	sp, #100	; 0x64
 8009830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009834:	4b8b      	ldr	r3, [pc, #556]	; (8009a64 <_dtoa_r+0x2d4>)
 8009836:	9303      	str	r3, [sp, #12]
 8009838:	3303      	adds	r3, #3
 800983a:	e7f5      	b.n	8009828 <_dtoa_r+0x98>
 800983c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009840:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009844:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009848:	2200      	movs	r2, #0
 800984a:	2300      	movs	r3, #0
 800984c:	f7f7 f8ac 	bl	80009a8 <__aeabi_dcmpeq>
 8009850:	4680      	mov	r8, r0
 8009852:	b158      	cbz	r0, 800986c <_dtoa_r+0xdc>
 8009854:	2301      	movs	r3, #1
 8009856:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009858:	6013      	str	r3, [r2, #0]
 800985a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800985c:	2b00      	cmp	r3, #0
 800985e:	f000 8558 	beq.w	800a312 <_dtoa_r+0xb82>
 8009862:	4882      	ldr	r0, [pc, #520]	; (8009a6c <_dtoa_r+0x2dc>)
 8009864:	6018      	str	r0, [r3, #0]
 8009866:	1e43      	subs	r3, r0, #1
 8009868:	9303      	str	r3, [sp, #12]
 800986a:	e7df      	b.n	800982c <_dtoa_r+0x9c>
 800986c:	ab16      	add	r3, sp, #88	; 0x58
 800986e:	9301      	str	r3, [sp, #4]
 8009870:	ab17      	add	r3, sp, #92	; 0x5c
 8009872:	9300      	str	r3, [sp, #0]
 8009874:	4628      	mov	r0, r5
 8009876:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800987a:	f001 f8c5 	bl	800aa08 <__d2b>
 800987e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009882:	4683      	mov	fp, r0
 8009884:	2c00      	cmp	r4, #0
 8009886:	d07f      	beq.n	8009988 <_dtoa_r+0x1f8>
 8009888:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800988c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800988e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009892:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009896:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800989a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800989e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80098a2:	2200      	movs	r2, #0
 80098a4:	4b72      	ldr	r3, [pc, #456]	; (8009a70 <_dtoa_r+0x2e0>)
 80098a6:	f7f6 fc5f 	bl	8000168 <__aeabi_dsub>
 80098aa:	a365      	add	r3, pc, #404	; (adr r3, 8009a40 <_dtoa_r+0x2b0>)
 80098ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b0:	f7f6 fe12 	bl	80004d8 <__aeabi_dmul>
 80098b4:	a364      	add	r3, pc, #400	; (adr r3, 8009a48 <_dtoa_r+0x2b8>)
 80098b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ba:	f7f6 fc57 	bl	800016c <__adddf3>
 80098be:	4606      	mov	r6, r0
 80098c0:	4620      	mov	r0, r4
 80098c2:	460f      	mov	r7, r1
 80098c4:	f7f6 fd9e 	bl	8000404 <__aeabi_i2d>
 80098c8:	a361      	add	r3, pc, #388	; (adr r3, 8009a50 <_dtoa_r+0x2c0>)
 80098ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ce:	f7f6 fe03 	bl	80004d8 <__aeabi_dmul>
 80098d2:	4602      	mov	r2, r0
 80098d4:	460b      	mov	r3, r1
 80098d6:	4630      	mov	r0, r6
 80098d8:	4639      	mov	r1, r7
 80098da:	f7f6 fc47 	bl	800016c <__adddf3>
 80098de:	4606      	mov	r6, r0
 80098e0:	460f      	mov	r7, r1
 80098e2:	f7f7 f8a9 	bl	8000a38 <__aeabi_d2iz>
 80098e6:	2200      	movs	r2, #0
 80098e8:	4682      	mov	sl, r0
 80098ea:	2300      	movs	r3, #0
 80098ec:	4630      	mov	r0, r6
 80098ee:	4639      	mov	r1, r7
 80098f0:	f7f7 f864 	bl	80009bc <__aeabi_dcmplt>
 80098f4:	b148      	cbz	r0, 800990a <_dtoa_r+0x17a>
 80098f6:	4650      	mov	r0, sl
 80098f8:	f7f6 fd84 	bl	8000404 <__aeabi_i2d>
 80098fc:	4632      	mov	r2, r6
 80098fe:	463b      	mov	r3, r7
 8009900:	f7f7 f852 	bl	80009a8 <__aeabi_dcmpeq>
 8009904:	b908      	cbnz	r0, 800990a <_dtoa_r+0x17a>
 8009906:	f10a 3aff 	add.w	sl, sl, #4294967295
 800990a:	f1ba 0f16 	cmp.w	sl, #22
 800990e:	d858      	bhi.n	80099c2 <_dtoa_r+0x232>
 8009910:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009914:	4b57      	ldr	r3, [pc, #348]	; (8009a74 <_dtoa_r+0x2e4>)
 8009916:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800991a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991e:	f7f7 f84d 	bl	80009bc <__aeabi_dcmplt>
 8009922:	2800      	cmp	r0, #0
 8009924:	d04f      	beq.n	80099c6 <_dtoa_r+0x236>
 8009926:	2300      	movs	r3, #0
 8009928:	f10a 3aff 	add.w	sl, sl, #4294967295
 800992c:	930f      	str	r3, [sp, #60]	; 0x3c
 800992e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009930:	1b1c      	subs	r4, r3, r4
 8009932:	1e63      	subs	r3, r4, #1
 8009934:	9309      	str	r3, [sp, #36]	; 0x24
 8009936:	bf49      	itett	mi
 8009938:	f1c4 0301 	rsbmi	r3, r4, #1
 800993c:	2300      	movpl	r3, #0
 800993e:	9306      	strmi	r3, [sp, #24]
 8009940:	2300      	movmi	r3, #0
 8009942:	bf54      	ite	pl
 8009944:	9306      	strpl	r3, [sp, #24]
 8009946:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009948:	f1ba 0f00 	cmp.w	sl, #0
 800994c:	db3d      	blt.n	80099ca <_dtoa_r+0x23a>
 800994e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009950:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009954:	4453      	add	r3, sl
 8009956:	9309      	str	r3, [sp, #36]	; 0x24
 8009958:	2300      	movs	r3, #0
 800995a:	930a      	str	r3, [sp, #40]	; 0x28
 800995c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800995e:	2b09      	cmp	r3, #9
 8009960:	f200 808c 	bhi.w	8009a7c <_dtoa_r+0x2ec>
 8009964:	2b05      	cmp	r3, #5
 8009966:	bfc4      	itt	gt
 8009968:	3b04      	subgt	r3, #4
 800996a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800996c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800996e:	bfc8      	it	gt
 8009970:	2400      	movgt	r4, #0
 8009972:	f1a3 0302 	sub.w	r3, r3, #2
 8009976:	bfd8      	it	le
 8009978:	2401      	movle	r4, #1
 800997a:	2b03      	cmp	r3, #3
 800997c:	f200 808a 	bhi.w	8009a94 <_dtoa_r+0x304>
 8009980:	e8df f003 	tbb	[pc, r3]
 8009984:	5b4d4f2d 	.word	0x5b4d4f2d
 8009988:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800998c:	441c      	add	r4, r3
 800998e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009992:	2b20      	cmp	r3, #32
 8009994:	bfc3      	ittte	gt
 8009996:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800999a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800999e:	fa09 f303 	lslgt.w	r3, r9, r3
 80099a2:	f1c3 0320 	rsble	r3, r3, #32
 80099a6:	bfc6      	itte	gt
 80099a8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80099ac:	4318      	orrgt	r0, r3
 80099ae:	fa06 f003 	lslle.w	r0, r6, r3
 80099b2:	f7f6 fd17 	bl	80003e4 <__aeabi_ui2d>
 80099b6:	2301      	movs	r3, #1
 80099b8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80099bc:	3c01      	subs	r4, #1
 80099be:	9313      	str	r3, [sp, #76]	; 0x4c
 80099c0:	e76f      	b.n	80098a2 <_dtoa_r+0x112>
 80099c2:	2301      	movs	r3, #1
 80099c4:	e7b2      	b.n	800992c <_dtoa_r+0x19c>
 80099c6:	900f      	str	r0, [sp, #60]	; 0x3c
 80099c8:	e7b1      	b.n	800992e <_dtoa_r+0x19e>
 80099ca:	9b06      	ldr	r3, [sp, #24]
 80099cc:	eba3 030a 	sub.w	r3, r3, sl
 80099d0:	9306      	str	r3, [sp, #24]
 80099d2:	f1ca 0300 	rsb	r3, sl, #0
 80099d6:	930a      	str	r3, [sp, #40]	; 0x28
 80099d8:	2300      	movs	r3, #0
 80099da:	930e      	str	r3, [sp, #56]	; 0x38
 80099dc:	e7be      	b.n	800995c <_dtoa_r+0x1cc>
 80099de:	2300      	movs	r3, #0
 80099e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80099e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	dc58      	bgt.n	8009a9a <_dtoa_r+0x30a>
 80099e8:	f04f 0901 	mov.w	r9, #1
 80099ec:	464b      	mov	r3, r9
 80099ee:	f8cd 9020 	str.w	r9, [sp, #32]
 80099f2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80099f6:	2200      	movs	r2, #0
 80099f8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80099fa:	6042      	str	r2, [r0, #4]
 80099fc:	2204      	movs	r2, #4
 80099fe:	f102 0614 	add.w	r6, r2, #20
 8009a02:	429e      	cmp	r6, r3
 8009a04:	6841      	ldr	r1, [r0, #4]
 8009a06:	d94e      	bls.n	8009aa6 <_dtoa_r+0x316>
 8009a08:	4628      	mov	r0, r5
 8009a0a:	f000 fcd7 	bl	800a3bc <_Balloc>
 8009a0e:	9003      	str	r0, [sp, #12]
 8009a10:	2800      	cmp	r0, #0
 8009a12:	d14c      	bne.n	8009aae <_dtoa_r+0x31e>
 8009a14:	4602      	mov	r2, r0
 8009a16:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009a1a:	4b17      	ldr	r3, [pc, #92]	; (8009a78 <_dtoa_r+0x2e8>)
 8009a1c:	e6cc      	b.n	80097b8 <_dtoa_r+0x28>
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e7de      	b.n	80099e0 <_dtoa_r+0x250>
 8009a22:	2300      	movs	r3, #0
 8009a24:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a26:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a28:	eb0a 0903 	add.w	r9, sl, r3
 8009a2c:	f109 0301 	add.w	r3, r9, #1
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	9308      	str	r3, [sp, #32]
 8009a34:	bfb8      	it	lt
 8009a36:	2301      	movlt	r3, #1
 8009a38:	e7dd      	b.n	80099f6 <_dtoa_r+0x266>
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e7f2      	b.n	8009a24 <_dtoa_r+0x294>
 8009a3e:	bf00      	nop
 8009a40:	636f4361 	.word	0x636f4361
 8009a44:	3fd287a7 	.word	0x3fd287a7
 8009a48:	8b60c8b3 	.word	0x8b60c8b3
 8009a4c:	3fc68a28 	.word	0x3fc68a28
 8009a50:	509f79fb 	.word	0x509f79fb
 8009a54:	3fd34413 	.word	0x3fd34413
 8009a58:	0800cf89 	.word	0x0800cf89
 8009a5c:	0800cfa0 	.word	0x0800cfa0
 8009a60:	7ff00000 	.word	0x7ff00000
 8009a64:	0800cf85 	.word	0x0800cf85
 8009a68:	0800cf7c 	.word	0x0800cf7c
 8009a6c:	0800cf59 	.word	0x0800cf59
 8009a70:	3ff80000 	.word	0x3ff80000
 8009a74:	0800d090 	.word	0x0800d090
 8009a78:	0800cffb 	.word	0x0800cffb
 8009a7c:	2401      	movs	r4, #1
 8009a7e:	2300      	movs	r3, #0
 8009a80:	940b      	str	r4, [sp, #44]	; 0x2c
 8009a82:	9322      	str	r3, [sp, #136]	; 0x88
 8009a84:	f04f 39ff 	mov.w	r9, #4294967295
 8009a88:	2200      	movs	r2, #0
 8009a8a:	2312      	movs	r3, #18
 8009a8c:	f8cd 9020 	str.w	r9, [sp, #32]
 8009a90:	9223      	str	r2, [sp, #140]	; 0x8c
 8009a92:	e7b0      	b.n	80099f6 <_dtoa_r+0x266>
 8009a94:	2301      	movs	r3, #1
 8009a96:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a98:	e7f4      	b.n	8009a84 <_dtoa_r+0x2f4>
 8009a9a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8009a9e:	464b      	mov	r3, r9
 8009aa0:	f8cd 9020 	str.w	r9, [sp, #32]
 8009aa4:	e7a7      	b.n	80099f6 <_dtoa_r+0x266>
 8009aa6:	3101      	adds	r1, #1
 8009aa8:	6041      	str	r1, [r0, #4]
 8009aaa:	0052      	lsls	r2, r2, #1
 8009aac:	e7a7      	b.n	80099fe <_dtoa_r+0x26e>
 8009aae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009ab0:	9a03      	ldr	r2, [sp, #12]
 8009ab2:	601a      	str	r2, [r3, #0]
 8009ab4:	9b08      	ldr	r3, [sp, #32]
 8009ab6:	2b0e      	cmp	r3, #14
 8009ab8:	f200 80a8 	bhi.w	8009c0c <_dtoa_r+0x47c>
 8009abc:	2c00      	cmp	r4, #0
 8009abe:	f000 80a5 	beq.w	8009c0c <_dtoa_r+0x47c>
 8009ac2:	f1ba 0f00 	cmp.w	sl, #0
 8009ac6:	dd34      	ble.n	8009b32 <_dtoa_r+0x3a2>
 8009ac8:	4a9a      	ldr	r2, [pc, #616]	; (8009d34 <_dtoa_r+0x5a4>)
 8009aca:	f00a 030f 	and.w	r3, sl, #15
 8009ace:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009ad2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009ad6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009ada:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009ade:	ea4f 142a 	mov.w	r4, sl, asr #4
 8009ae2:	d016      	beq.n	8009b12 <_dtoa_r+0x382>
 8009ae4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009ae8:	4b93      	ldr	r3, [pc, #588]	; (8009d38 <_dtoa_r+0x5a8>)
 8009aea:	2703      	movs	r7, #3
 8009aec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009af0:	f7f6 fe1c 	bl	800072c <__aeabi_ddiv>
 8009af4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009af8:	f004 040f 	and.w	r4, r4, #15
 8009afc:	4e8e      	ldr	r6, [pc, #568]	; (8009d38 <_dtoa_r+0x5a8>)
 8009afe:	b954      	cbnz	r4, 8009b16 <_dtoa_r+0x386>
 8009b00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009b04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b08:	f7f6 fe10 	bl	800072c <__aeabi_ddiv>
 8009b0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b10:	e029      	b.n	8009b66 <_dtoa_r+0x3d6>
 8009b12:	2702      	movs	r7, #2
 8009b14:	e7f2      	b.n	8009afc <_dtoa_r+0x36c>
 8009b16:	07e1      	lsls	r1, r4, #31
 8009b18:	d508      	bpl.n	8009b2c <_dtoa_r+0x39c>
 8009b1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009b1e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b22:	f7f6 fcd9 	bl	80004d8 <__aeabi_dmul>
 8009b26:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009b2a:	3701      	adds	r7, #1
 8009b2c:	1064      	asrs	r4, r4, #1
 8009b2e:	3608      	adds	r6, #8
 8009b30:	e7e5      	b.n	8009afe <_dtoa_r+0x36e>
 8009b32:	f000 80a5 	beq.w	8009c80 <_dtoa_r+0x4f0>
 8009b36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b3a:	f1ca 0400 	rsb	r4, sl, #0
 8009b3e:	4b7d      	ldr	r3, [pc, #500]	; (8009d34 <_dtoa_r+0x5a4>)
 8009b40:	f004 020f 	and.w	r2, r4, #15
 8009b44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4c:	f7f6 fcc4 	bl	80004d8 <__aeabi_dmul>
 8009b50:	2702      	movs	r7, #2
 8009b52:	2300      	movs	r3, #0
 8009b54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b58:	4e77      	ldr	r6, [pc, #476]	; (8009d38 <_dtoa_r+0x5a8>)
 8009b5a:	1124      	asrs	r4, r4, #4
 8009b5c:	2c00      	cmp	r4, #0
 8009b5e:	f040 8084 	bne.w	8009c6a <_dtoa_r+0x4da>
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d1d2      	bne.n	8009b0c <_dtoa_r+0x37c>
 8009b66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	f000 808b 	beq.w	8009c84 <_dtoa_r+0x4f4>
 8009b6e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009b72:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009b76:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	4b6f      	ldr	r3, [pc, #444]	; (8009d3c <_dtoa_r+0x5ac>)
 8009b7e:	f7f6 ff1d 	bl	80009bc <__aeabi_dcmplt>
 8009b82:	2800      	cmp	r0, #0
 8009b84:	d07e      	beq.n	8009c84 <_dtoa_r+0x4f4>
 8009b86:	9b08      	ldr	r3, [sp, #32]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d07b      	beq.n	8009c84 <_dtoa_r+0x4f4>
 8009b8c:	f1b9 0f00 	cmp.w	r9, #0
 8009b90:	dd38      	ble.n	8009c04 <_dtoa_r+0x474>
 8009b92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009b96:	2200      	movs	r2, #0
 8009b98:	4b69      	ldr	r3, [pc, #420]	; (8009d40 <_dtoa_r+0x5b0>)
 8009b9a:	f7f6 fc9d 	bl	80004d8 <__aeabi_dmul>
 8009b9e:	464c      	mov	r4, r9
 8009ba0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ba4:	f10a 38ff 	add.w	r8, sl, #4294967295
 8009ba8:	3701      	adds	r7, #1
 8009baa:	4638      	mov	r0, r7
 8009bac:	f7f6 fc2a 	bl	8000404 <__aeabi_i2d>
 8009bb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bb4:	f7f6 fc90 	bl	80004d8 <__aeabi_dmul>
 8009bb8:	2200      	movs	r2, #0
 8009bba:	4b62      	ldr	r3, [pc, #392]	; (8009d44 <_dtoa_r+0x5b4>)
 8009bbc:	f7f6 fad6 	bl	800016c <__adddf3>
 8009bc0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009bc4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009bc8:	9611      	str	r6, [sp, #68]	; 0x44
 8009bca:	2c00      	cmp	r4, #0
 8009bcc:	d15d      	bne.n	8009c8a <_dtoa_r+0x4fa>
 8009bce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	4b5c      	ldr	r3, [pc, #368]	; (8009d48 <_dtoa_r+0x5b8>)
 8009bd6:	f7f6 fac7 	bl	8000168 <__aeabi_dsub>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	460b      	mov	r3, r1
 8009bde:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009be2:	4633      	mov	r3, r6
 8009be4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009be6:	f7f6 ff07 	bl	80009f8 <__aeabi_dcmpgt>
 8009bea:	2800      	cmp	r0, #0
 8009bec:	f040 829c 	bne.w	800a128 <_dtoa_r+0x998>
 8009bf0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009bf4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009bf6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009bfa:	f7f6 fedf 	bl	80009bc <__aeabi_dcmplt>
 8009bfe:	2800      	cmp	r0, #0
 8009c00:	f040 8290 	bne.w	800a124 <_dtoa_r+0x994>
 8009c04:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009c08:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009c0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	f2c0 8152 	blt.w	8009eb8 <_dtoa_r+0x728>
 8009c14:	f1ba 0f0e 	cmp.w	sl, #14
 8009c18:	f300 814e 	bgt.w	8009eb8 <_dtoa_r+0x728>
 8009c1c:	4b45      	ldr	r3, [pc, #276]	; (8009d34 <_dtoa_r+0x5a4>)
 8009c1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009c22:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009c26:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009c2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	f280 80db 	bge.w	8009de8 <_dtoa_r+0x658>
 8009c32:	9b08      	ldr	r3, [sp, #32]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	f300 80d7 	bgt.w	8009de8 <_dtoa_r+0x658>
 8009c3a:	f040 8272 	bne.w	800a122 <_dtoa_r+0x992>
 8009c3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c42:	2200      	movs	r2, #0
 8009c44:	4b40      	ldr	r3, [pc, #256]	; (8009d48 <_dtoa_r+0x5b8>)
 8009c46:	f7f6 fc47 	bl	80004d8 <__aeabi_dmul>
 8009c4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c4e:	f7f6 fec9 	bl	80009e4 <__aeabi_dcmpge>
 8009c52:	9c08      	ldr	r4, [sp, #32]
 8009c54:	4626      	mov	r6, r4
 8009c56:	2800      	cmp	r0, #0
 8009c58:	f040 8248 	bne.w	800a0ec <_dtoa_r+0x95c>
 8009c5c:	2331      	movs	r3, #49	; 0x31
 8009c5e:	9f03      	ldr	r7, [sp, #12]
 8009c60:	f10a 0a01 	add.w	sl, sl, #1
 8009c64:	f807 3b01 	strb.w	r3, [r7], #1
 8009c68:	e244      	b.n	800a0f4 <_dtoa_r+0x964>
 8009c6a:	07e2      	lsls	r2, r4, #31
 8009c6c:	d505      	bpl.n	8009c7a <_dtoa_r+0x4ea>
 8009c6e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009c72:	f7f6 fc31 	bl	80004d8 <__aeabi_dmul>
 8009c76:	2301      	movs	r3, #1
 8009c78:	3701      	adds	r7, #1
 8009c7a:	1064      	asrs	r4, r4, #1
 8009c7c:	3608      	adds	r6, #8
 8009c7e:	e76d      	b.n	8009b5c <_dtoa_r+0x3cc>
 8009c80:	2702      	movs	r7, #2
 8009c82:	e770      	b.n	8009b66 <_dtoa_r+0x3d6>
 8009c84:	46d0      	mov	r8, sl
 8009c86:	9c08      	ldr	r4, [sp, #32]
 8009c88:	e78f      	b.n	8009baa <_dtoa_r+0x41a>
 8009c8a:	9903      	ldr	r1, [sp, #12]
 8009c8c:	4b29      	ldr	r3, [pc, #164]	; (8009d34 <_dtoa_r+0x5a4>)
 8009c8e:	4421      	add	r1, r4
 8009c90:	9112      	str	r1, [sp, #72]	; 0x48
 8009c92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c94:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009c98:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009c9c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009ca0:	2900      	cmp	r1, #0
 8009ca2:	d055      	beq.n	8009d50 <_dtoa_r+0x5c0>
 8009ca4:	2000      	movs	r0, #0
 8009ca6:	4929      	ldr	r1, [pc, #164]	; (8009d4c <_dtoa_r+0x5bc>)
 8009ca8:	f7f6 fd40 	bl	800072c <__aeabi_ddiv>
 8009cac:	463b      	mov	r3, r7
 8009cae:	4632      	mov	r2, r6
 8009cb0:	f7f6 fa5a 	bl	8000168 <__aeabi_dsub>
 8009cb4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009cb8:	9f03      	ldr	r7, [sp, #12]
 8009cba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cbe:	f7f6 febb 	bl	8000a38 <__aeabi_d2iz>
 8009cc2:	4604      	mov	r4, r0
 8009cc4:	f7f6 fb9e 	bl	8000404 <__aeabi_i2d>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	460b      	mov	r3, r1
 8009ccc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cd0:	f7f6 fa4a 	bl	8000168 <__aeabi_dsub>
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	460b      	mov	r3, r1
 8009cd8:	3430      	adds	r4, #48	; 0x30
 8009cda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009cde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009ce2:	f807 4b01 	strb.w	r4, [r7], #1
 8009ce6:	f7f6 fe69 	bl	80009bc <__aeabi_dcmplt>
 8009cea:	2800      	cmp	r0, #0
 8009cec:	d174      	bne.n	8009dd8 <_dtoa_r+0x648>
 8009cee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cf2:	2000      	movs	r0, #0
 8009cf4:	4911      	ldr	r1, [pc, #68]	; (8009d3c <_dtoa_r+0x5ac>)
 8009cf6:	f7f6 fa37 	bl	8000168 <__aeabi_dsub>
 8009cfa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009cfe:	f7f6 fe5d 	bl	80009bc <__aeabi_dcmplt>
 8009d02:	2800      	cmp	r0, #0
 8009d04:	f040 80b7 	bne.w	8009e76 <_dtoa_r+0x6e6>
 8009d08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d0a:	429f      	cmp	r7, r3
 8009d0c:	f43f af7a 	beq.w	8009c04 <_dtoa_r+0x474>
 8009d10:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009d14:	2200      	movs	r2, #0
 8009d16:	4b0a      	ldr	r3, [pc, #40]	; (8009d40 <_dtoa_r+0x5b0>)
 8009d18:	f7f6 fbde 	bl	80004d8 <__aeabi_dmul>
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009d22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d26:	4b06      	ldr	r3, [pc, #24]	; (8009d40 <_dtoa_r+0x5b0>)
 8009d28:	f7f6 fbd6 	bl	80004d8 <__aeabi_dmul>
 8009d2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d30:	e7c3      	b.n	8009cba <_dtoa_r+0x52a>
 8009d32:	bf00      	nop
 8009d34:	0800d090 	.word	0x0800d090
 8009d38:	0800d068 	.word	0x0800d068
 8009d3c:	3ff00000 	.word	0x3ff00000
 8009d40:	40240000 	.word	0x40240000
 8009d44:	401c0000 	.word	0x401c0000
 8009d48:	40140000 	.word	0x40140000
 8009d4c:	3fe00000 	.word	0x3fe00000
 8009d50:	4630      	mov	r0, r6
 8009d52:	4639      	mov	r1, r7
 8009d54:	f7f6 fbc0 	bl	80004d8 <__aeabi_dmul>
 8009d58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d5a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009d5e:	9c03      	ldr	r4, [sp, #12]
 8009d60:	9314      	str	r3, [sp, #80]	; 0x50
 8009d62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d66:	f7f6 fe67 	bl	8000a38 <__aeabi_d2iz>
 8009d6a:	9015      	str	r0, [sp, #84]	; 0x54
 8009d6c:	f7f6 fb4a 	bl	8000404 <__aeabi_i2d>
 8009d70:	4602      	mov	r2, r0
 8009d72:	460b      	mov	r3, r1
 8009d74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d78:	f7f6 f9f6 	bl	8000168 <__aeabi_dsub>
 8009d7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d7e:	4606      	mov	r6, r0
 8009d80:	3330      	adds	r3, #48	; 0x30
 8009d82:	f804 3b01 	strb.w	r3, [r4], #1
 8009d86:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d88:	460f      	mov	r7, r1
 8009d8a:	429c      	cmp	r4, r3
 8009d8c:	f04f 0200 	mov.w	r2, #0
 8009d90:	d124      	bne.n	8009ddc <_dtoa_r+0x64c>
 8009d92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009d96:	4bb0      	ldr	r3, [pc, #704]	; (800a058 <_dtoa_r+0x8c8>)
 8009d98:	f7f6 f9e8 	bl	800016c <__adddf3>
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	460b      	mov	r3, r1
 8009da0:	4630      	mov	r0, r6
 8009da2:	4639      	mov	r1, r7
 8009da4:	f7f6 fe28 	bl	80009f8 <__aeabi_dcmpgt>
 8009da8:	2800      	cmp	r0, #0
 8009daa:	d163      	bne.n	8009e74 <_dtoa_r+0x6e4>
 8009dac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009db0:	2000      	movs	r0, #0
 8009db2:	49a9      	ldr	r1, [pc, #676]	; (800a058 <_dtoa_r+0x8c8>)
 8009db4:	f7f6 f9d8 	bl	8000168 <__aeabi_dsub>
 8009db8:	4602      	mov	r2, r0
 8009dba:	460b      	mov	r3, r1
 8009dbc:	4630      	mov	r0, r6
 8009dbe:	4639      	mov	r1, r7
 8009dc0:	f7f6 fdfc 	bl	80009bc <__aeabi_dcmplt>
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	f43f af1d 	beq.w	8009c04 <_dtoa_r+0x474>
 8009dca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009dcc:	1e7b      	subs	r3, r7, #1
 8009dce:	9314      	str	r3, [sp, #80]	; 0x50
 8009dd0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009dd4:	2b30      	cmp	r3, #48	; 0x30
 8009dd6:	d0f8      	beq.n	8009dca <_dtoa_r+0x63a>
 8009dd8:	46c2      	mov	sl, r8
 8009dda:	e03b      	b.n	8009e54 <_dtoa_r+0x6c4>
 8009ddc:	4b9f      	ldr	r3, [pc, #636]	; (800a05c <_dtoa_r+0x8cc>)
 8009dde:	f7f6 fb7b 	bl	80004d8 <__aeabi_dmul>
 8009de2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009de6:	e7bc      	b.n	8009d62 <_dtoa_r+0x5d2>
 8009de8:	9f03      	ldr	r7, [sp, #12]
 8009dea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009dee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009df2:	4640      	mov	r0, r8
 8009df4:	4649      	mov	r1, r9
 8009df6:	f7f6 fc99 	bl	800072c <__aeabi_ddiv>
 8009dfa:	f7f6 fe1d 	bl	8000a38 <__aeabi_d2iz>
 8009dfe:	4604      	mov	r4, r0
 8009e00:	f7f6 fb00 	bl	8000404 <__aeabi_i2d>
 8009e04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e08:	f7f6 fb66 	bl	80004d8 <__aeabi_dmul>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	460b      	mov	r3, r1
 8009e10:	4640      	mov	r0, r8
 8009e12:	4649      	mov	r1, r9
 8009e14:	f7f6 f9a8 	bl	8000168 <__aeabi_dsub>
 8009e18:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009e1c:	f807 6b01 	strb.w	r6, [r7], #1
 8009e20:	9e03      	ldr	r6, [sp, #12]
 8009e22:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009e26:	1bbe      	subs	r6, r7, r6
 8009e28:	45b4      	cmp	ip, r6
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	d136      	bne.n	8009e9e <_dtoa_r+0x70e>
 8009e30:	f7f6 f99c 	bl	800016c <__adddf3>
 8009e34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e38:	4680      	mov	r8, r0
 8009e3a:	4689      	mov	r9, r1
 8009e3c:	f7f6 fddc 	bl	80009f8 <__aeabi_dcmpgt>
 8009e40:	bb58      	cbnz	r0, 8009e9a <_dtoa_r+0x70a>
 8009e42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e46:	4640      	mov	r0, r8
 8009e48:	4649      	mov	r1, r9
 8009e4a:	f7f6 fdad 	bl	80009a8 <__aeabi_dcmpeq>
 8009e4e:	b108      	cbz	r0, 8009e54 <_dtoa_r+0x6c4>
 8009e50:	07e1      	lsls	r1, r4, #31
 8009e52:	d422      	bmi.n	8009e9a <_dtoa_r+0x70a>
 8009e54:	4628      	mov	r0, r5
 8009e56:	4659      	mov	r1, fp
 8009e58:	f000 faf0 	bl	800a43c <_Bfree>
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	703b      	strb	r3, [r7, #0]
 8009e60:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009e62:	f10a 0001 	add.w	r0, sl, #1
 8009e66:	6018      	str	r0, [r3, #0]
 8009e68:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	f43f acde 	beq.w	800982c <_dtoa_r+0x9c>
 8009e70:	601f      	str	r7, [r3, #0]
 8009e72:	e4db      	b.n	800982c <_dtoa_r+0x9c>
 8009e74:	4627      	mov	r7, r4
 8009e76:	463b      	mov	r3, r7
 8009e78:	461f      	mov	r7, r3
 8009e7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e7e:	2a39      	cmp	r2, #57	; 0x39
 8009e80:	d107      	bne.n	8009e92 <_dtoa_r+0x702>
 8009e82:	9a03      	ldr	r2, [sp, #12]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d1f7      	bne.n	8009e78 <_dtoa_r+0x6e8>
 8009e88:	2230      	movs	r2, #48	; 0x30
 8009e8a:	9903      	ldr	r1, [sp, #12]
 8009e8c:	f108 0801 	add.w	r8, r8, #1
 8009e90:	700a      	strb	r2, [r1, #0]
 8009e92:	781a      	ldrb	r2, [r3, #0]
 8009e94:	3201      	adds	r2, #1
 8009e96:	701a      	strb	r2, [r3, #0]
 8009e98:	e79e      	b.n	8009dd8 <_dtoa_r+0x648>
 8009e9a:	46d0      	mov	r8, sl
 8009e9c:	e7eb      	b.n	8009e76 <_dtoa_r+0x6e6>
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	4b6e      	ldr	r3, [pc, #440]	; (800a05c <_dtoa_r+0x8cc>)
 8009ea2:	f7f6 fb19 	bl	80004d8 <__aeabi_dmul>
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	4680      	mov	r8, r0
 8009eac:	4689      	mov	r9, r1
 8009eae:	f7f6 fd7b 	bl	80009a8 <__aeabi_dcmpeq>
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	d09b      	beq.n	8009dee <_dtoa_r+0x65e>
 8009eb6:	e7cd      	b.n	8009e54 <_dtoa_r+0x6c4>
 8009eb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009eba:	2a00      	cmp	r2, #0
 8009ebc:	f000 80d0 	beq.w	800a060 <_dtoa_r+0x8d0>
 8009ec0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009ec2:	2a01      	cmp	r2, #1
 8009ec4:	f300 80ae 	bgt.w	800a024 <_dtoa_r+0x894>
 8009ec8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009eca:	2a00      	cmp	r2, #0
 8009ecc:	f000 80a6 	beq.w	800a01c <_dtoa_r+0x88c>
 8009ed0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009ed4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009ed6:	9f06      	ldr	r7, [sp, #24]
 8009ed8:	9a06      	ldr	r2, [sp, #24]
 8009eda:	2101      	movs	r1, #1
 8009edc:	441a      	add	r2, r3
 8009ede:	9206      	str	r2, [sp, #24]
 8009ee0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ee2:	4628      	mov	r0, r5
 8009ee4:	441a      	add	r2, r3
 8009ee6:	9209      	str	r2, [sp, #36]	; 0x24
 8009ee8:	f000 fb5e 	bl	800a5a8 <__i2b>
 8009eec:	4606      	mov	r6, r0
 8009eee:	2f00      	cmp	r7, #0
 8009ef0:	dd0c      	ble.n	8009f0c <_dtoa_r+0x77c>
 8009ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	dd09      	ble.n	8009f0c <_dtoa_r+0x77c>
 8009ef8:	42bb      	cmp	r3, r7
 8009efa:	bfa8      	it	ge
 8009efc:	463b      	movge	r3, r7
 8009efe:	9a06      	ldr	r2, [sp, #24]
 8009f00:	1aff      	subs	r7, r7, r3
 8009f02:	1ad2      	subs	r2, r2, r3
 8009f04:	9206      	str	r2, [sp, #24]
 8009f06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f08:	1ad3      	subs	r3, r2, r3
 8009f0a:	9309      	str	r3, [sp, #36]	; 0x24
 8009f0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f0e:	b1f3      	cbz	r3, 8009f4e <_dtoa_r+0x7be>
 8009f10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	f000 80a8 	beq.w	800a068 <_dtoa_r+0x8d8>
 8009f18:	2c00      	cmp	r4, #0
 8009f1a:	dd10      	ble.n	8009f3e <_dtoa_r+0x7ae>
 8009f1c:	4631      	mov	r1, r6
 8009f1e:	4622      	mov	r2, r4
 8009f20:	4628      	mov	r0, r5
 8009f22:	f000 fbff 	bl	800a724 <__pow5mult>
 8009f26:	465a      	mov	r2, fp
 8009f28:	4601      	mov	r1, r0
 8009f2a:	4606      	mov	r6, r0
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	f000 fb51 	bl	800a5d4 <__multiply>
 8009f32:	4680      	mov	r8, r0
 8009f34:	4659      	mov	r1, fp
 8009f36:	4628      	mov	r0, r5
 8009f38:	f000 fa80 	bl	800a43c <_Bfree>
 8009f3c:	46c3      	mov	fp, r8
 8009f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f40:	1b1a      	subs	r2, r3, r4
 8009f42:	d004      	beq.n	8009f4e <_dtoa_r+0x7be>
 8009f44:	4659      	mov	r1, fp
 8009f46:	4628      	mov	r0, r5
 8009f48:	f000 fbec 	bl	800a724 <__pow5mult>
 8009f4c:	4683      	mov	fp, r0
 8009f4e:	2101      	movs	r1, #1
 8009f50:	4628      	mov	r0, r5
 8009f52:	f000 fb29 	bl	800a5a8 <__i2b>
 8009f56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f58:	4604      	mov	r4, r0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	f340 8086 	ble.w	800a06c <_dtoa_r+0x8dc>
 8009f60:	461a      	mov	r2, r3
 8009f62:	4601      	mov	r1, r0
 8009f64:	4628      	mov	r0, r5
 8009f66:	f000 fbdd 	bl	800a724 <__pow5mult>
 8009f6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009f6c:	4604      	mov	r4, r0
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	dd7f      	ble.n	800a072 <_dtoa_r+0x8e2>
 8009f72:	f04f 0800 	mov.w	r8, #0
 8009f76:	6923      	ldr	r3, [r4, #16]
 8009f78:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009f7c:	6918      	ldr	r0, [r3, #16]
 8009f7e:	f000 fac5 	bl	800a50c <__hi0bits>
 8009f82:	f1c0 0020 	rsb	r0, r0, #32
 8009f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f88:	4418      	add	r0, r3
 8009f8a:	f010 001f 	ands.w	r0, r0, #31
 8009f8e:	f000 8092 	beq.w	800a0b6 <_dtoa_r+0x926>
 8009f92:	f1c0 0320 	rsb	r3, r0, #32
 8009f96:	2b04      	cmp	r3, #4
 8009f98:	f340 808a 	ble.w	800a0b0 <_dtoa_r+0x920>
 8009f9c:	f1c0 001c 	rsb	r0, r0, #28
 8009fa0:	9b06      	ldr	r3, [sp, #24]
 8009fa2:	4407      	add	r7, r0
 8009fa4:	4403      	add	r3, r0
 8009fa6:	9306      	str	r3, [sp, #24]
 8009fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009faa:	4403      	add	r3, r0
 8009fac:	9309      	str	r3, [sp, #36]	; 0x24
 8009fae:	9b06      	ldr	r3, [sp, #24]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	dd05      	ble.n	8009fc0 <_dtoa_r+0x830>
 8009fb4:	4659      	mov	r1, fp
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	4628      	mov	r0, r5
 8009fba:	f000 fc0d 	bl	800a7d8 <__lshift>
 8009fbe:	4683      	mov	fp, r0
 8009fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	dd05      	ble.n	8009fd2 <_dtoa_r+0x842>
 8009fc6:	4621      	mov	r1, r4
 8009fc8:	461a      	mov	r2, r3
 8009fca:	4628      	mov	r0, r5
 8009fcc:	f000 fc04 	bl	800a7d8 <__lshift>
 8009fd0:	4604      	mov	r4, r0
 8009fd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d070      	beq.n	800a0ba <_dtoa_r+0x92a>
 8009fd8:	4621      	mov	r1, r4
 8009fda:	4658      	mov	r0, fp
 8009fdc:	f000 fc6c 	bl	800a8b8 <__mcmp>
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	da6a      	bge.n	800a0ba <_dtoa_r+0x92a>
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	4659      	mov	r1, fp
 8009fe8:	220a      	movs	r2, #10
 8009fea:	4628      	mov	r0, r5
 8009fec:	f000 fa48 	bl	800a480 <__multadd>
 8009ff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ff2:	4683      	mov	fp, r0
 8009ff4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	f000 8194 	beq.w	800a326 <_dtoa_r+0xb96>
 8009ffe:	4631      	mov	r1, r6
 800a000:	2300      	movs	r3, #0
 800a002:	220a      	movs	r2, #10
 800a004:	4628      	mov	r0, r5
 800a006:	f000 fa3b 	bl	800a480 <__multadd>
 800a00a:	f1b9 0f00 	cmp.w	r9, #0
 800a00e:	4606      	mov	r6, r0
 800a010:	f300 8093 	bgt.w	800a13a <_dtoa_r+0x9aa>
 800a014:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a016:	2b02      	cmp	r3, #2
 800a018:	dc57      	bgt.n	800a0ca <_dtoa_r+0x93a>
 800a01a:	e08e      	b.n	800a13a <_dtoa_r+0x9aa>
 800a01c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a01e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a022:	e757      	b.n	8009ed4 <_dtoa_r+0x744>
 800a024:	9b08      	ldr	r3, [sp, #32]
 800a026:	1e5c      	subs	r4, r3, #1
 800a028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a02a:	42a3      	cmp	r3, r4
 800a02c:	bfb7      	itett	lt
 800a02e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a030:	1b1c      	subge	r4, r3, r4
 800a032:	1ae2      	sublt	r2, r4, r3
 800a034:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a036:	bfbe      	ittt	lt
 800a038:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a03a:	189b      	addlt	r3, r3, r2
 800a03c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a03e:	9b08      	ldr	r3, [sp, #32]
 800a040:	bfb8      	it	lt
 800a042:	2400      	movlt	r4, #0
 800a044:	2b00      	cmp	r3, #0
 800a046:	bfbb      	ittet	lt
 800a048:	9b06      	ldrlt	r3, [sp, #24]
 800a04a:	9a08      	ldrlt	r2, [sp, #32]
 800a04c:	9f06      	ldrge	r7, [sp, #24]
 800a04e:	1a9f      	sublt	r7, r3, r2
 800a050:	bfac      	ite	ge
 800a052:	9b08      	ldrge	r3, [sp, #32]
 800a054:	2300      	movlt	r3, #0
 800a056:	e73f      	b.n	8009ed8 <_dtoa_r+0x748>
 800a058:	3fe00000 	.word	0x3fe00000
 800a05c:	40240000 	.word	0x40240000
 800a060:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a062:	9f06      	ldr	r7, [sp, #24]
 800a064:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a066:	e742      	b.n	8009eee <_dtoa_r+0x75e>
 800a068:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a06a:	e76b      	b.n	8009f44 <_dtoa_r+0x7b4>
 800a06c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a06e:	2b01      	cmp	r3, #1
 800a070:	dc19      	bgt.n	800a0a6 <_dtoa_r+0x916>
 800a072:	9b04      	ldr	r3, [sp, #16]
 800a074:	b9bb      	cbnz	r3, 800a0a6 <_dtoa_r+0x916>
 800a076:	9b05      	ldr	r3, [sp, #20]
 800a078:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a07c:	b99b      	cbnz	r3, 800a0a6 <_dtoa_r+0x916>
 800a07e:	9b05      	ldr	r3, [sp, #20]
 800a080:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a084:	0d1b      	lsrs	r3, r3, #20
 800a086:	051b      	lsls	r3, r3, #20
 800a088:	b183      	cbz	r3, 800a0ac <_dtoa_r+0x91c>
 800a08a:	f04f 0801 	mov.w	r8, #1
 800a08e:	9b06      	ldr	r3, [sp, #24]
 800a090:	3301      	adds	r3, #1
 800a092:	9306      	str	r3, [sp, #24]
 800a094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a096:	3301      	adds	r3, #1
 800a098:	9309      	str	r3, [sp, #36]	; 0x24
 800a09a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	f47f af6a 	bne.w	8009f76 <_dtoa_r+0x7e6>
 800a0a2:	2001      	movs	r0, #1
 800a0a4:	e76f      	b.n	8009f86 <_dtoa_r+0x7f6>
 800a0a6:	f04f 0800 	mov.w	r8, #0
 800a0aa:	e7f6      	b.n	800a09a <_dtoa_r+0x90a>
 800a0ac:	4698      	mov	r8, r3
 800a0ae:	e7f4      	b.n	800a09a <_dtoa_r+0x90a>
 800a0b0:	f43f af7d 	beq.w	8009fae <_dtoa_r+0x81e>
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	301c      	adds	r0, #28
 800a0b8:	e772      	b.n	8009fa0 <_dtoa_r+0x810>
 800a0ba:	9b08      	ldr	r3, [sp, #32]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	dc36      	bgt.n	800a12e <_dtoa_r+0x99e>
 800a0c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a0c2:	2b02      	cmp	r3, #2
 800a0c4:	dd33      	ble.n	800a12e <_dtoa_r+0x99e>
 800a0c6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a0ca:	f1b9 0f00 	cmp.w	r9, #0
 800a0ce:	d10d      	bne.n	800a0ec <_dtoa_r+0x95c>
 800a0d0:	4621      	mov	r1, r4
 800a0d2:	464b      	mov	r3, r9
 800a0d4:	2205      	movs	r2, #5
 800a0d6:	4628      	mov	r0, r5
 800a0d8:	f000 f9d2 	bl	800a480 <__multadd>
 800a0dc:	4601      	mov	r1, r0
 800a0de:	4604      	mov	r4, r0
 800a0e0:	4658      	mov	r0, fp
 800a0e2:	f000 fbe9 	bl	800a8b8 <__mcmp>
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	f73f adb8 	bgt.w	8009c5c <_dtoa_r+0x4cc>
 800a0ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a0ee:	9f03      	ldr	r7, [sp, #12]
 800a0f0:	ea6f 0a03 	mvn.w	sl, r3
 800a0f4:	f04f 0800 	mov.w	r8, #0
 800a0f8:	4621      	mov	r1, r4
 800a0fa:	4628      	mov	r0, r5
 800a0fc:	f000 f99e 	bl	800a43c <_Bfree>
 800a100:	2e00      	cmp	r6, #0
 800a102:	f43f aea7 	beq.w	8009e54 <_dtoa_r+0x6c4>
 800a106:	f1b8 0f00 	cmp.w	r8, #0
 800a10a:	d005      	beq.n	800a118 <_dtoa_r+0x988>
 800a10c:	45b0      	cmp	r8, r6
 800a10e:	d003      	beq.n	800a118 <_dtoa_r+0x988>
 800a110:	4641      	mov	r1, r8
 800a112:	4628      	mov	r0, r5
 800a114:	f000 f992 	bl	800a43c <_Bfree>
 800a118:	4631      	mov	r1, r6
 800a11a:	4628      	mov	r0, r5
 800a11c:	f000 f98e 	bl	800a43c <_Bfree>
 800a120:	e698      	b.n	8009e54 <_dtoa_r+0x6c4>
 800a122:	2400      	movs	r4, #0
 800a124:	4626      	mov	r6, r4
 800a126:	e7e1      	b.n	800a0ec <_dtoa_r+0x95c>
 800a128:	46c2      	mov	sl, r8
 800a12a:	4626      	mov	r6, r4
 800a12c:	e596      	b.n	8009c5c <_dtoa_r+0x4cc>
 800a12e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a130:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a134:	2b00      	cmp	r3, #0
 800a136:	f000 80fd 	beq.w	800a334 <_dtoa_r+0xba4>
 800a13a:	2f00      	cmp	r7, #0
 800a13c:	dd05      	ble.n	800a14a <_dtoa_r+0x9ba>
 800a13e:	4631      	mov	r1, r6
 800a140:	463a      	mov	r2, r7
 800a142:	4628      	mov	r0, r5
 800a144:	f000 fb48 	bl	800a7d8 <__lshift>
 800a148:	4606      	mov	r6, r0
 800a14a:	f1b8 0f00 	cmp.w	r8, #0
 800a14e:	d05c      	beq.n	800a20a <_dtoa_r+0xa7a>
 800a150:	4628      	mov	r0, r5
 800a152:	6871      	ldr	r1, [r6, #4]
 800a154:	f000 f932 	bl	800a3bc <_Balloc>
 800a158:	4607      	mov	r7, r0
 800a15a:	b928      	cbnz	r0, 800a168 <_dtoa_r+0x9d8>
 800a15c:	4602      	mov	r2, r0
 800a15e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a162:	4b7f      	ldr	r3, [pc, #508]	; (800a360 <_dtoa_r+0xbd0>)
 800a164:	f7ff bb28 	b.w	80097b8 <_dtoa_r+0x28>
 800a168:	6932      	ldr	r2, [r6, #16]
 800a16a:	f106 010c 	add.w	r1, r6, #12
 800a16e:	3202      	adds	r2, #2
 800a170:	0092      	lsls	r2, r2, #2
 800a172:	300c      	adds	r0, #12
 800a174:	f000 f914 	bl	800a3a0 <memcpy>
 800a178:	2201      	movs	r2, #1
 800a17a:	4639      	mov	r1, r7
 800a17c:	4628      	mov	r0, r5
 800a17e:	f000 fb2b 	bl	800a7d8 <__lshift>
 800a182:	46b0      	mov	r8, r6
 800a184:	4606      	mov	r6, r0
 800a186:	9b03      	ldr	r3, [sp, #12]
 800a188:	3301      	adds	r3, #1
 800a18a:	9308      	str	r3, [sp, #32]
 800a18c:	9b03      	ldr	r3, [sp, #12]
 800a18e:	444b      	add	r3, r9
 800a190:	930a      	str	r3, [sp, #40]	; 0x28
 800a192:	9b04      	ldr	r3, [sp, #16]
 800a194:	f003 0301 	and.w	r3, r3, #1
 800a198:	9309      	str	r3, [sp, #36]	; 0x24
 800a19a:	9b08      	ldr	r3, [sp, #32]
 800a19c:	4621      	mov	r1, r4
 800a19e:	3b01      	subs	r3, #1
 800a1a0:	4658      	mov	r0, fp
 800a1a2:	9304      	str	r3, [sp, #16]
 800a1a4:	f7ff fa68 	bl	8009678 <quorem>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	4641      	mov	r1, r8
 800a1ac:	3330      	adds	r3, #48	; 0x30
 800a1ae:	9006      	str	r0, [sp, #24]
 800a1b0:	4658      	mov	r0, fp
 800a1b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1b4:	f000 fb80 	bl	800a8b8 <__mcmp>
 800a1b8:	4632      	mov	r2, r6
 800a1ba:	4681      	mov	r9, r0
 800a1bc:	4621      	mov	r1, r4
 800a1be:	4628      	mov	r0, r5
 800a1c0:	f000 fb96 	bl	800a8f0 <__mdiff>
 800a1c4:	68c2      	ldr	r2, [r0, #12]
 800a1c6:	4607      	mov	r7, r0
 800a1c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1ca:	bb02      	cbnz	r2, 800a20e <_dtoa_r+0xa7e>
 800a1cc:	4601      	mov	r1, r0
 800a1ce:	4658      	mov	r0, fp
 800a1d0:	f000 fb72 	bl	800a8b8 <__mcmp>
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1d8:	4639      	mov	r1, r7
 800a1da:	4628      	mov	r0, r5
 800a1dc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a1e0:	f000 f92c 	bl	800a43c <_Bfree>
 800a1e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a1e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a1e8:	9f08      	ldr	r7, [sp, #32]
 800a1ea:	ea43 0102 	orr.w	r1, r3, r2
 800a1ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1f0:	430b      	orrs	r3, r1
 800a1f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1f4:	d10d      	bne.n	800a212 <_dtoa_r+0xa82>
 800a1f6:	2b39      	cmp	r3, #57	; 0x39
 800a1f8:	d029      	beq.n	800a24e <_dtoa_r+0xabe>
 800a1fa:	f1b9 0f00 	cmp.w	r9, #0
 800a1fe:	dd01      	ble.n	800a204 <_dtoa_r+0xa74>
 800a200:	9b06      	ldr	r3, [sp, #24]
 800a202:	3331      	adds	r3, #49	; 0x31
 800a204:	9a04      	ldr	r2, [sp, #16]
 800a206:	7013      	strb	r3, [r2, #0]
 800a208:	e776      	b.n	800a0f8 <_dtoa_r+0x968>
 800a20a:	4630      	mov	r0, r6
 800a20c:	e7b9      	b.n	800a182 <_dtoa_r+0x9f2>
 800a20e:	2201      	movs	r2, #1
 800a210:	e7e2      	b.n	800a1d8 <_dtoa_r+0xa48>
 800a212:	f1b9 0f00 	cmp.w	r9, #0
 800a216:	db06      	blt.n	800a226 <_dtoa_r+0xa96>
 800a218:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a21a:	ea41 0909 	orr.w	r9, r1, r9
 800a21e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a220:	ea59 0101 	orrs.w	r1, r9, r1
 800a224:	d120      	bne.n	800a268 <_dtoa_r+0xad8>
 800a226:	2a00      	cmp	r2, #0
 800a228:	ddec      	ble.n	800a204 <_dtoa_r+0xa74>
 800a22a:	4659      	mov	r1, fp
 800a22c:	2201      	movs	r2, #1
 800a22e:	4628      	mov	r0, r5
 800a230:	9308      	str	r3, [sp, #32]
 800a232:	f000 fad1 	bl	800a7d8 <__lshift>
 800a236:	4621      	mov	r1, r4
 800a238:	4683      	mov	fp, r0
 800a23a:	f000 fb3d 	bl	800a8b8 <__mcmp>
 800a23e:	2800      	cmp	r0, #0
 800a240:	9b08      	ldr	r3, [sp, #32]
 800a242:	dc02      	bgt.n	800a24a <_dtoa_r+0xaba>
 800a244:	d1de      	bne.n	800a204 <_dtoa_r+0xa74>
 800a246:	07da      	lsls	r2, r3, #31
 800a248:	d5dc      	bpl.n	800a204 <_dtoa_r+0xa74>
 800a24a:	2b39      	cmp	r3, #57	; 0x39
 800a24c:	d1d8      	bne.n	800a200 <_dtoa_r+0xa70>
 800a24e:	2339      	movs	r3, #57	; 0x39
 800a250:	9a04      	ldr	r2, [sp, #16]
 800a252:	7013      	strb	r3, [r2, #0]
 800a254:	463b      	mov	r3, r7
 800a256:	461f      	mov	r7, r3
 800a258:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a25c:	3b01      	subs	r3, #1
 800a25e:	2a39      	cmp	r2, #57	; 0x39
 800a260:	d050      	beq.n	800a304 <_dtoa_r+0xb74>
 800a262:	3201      	adds	r2, #1
 800a264:	701a      	strb	r2, [r3, #0]
 800a266:	e747      	b.n	800a0f8 <_dtoa_r+0x968>
 800a268:	2a00      	cmp	r2, #0
 800a26a:	dd03      	ble.n	800a274 <_dtoa_r+0xae4>
 800a26c:	2b39      	cmp	r3, #57	; 0x39
 800a26e:	d0ee      	beq.n	800a24e <_dtoa_r+0xabe>
 800a270:	3301      	adds	r3, #1
 800a272:	e7c7      	b.n	800a204 <_dtoa_r+0xa74>
 800a274:	9a08      	ldr	r2, [sp, #32]
 800a276:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a278:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a27c:	428a      	cmp	r2, r1
 800a27e:	d02a      	beq.n	800a2d6 <_dtoa_r+0xb46>
 800a280:	4659      	mov	r1, fp
 800a282:	2300      	movs	r3, #0
 800a284:	220a      	movs	r2, #10
 800a286:	4628      	mov	r0, r5
 800a288:	f000 f8fa 	bl	800a480 <__multadd>
 800a28c:	45b0      	cmp	r8, r6
 800a28e:	4683      	mov	fp, r0
 800a290:	f04f 0300 	mov.w	r3, #0
 800a294:	f04f 020a 	mov.w	r2, #10
 800a298:	4641      	mov	r1, r8
 800a29a:	4628      	mov	r0, r5
 800a29c:	d107      	bne.n	800a2ae <_dtoa_r+0xb1e>
 800a29e:	f000 f8ef 	bl	800a480 <__multadd>
 800a2a2:	4680      	mov	r8, r0
 800a2a4:	4606      	mov	r6, r0
 800a2a6:	9b08      	ldr	r3, [sp, #32]
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	9308      	str	r3, [sp, #32]
 800a2ac:	e775      	b.n	800a19a <_dtoa_r+0xa0a>
 800a2ae:	f000 f8e7 	bl	800a480 <__multadd>
 800a2b2:	4631      	mov	r1, r6
 800a2b4:	4680      	mov	r8, r0
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	220a      	movs	r2, #10
 800a2ba:	4628      	mov	r0, r5
 800a2bc:	f000 f8e0 	bl	800a480 <__multadd>
 800a2c0:	4606      	mov	r6, r0
 800a2c2:	e7f0      	b.n	800a2a6 <_dtoa_r+0xb16>
 800a2c4:	f1b9 0f00 	cmp.w	r9, #0
 800a2c8:	bfcc      	ite	gt
 800a2ca:	464f      	movgt	r7, r9
 800a2cc:	2701      	movle	r7, #1
 800a2ce:	f04f 0800 	mov.w	r8, #0
 800a2d2:	9a03      	ldr	r2, [sp, #12]
 800a2d4:	4417      	add	r7, r2
 800a2d6:	4659      	mov	r1, fp
 800a2d8:	2201      	movs	r2, #1
 800a2da:	4628      	mov	r0, r5
 800a2dc:	9308      	str	r3, [sp, #32]
 800a2de:	f000 fa7b 	bl	800a7d8 <__lshift>
 800a2e2:	4621      	mov	r1, r4
 800a2e4:	4683      	mov	fp, r0
 800a2e6:	f000 fae7 	bl	800a8b8 <__mcmp>
 800a2ea:	2800      	cmp	r0, #0
 800a2ec:	dcb2      	bgt.n	800a254 <_dtoa_r+0xac4>
 800a2ee:	d102      	bne.n	800a2f6 <_dtoa_r+0xb66>
 800a2f0:	9b08      	ldr	r3, [sp, #32]
 800a2f2:	07db      	lsls	r3, r3, #31
 800a2f4:	d4ae      	bmi.n	800a254 <_dtoa_r+0xac4>
 800a2f6:	463b      	mov	r3, r7
 800a2f8:	461f      	mov	r7, r3
 800a2fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a2fe:	2a30      	cmp	r2, #48	; 0x30
 800a300:	d0fa      	beq.n	800a2f8 <_dtoa_r+0xb68>
 800a302:	e6f9      	b.n	800a0f8 <_dtoa_r+0x968>
 800a304:	9a03      	ldr	r2, [sp, #12]
 800a306:	429a      	cmp	r2, r3
 800a308:	d1a5      	bne.n	800a256 <_dtoa_r+0xac6>
 800a30a:	2331      	movs	r3, #49	; 0x31
 800a30c:	f10a 0a01 	add.w	sl, sl, #1
 800a310:	e779      	b.n	800a206 <_dtoa_r+0xa76>
 800a312:	4b14      	ldr	r3, [pc, #80]	; (800a364 <_dtoa_r+0xbd4>)
 800a314:	f7ff baa8 	b.w	8009868 <_dtoa_r+0xd8>
 800a318:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	f47f aa81 	bne.w	8009822 <_dtoa_r+0x92>
 800a320:	4b11      	ldr	r3, [pc, #68]	; (800a368 <_dtoa_r+0xbd8>)
 800a322:	f7ff baa1 	b.w	8009868 <_dtoa_r+0xd8>
 800a326:	f1b9 0f00 	cmp.w	r9, #0
 800a32a:	dc03      	bgt.n	800a334 <_dtoa_r+0xba4>
 800a32c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a32e:	2b02      	cmp	r3, #2
 800a330:	f73f aecb 	bgt.w	800a0ca <_dtoa_r+0x93a>
 800a334:	9f03      	ldr	r7, [sp, #12]
 800a336:	4621      	mov	r1, r4
 800a338:	4658      	mov	r0, fp
 800a33a:	f7ff f99d 	bl	8009678 <quorem>
 800a33e:	9a03      	ldr	r2, [sp, #12]
 800a340:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a344:	f807 3b01 	strb.w	r3, [r7], #1
 800a348:	1aba      	subs	r2, r7, r2
 800a34a:	4591      	cmp	r9, r2
 800a34c:	ddba      	ble.n	800a2c4 <_dtoa_r+0xb34>
 800a34e:	4659      	mov	r1, fp
 800a350:	2300      	movs	r3, #0
 800a352:	220a      	movs	r2, #10
 800a354:	4628      	mov	r0, r5
 800a356:	f000 f893 	bl	800a480 <__multadd>
 800a35a:	4683      	mov	fp, r0
 800a35c:	e7eb      	b.n	800a336 <_dtoa_r+0xba6>
 800a35e:	bf00      	nop
 800a360:	0800cffb 	.word	0x0800cffb
 800a364:	0800cf58 	.word	0x0800cf58
 800a368:	0800cf7c 	.word	0x0800cf7c

0800a36c <_localeconv_r>:
 800a36c:	4800      	ldr	r0, [pc, #0]	; (800a370 <_localeconv_r+0x4>)
 800a36e:	4770      	bx	lr
 800a370:	20000178 	.word	0x20000178

0800a374 <malloc>:
 800a374:	4b02      	ldr	r3, [pc, #8]	; (800a380 <malloc+0xc>)
 800a376:	4601      	mov	r1, r0
 800a378:	6818      	ldr	r0, [r3, #0]
 800a37a:	f000 bc1d 	b.w	800abb8 <_malloc_r>
 800a37e:	bf00      	nop
 800a380:	20000024 	.word	0x20000024

0800a384 <memchr>:
 800a384:	4603      	mov	r3, r0
 800a386:	b510      	push	{r4, lr}
 800a388:	b2c9      	uxtb	r1, r1
 800a38a:	4402      	add	r2, r0
 800a38c:	4293      	cmp	r3, r2
 800a38e:	4618      	mov	r0, r3
 800a390:	d101      	bne.n	800a396 <memchr+0x12>
 800a392:	2000      	movs	r0, #0
 800a394:	e003      	b.n	800a39e <memchr+0x1a>
 800a396:	7804      	ldrb	r4, [r0, #0]
 800a398:	3301      	adds	r3, #1
 800a39a:	428c      	cmp	r4, r1
 800a39c:	d1f6      	bne.n	800a38c <memchr+0x8>
 800a39e:	bd10      	pop	{r4, pc}

0800a3a0 <memcpy>:
 800a3a0:	440a      	add	r2, r1
 800a3a2:	4291      	cmp	r1, r2
 800a3a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a3a8:	d100      	bne.n	800a3ac <memcpy+0xc>
 800a3aa:	4770      	bx	lr
 800a3ac:	b510      	push	{r4, lr}
 800a3ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3b2:	4291      	cmp	r1, r2
 800a3b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a3b8:	d1f9      	bne.n	800a3ae <memcpy+0xe>
 800a3ba:	bd10      	pop	{r4, pc}

0800a3bc <_Balloc>:
 800a3bc:	b570      	push	{r4, r5, r6, lr}
 800a3be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a3c0:	4604      	mov	r4, r0
 800a3c2:	460d      	mov	r5, r1
 800a3c4:	b976      	cbnz	r6, 800a3e4 <_Balloc+0x28>
 800a3c6:	2010      	movs	r0, #16
 800a3c8:	f7ff ffd4 	bl	800a374 <malloc>
 800a3cc:	4602      	mov	r2, r0
 800a3ce:	6260      	str	r0, [r4, #36]	; 0x24
 800a3d0:	b920      	cbnz	r0, 800a3dc <_Balloc+0x20>
 800a3d2:	2166      	movs	r1, #102	; 0x66
 800a3d4:	4b17      	ldr	r3, [pc, #92]	; (800a434 <_Balloc+0x78>)
 800a3d6:	4818      	ldr	r0, [pc, #96]	; (800a438 <_Balloc+0x7c>)
 800a3d8:	f000 fdce 	bl	800af78 <__assert_func>
 800a3dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3e0:	6006      	str	r6, [r0, #0]
 800a3e2:	60c6      	str	r6, [r0, #12]
 800a3e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a3e6:	68f3      	ldr	r3, [r6, #12]
 800a3e8:	b183      	cbz	r3, 800a40c <_Balloc+0x50>
 800a3ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3ec:	68db      	ldr	r3, [r3, #12]
 800a3ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a3f2:	b9b8      	cbnz	r0, 800a424 <_Balloc+0x68>
 800a3f4:	2101      	movs	r1, #1
 800a3f6:	fa01 f605 	lsl.w	r6, r1, r5
 800a3fa:	1d72      	adds	r2, r6, #5
 800a3fc:	4620      	mov	r0, r4
 800a3fe:	0092      	lsls	r2, r2, #2
 800a400:	f000 fb5e 	bl	800aac0 <_calloc_r>
 800a404:	b160      	cbz	r0, 800a420 <_Balloc+0x64>
 800a406:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a40a:	e00e      	b.n	800a42a <_Balloc+0x6e>
 800a40c:	2221      	movs	r2, #33	; 0x21
 800a40e:	2104      	movs	r1, #4
 800a410:	4620      	mov	r0, r4
 800a412:	f000 fb55 	bl	800aac0 <_calloc_r>
 800a416:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a418:	60f0      	str	r0, [r6, #12]
 800a41a:	68db      	ldr	r3, [r3, #12]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d1e4      	bne.n	800a3ea <_Balloc+0x2e>
 800a420:	2000      	movs	r0, #0
 800a422:	bd70      	pop	{r4, r5, r6, pc}
 800a424:	6802      	ldr	r2, [r0, #0]
 800a426:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a42a:	2300      	movs	r3, #0
 800a42c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a430:	e7f7      	b.n	800a422 <_Balloc+0x66>
 800a432:	bf00      	nop
 800a434:	0800cf89 	.word	0x0800cf89
 800a438:	0800d00c 	.word	0x0800d00c

0800a43c <_Bfree>:
 800a43c:	b570      	push	{r4, r5, r6, lr}
 800a43e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a440:	4605      	mov	r5, r0
 800a442:	460c      	mov	r4, r1
 800a444:	b976      	cbnz	r6, 800a464 <_Bfree+0x28>
 800a446:	2010      	movs	r0, #16
 800a448:	f7ff ff94 	bl	800a374 <malloc>
 800a44c:	4602      	mov	r2, r0
 800a44e:	6268      	str	r0, [r5, #36]	; 0x24
 800a450:	b920      	cbnz	r0, 800a45c <_Bfree+0x20>
 800a452:	218a      	movs	r1, #138	; 0x8a
 800a454:	4b08      	ldr	r3, [pc, #32]	; (800a478 <_Bfree+0x3c>)
 800a456:	4809      	ldr	r0, [pc, #36]	; (800a47c <_Bfree+0x40>)
 800a458:	f000 fd8e 	bl	800af78 <__assert_func>
 800a45c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a460:	6006      	str	r6, [r0, #0]
 800a462:	60c6      	str	r6, [r0, #12]
 800a464:	b13c      	cbz	r4, 800a476 <_Bfree+0x3a>
 800a466:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a468:	6862      	ldr	r2, [r4, #4]
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a470:	6021      	str	r1, [r4, #0]
 800a472:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a476:	bd70      	pop	{r4, r5, r6, pc}
 800a478:	0800cf89 	.word	0x0800cf89
 800a47c:	0800d00c 	.word	0x0800d00c

0800a480 <__multadd>:
 800a480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a484:	4607      	mov	r7, r0
 800a486:	460c      	mov	r4, r1
 800a488:	461e      	mov	r6, r3
 800a48a:	2000      	movs	r0, #0
 800a48c:	690d      	ldr	r5, [r1, #16]
 800a48e:	f101 0c14 	add.w	ip, r1, #20
 800a492:	f8dc 3000 	ldr.w	r3, [ip]
 800a496:	3001      	adds	r0, #1
 800a498:	b299      	uxth	r1, r3
 800a49a:	fb02 6101 	mla	r1, r2, r1, r6
 800a49e:	0c1e      	lsrs	r6, r3, #16
 800a4a0:	0c0b      	lsrs	r3, r1, #16
 800a4a2:	fb02 3306 	mla	r3, r2, r6, r3
 800a4a6:	b289      	uxth	r1, r1
 800a4a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a4ac:	4285      	cmp	r5, r0
 800a4ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a4b2:	f84c 1b04 	str.w	r1, [ip], #4
 800a4b6:	dcec      	bgt.n	800a492 <__multadd+0x12>
 800a4b8:	b30e      	cbz	r6, 800a4fe <__multadd+0x7e>
 800a4ba:	68a3      	ldr	r3, [r4, #8]
 800a4bc:	42ab      	cmp	r3, r5
 800a4be:	dc19      	bgt.n	800a4f4 <__multadd+0x74>
 800a4c0:	6861      	ldr	r1, [r4, #4]
 800a4c2:	4638      	mov	r0, r7
 800a4c4:	3101      	adds	r1, #1
 800a4c6:	f7ff ff79 	bl	800a3bc <_Balloc>
 800a4ca:	4680      	mov	r8, r0
 800a4cc:	b928      	cbnz	r0, 800a4da <__multadd+0x5a>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	21b5      	movs	r1, #181	; 0xb5
 800a4d2:	4b0c      	ldr	r3, [pc, #48]	; (800a504 <__multadd+0x84>)
 800a4d4:	480c      	ldr	r0, [pc, #48]	; (800a508 <__multadd+0x88>)
 800a4d6:	f000 fd4f 	bl	800af78 <__assert_func>
 800a4da:	6922      	ldr	r2, [r4, #16]
 800a4dc:	f104 010c 	add.w	r1, r4, #12
 800a4e0:	3202      	adds	r2, #2
 800a4e2:	0092      	lsls	r2, r2, #2
 800a4e4:	300c      	adds	r0, #12
 800a4e6:	f7ff ff5b 	bl	800a3a0 <memcpy>
 800a4ea:	4621      	mov	r1, r4
 800a4ec:	4638      	mov	r0, r7
 800a4ee:	f7ff ffa5 	bl	800a43c <_Bfree>
 800a4f2:	4644      	mov	r4, r8
 800a4f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a4f8:	3501      	adds	r5, #1
 800a4fa:	615e      	str	r6, [r3, #20]
 800a4fc:	6125      	str	r5, [r4, #16]
 800a4fe:	4620      	mov	r0, r4
 800a500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a504:	0800cffb 	.word	0x0800cffb
 800a508:	0800d00c 	.word	0x0800d00c

0800a50c <__hi0bits>:
 800a50c:	0c02      	lsrs	r2, r0, #16
 800a50e:	0412      	lsls	r2, r2, #16
 800a510:	4603      	mov	r3, r0
 800a512:	b9ca      	cbnz	r2, 800a548 <__hi0bits+0x3c>
 800a514:	0403      	lsls	r3, r0, #16
 800a516:	2010      	movs	r0, #16
 800a518:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a51c:	bf04      	itt	eq
 800a51e:	021b      	lsleq	r3, r3, #8
 800a520:	3008      	addeq	r0, #8
 800a522:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a526:	bf04      	itt	eq
 800a528:	011b      	lsleq	r3, r3, #4
 800a52a:	3004      	addeq	r0, #4
 800a52c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a530:	bf04      	itt	eq
 800a532:	009b      	lsleq	r3, r3, #2
 800a534:	3002      	addeq	r0, #2
 800a536:	2b00      	cmp	r3, #0
 800a538:	db05      	blt.n	800a546 <__hi0bits+0x3a>
 800a53a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a53e:	f100 0001 	add.w	r0, r0, #1
 800a542:	bf08      	it	eq
 800a544:	2020      	moveq	r0, #32
 800a546:	4770      	bx	lr
 800a548:	2000      	movs	r0, #0
 800a54a:	e7e5      	b.n	800a518 <__hi0bits+0xc>

0800a54c <__lo0bits>:
 800a54c:	6803      	ldr	r3, [r0, #0]
 800a54e:	4602      	mov	r2, r0
 800a550:	f013 0007 	ands.w	r0, r3, #7
 800a554:	d00b      	beq.n	800a56e <__lo0bits+0x22>
 800a556:	07d9      	lsls	r1, r3, #31
 800a558:	d421      	bmi.n	800a59e <__lo0bits+0x52>
 800a55a:	0798      	lsls	r0, r3, #30
 800a55c:	bf49      	itett	mi
 800a55e:	085b      	lsrmi	r3, r3, #1
 800a560:	089b      	lsrpl	r3, r3, #2
 800a562:	2001      	movmi	r0, #1
 800a564:	6013      	strmi	r3, [r2, #0]
 800a566:	bf5c      	itt	pl
 800a568:	2002      	movpl	r0, #2
 800a56a:	6013      	strpl	r3, [r2, #0]
 800a56c:	4770      	bx	lr
 800a56e:	b299      	uxth	r1, r3
 800a570:	b909      	cbnz	r1, 800a576 <__lo0bits+0x2a>
 800a572:	2010      	movs	r0, #16
 800a574:	0c1b      	lsrs	r3, r3, #16
 800a576:	b2d9      	uxtb	r1, r3
 800a578:	b909      	cbnz	r1, 800a57e <__lo0bits+0x32>
 800a57a:	3008      	adds	r0, #8
 800a57c:	0a1b      	lsrs	r3, r3, #8
 800a57e:	0719      	lsls	r1, r3, #28
 800a580:	bf04      	itt	eq
 800a582:	091b      	lsreq	r3, r3, #4
 800a584:	3004      	addeq	r0, #4
 800a586:	0799      	lsls	r1, r3, #30
 800a588:	bf04      	itt	eq
 800a58a:	089b      	lsreq	r3, r3, #2
 800a58c:	3002      	addeq	r0, #2
 800a58e:	07d9      	lsls	r1, r3, #31
 800a590:	d403      	bmi.n	800a59a <__lo0bits+0x4e>
 800a592:	085b      	lsrs	r3, r3, #1
 800a594:	f100 0001 	add.w	r0, r0, #1
 800a598:	d003      	beq.n	800a5a2 <__lo0bits+0x56>
 800a59a:	6013      	str	r3, [r2, #0]
 800a59c:	4770      	bx	lr
 800a59e:	2000      	movs	r0, #0
 800a5a0:	4770      	bx	lr
 800a5a2:	2020      	movs	r0, #32
 800a5a4:	4770      	bx	lr
	...

0800a5a8 <__i2b>:
 800a5a8:	b510      	push	{r4, lr}
 800a5aa:	460c      	mov	r4, r1
 800a5ac:	2101      	movs	r1, #1
 800a5ae:	f7ff ff05 	bl	800a3bc <_Balloc>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	b928      	cbnz	r0, 800a5c2 <__i2b+0x1a>
 800a5b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a5ba:	4b04      	ldr	r3, [pc, #16]	; (800a5cc <__i2b+0x24>)
 800a5bc:	4804      	ldr	r0, [pc, #16]	; (800a5d0 <__i2b+0x28>)
 800a5be:	f000 fcdb 	bl	800af78 <__assert_func>
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	6144      	str	r4, [r0, #20]
 800a5c6:	6103      	str	r3, [r0, #16]
 800a5c8:	bd10      	pop	{r4, pc}
 800a5ca:	bf00      	nop
 800a5cc:	0800cffb 	.word	0x0800cffb
 800a5d0:	0800d00c 	.word	0x0800d00c

0800a5d4 <__multiply>:
 800a5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d8:	4691      	mov	r9, r2
 800a5da:	690a      	ldr	r2, [r1, #16]
 800a5dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a5e0:	460c      	mov	r4, r1
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	bfbe      	ittt	lt
 800a5e6:	460b      	movlt	r3, r1
 800a5e8:	464c      	movlt	r4, r9
 800a5ea:	4699      	movlt	r9, r3
 800a5ec:	6927      	ldr	r7, [r4, #16]
 800a5ee:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a5f2:	68a3      	ldr	r3, [r4, #8]
 800a5f4:	6861      	ldr	r1, [r4, #4]
 800a5f6:	eb07 060a 	add.w	r6, r7, sl
 800a5fa:	42b3      	cmp	r3, r6
 800a5fc:	b085      	sub	sp, #20
 800a5fe:	bfb8      	it	lt
 800a600:	3101      	addlt	r1, #1
 800a602:	f7ff fedb 	bl	800a3bc <_Balloc>
 800a606:	b930      	cbnz	r0, 800a616 <__multiply+0x42>
 800a608:	4602      	mov	r2, r0
 800a60a:	f240 115d 	movw	r1, #349	; 0x15d
 800a60e:	4b43      	ldr	r3, [pc, #268]	; (800a71c <__multiply+0x148>)
 800a610:	4843      	ldr	r0, [pc, #268]	; (800a720 <__multiply+0x14c>)
 800a612:	f000 fcb1 	bl	800af78 <__assert_func>
 800a616:	f100 0514 	add.w	r5, r0, #20
 800a61a:	462b      	mov	r3, r5
 800a61c:	2200      	movs	r2, #0
 800a61e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a622:	4543      	cmp	r3, r8
 800a624:	d321      	bcc.n	800a66a <__multiply+0x96>
 800a626:	f104 0314 	add.w	r3, r4, #20
 800a62a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a62e:	f109 0314 	add.w	r3, r9, #20
 800a632:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a636:	9202      	str	r2, [sp, #8]
 800a638:	1b3a      	subs	r2, r7, r4
 800a63a:	3a15      	subs	r2, #21
 800a63c:	f022 0203 	bic.w	r2, r2, #3
 800a640:	3204      	adds	r2, #4
 800a642:	f104 0115 	add.w	r1, r4, #21
 800a646:	428f      	cmp	r7, r1
 800a648:	bf38      	it	cc
 800a64a:	2204      	movcc	r2, #4
 800a64c:	9201      	str	r2, [sp, #4]
 800a64e:	9a02      	ldr	r2, [sp, #8]
 800a650:	9303      	str	r3, [sp, #12]
 800a652:	429a      	cmp	r2, r3
 800a654:	d80c      	bhi.n	800a670 <__multiply+0x9c>
 800a656:	2e00      	cmp	r6, #0
 800a658:	dd03      	ble.n	800a662 <__multiply+0x8e>
 800a65a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d059      	beq.n	800a716 <__multiply+0x142>
 800a662:	6106      	str	r6, [r0, #16]
 800a664:	b005      	add	sp, #20
 800a666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a66a:	f843 2b04 	str.w	r2, [r3], #4
 800a66e:	e7d8      	b.n	800a622 <__multiply+0x4e>
 800a670:	f8b3 a000 	ldrh.w	sl, [r3]
 800a674:	f1ba 0f00 	cmp.w	sl, #0
 800a678:	d023      	beq.n	800a6c2 <__multiply+0xee>
 800a67a:	46a9      	mov	r9, r5
 800a67c:	f04f 0c00 	mov.w	ip, #0
 800a680:	f104 0e14 	add.w	lr, r4, #20
 800a684:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a688:	f8d9 1000 	ldr.w	r1, [r9]
 800a68c:	fa1f fb82 	uxth.w	fp, r2
 800a690:	b289      	uxth	r1, r1
 800a692:	fb0a 110b 	mla	r1, sl, fp, r1
 800a696:	4461      	add	r1, ip
 800a698:	f8d9 c000 	ldr.w	ip, [r9]
 800a69c:	0c12      	lsrs	r2, r2, #16
 800a69e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a6a2:	fb0a c202 	mla	r2, sl, r2, ip
 800a6a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a6aa:	b289      	uxth	r1, r1
 800a6ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a6b0:	4577      	cmp	r7, lr
 800a6b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a6b6:	f849 1b04 	str.w	r1, [r9], #4
 800a6ba:	d8e3      	bhi.n	800a684 <__multiply+0xb0>
 800a6bc:	9a01      	ldr	r2, [sp, #4]
 800a6be:	f845 c002 	str.w	ip, [r5, r2]
 800a6c2:	9a03      	ldr	r2, [sp, #12]
 800a6c4:	3304      	adds	r3, #4
 800a6c6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a6ca:	f1b9 0f00 	cmp.w	r9, #0
 800a6ce:	d020      	beq.n	800a712 <__multiply+0x13e>
 800a6d0:	46ae      	mov	lr, r5
 800a6d2:	f04f 0a00 	mov.w	sl, #0
 800a6d6:	6829      	ldr	r1, [r5, #0]
 800a6d8:	f104 0c14 	add.w	ip, r4, #20
 800a6dc:	f8bc b000 	ldrh.w	fp, [ip]
 800a6e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a6e4:	b289      	uxth	r1, r1
 800a6e6:	fb09 220b 	mla	r2, r9, fp, r2
 800a6ea:	4492      	add	sl, r2
 800a6ec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a6f0:	f84e 1b04 	str.w	r1, [lr], #4
 800a6f4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a6f8:	f8be 1000 	ldrh.w	r1, [lr]
 800a6fc:	0c12      	lsrs	r2, r2, #16
 800a6fe:	fb09 1102 	mla	r1, r9, r2, r1
 800a702:	4567      	cmp	r7, ip
 800a704:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a708:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a70c:	d8e6      	bhi.n	800a6dc <__multiply+0x108>
 800a70e:	9a01      	ldr	r2, [sp, #4]
 800a710:	50a9      	str	r1, [r5, r2]
 800a712:	3504      	adds	r5, #4
 800a714:	e79b      	b.n	800a64e <__multiply+0x7a>
 800a716:	3e01      	subs	r6, #1
 800a718:	e79d      	b.n	800a656 <__multiply+0x82>
 800a71a:	bf00      	nop
 800a71c:	0800cffb 	.word	0x0800cffb
 800a720:	0800d00c 	.word	0x0800d00c

0800a724 <__pow5mult>:
 800a724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a728:	4615      	mov	r5, r2
 800a72a:	f012 0203 	ands.w	r2, r2, #3
 800a72e:	4606      	mov	r6, r0
 800a730:	460f      	mov	r7, r1
 800a732:	d007      	beq.n	800a744 <__pow5mult+0x20>
 800a734:	4c25      	ldr	r4, [pc, #148]	; (800a7cc <__pow5mult+0xa8>)
 800a736:	3a01      	subs	r2, #1
 800a738:	2300      	movs	r3, #0
 800a73a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a73e:	f7ff fe9f 	bl	800a480 <__multadd>
 800a742:	4607      	mov	r7, r0
 800a744:	10ad      	asrs	r5, r5, #2
 800a746:	d03d      	beq.n	800a7c4 <__pow5mult+0xa0>
 800a748:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a74a:	b97c      	cbnz	r4, 800a76c <__pow5mult+0x48>
 800a74c:	2010      	movs	r0, #16
 800a74e:	f7ff fe11 	bl	800a374 <malloc>
 800a752:	4602      	mov	r2, r0
 800a754:	6270      	str	r0, [r6, #36]	; 0x24
 800a756:	b928      	cbnz	r0, 800a764 <__pow5mult+0x40>
 800a758:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a75c:	4b1c      	ldr	r3, [pc, #112]	; (800a7d0 <__pow5mult+0xac>)
 800a75e:	481d      	ldr	r0, [pc, #116]	; (800a7d4 <__pow5mult+0xb0>)
 800a760:	f000 fc0a 	bl	800af78 <__assert_func>
 800a764:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a768:	6004      	str	r4, [r0, #0]
 800a76a:	60c4      	str	r4, [r0, #12]
 800a76c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a770:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a774:	b94c      	cbnz	r4, 800a78a <__pow5mult+0x66>
 800a776:	f240 2171 	movw	r1, #625	; 0x271
 800a77a:	4630      	mov	r0, r6
 800a77c:	f7ff ff14 	bl	800a5a8 <__i2b>
 800a780:	2300      	movs	r3, #0
 800a782:	4604      	mov	r4, r0
 800a784:	f8c8 0008 	str.w	r0, [r8, #8]
 800a788:	6003      	str	r3, [r0, #0]
 800a78a:	f04f 0900 	mov.w	r9, #0
 800a78e:	07eb      	lsls	r3, r5, #31
 800a790:	d50a      	bpl.n	800a7a8 <__pow5mult+0x84>
 800a792:	4639      	mov	r1, r7
 800a794:	4622      	mov	r2, r4
 800a796:	4630      	mov	r0, r6
 800a798:	f7ff ff1c 	bl	800a5d4 <__multiply>
 800a79c:	4680      	mov	r8, r0
 800a79e:	4639      	mov	r1, r7
 800a7a0:	4630      	mov	r0, r6
 800a7a2:	f7ff fe4b 	bl	800a43c <_Bfree>
 800a7a6:	4647      	mov	r7, r8
 800a7a8:	106d      	asrs	r5, r5, #1
 800a7aa:	d00b      	beq.n	800a7c4 <__pow5mult+0xa0>
 800a7ac:	6820      	ldr	r0, [r4, #0]
 800a7ae:	b938      	cbnz	r0, 800a7c0 <__pow5mult+0x9c>
 800a7b0:	4622      	mov	r2, r4
 800a7b2:	4621      	mov	r1, r4
 800a7b4:	4630      	mov	r0, r6
 800a7b6:	f7ff ff0d 	bl	800a5d4 <__multiply>
 800a7ba:	6020      	str	r0, [r4, #0]
 800a7bc:	f8c0 9000 	str.w	r9, [r0]
 800a7c0:	4604      	mov	r4, r0
 800a7c2:	e7e4      	b.n	800a78e <__pow5mult+0x6a>
 800a7c4:	4638      	mov	r0, r7
 800a7c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7ca:	bf00      	nop
 800a7cc:	0800d158 	.word	0x0800d158
 800a7d0:	0800cf89 	.word	0x0800cf89
 800a7d4:	0800d00c 	.word	0x0800d00c

0800a7d8 <__lshift>:
 800a7d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7dc:	460c      	mov	r4, r1
 800a7de:	4607      	mov	r7, r0
 800a7e0:	4691      	mov	r9, r2
 800a7e2:	6923      	ldr	r3, [r4, #16]
 800a7e4:	6849      	ldr	r1, [r1, #4]
 800a7e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a7ea:	68a3      	ldr	r3, [r4, #8]
 800a7ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a7f0:	f108 0601 	add.w	r6, r8, #1
 800a7f4:	42b3      	cmp	r3, r6
 800a7f6:	db0b      	blt.n	800a810 <__lshift+0x38>
 800a7f8:	4638      	mov	r0, r7
 800a7fa:	f7ff fddf 	bl	800a3bc <_Balloc>
 800a7fe:	4605      	mov	r5, r0
 800a800:	b948      	cbnz	r0, 800a816 <__lshift+0x3e>
 800a802:	4602      	mov	r2, r0
 800a804:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a808:	4b29      	ldr	r3, [pc, #164]	; (800a8b0 <__lshift+0xd8>)
 800a80a:	482a      	ldr	r0, [pc, #168]	; (800a8b4 <__lshift+0xdc>)
 800a80c:	f000 fbb4 	bl	800af78 <__assert_func>
 800a810:	3101      	adds	r1, #1
 800a812:	005b      	lsls	r3, r3, #1
 800a814:	e7ee      	b.n	800a7f4 <__lshift+0x1c>
 800a816:	2300      	movs	r3, #0
 800a818:	f100 0114 	add.w	r1, r0, #20
 800a81c:	f100 0210 	add.w	r2, r0, #16
 800a820:	4618      	mov	r0, r3
 800a822:	4553      	cmp	r3, sl
 800a824:	db37      	blt.n	800a896 <__lshift+0xbe>
 800a826:	6920      	ldr	r0, [r4, #16]
 800a828:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a82c:	f104 0314 	add.w	r3, r4, #20
 800a830:	f019 091f 	ands.w	r9, r9, #31
 800a834:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a838:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a83c:	d02f      	beq.n	800a89e <__lshift+0xc6>
 800a83e:	468a      	mov	sl, r1
 800a840:	f04f 0c00 	mov.w	ip, #0
 800a844:	f1c9 0e20 	rsb	lr, r9, #32
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	fa02 f209 	lsl.w	r2, r2, r9
 800a84e:	ea42 020c 	orr.w	r2, r2, ip
 800a852:	f84a 2b04 	str.w	r2, [sl], #4
 800a856:	f853 2b04 	ldr.w	r2, [r3], #4
 800a85a:	4298      	cmp	r0, r3
 800a85c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a860:	d8f2      	bhi.n	800a848 <__lshift+0x70>
 800a862:	1b03      	subs	r3, r0, r4
 800a864:	3b15      	subs	r3, #21
 800a866:	f023 0303 	bic.w	r3, r3, #3
 800a86a:	3304      	adds	r3, #4
 800a86c:	f104 0215 	add.w	r2, r4, #21
 800a870:	4290      	cmp	r0, r2
 800a872:	bf38      	it	cc
 800a874:	2304      	movcc	r3, #4
 800a876:	f841 c003 	str.w	ip, [r1, r3]
 800a87a:	f1bc 0f00 	cmp.w	ip, #0
 800a87e:	d001      	beq.n	800a884 <__lshift+0xac>
 800a880:	f108 0602 	add.w	r6, r8, #2
 800a884:	3e01      	subs	r6, #1
 800a886:	4638      	mov	r0, r7
 800a888:	4621      	mov	r1, r4
 800a88a:	612e      	str	r6, [r5, #16]
 800a88c:	f7ff fdd6 	bl	800a43c <_Bfree>
 800a890:	4628      	mov	r0, r5
 800a892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a896:	f842 0f04 	str.w	r0, [r2, #4]!
 800a89a:	3301      	adds	r3, #1
 800a89c:	e7c1      	b.n	800a822 <__lshift+0x4a>
 800a89e:	3904      	subs	r1, #4
 800a8a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8a4:	4298      	cmp	r0, r3
 800a8a6:	f841 2f04 	str.w	r2, [r1, #4]!
 800a8aa:	d8f9      	bhi.n	800a8a0 <__lshift+0xc8>
 800a8ac:	e7ea      	b.n	800a884 <__lshift+0xac>
 800a8ae:	bf00      	nop
 800a8b0:	0800cffb 	.word	0x0800cffb
 800a8b4:	0800d00c 	.word	0x0800d00c

0800a8b8 <__mcmp>:
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	690a      	ldr	r2, [r1, #16]
 800a8bc:	6900      	ldr	r0, [r0, #16]
 800a8be:	b530      	push	{r4, r5, lr}
 800a8c0:	1a80      	subs	r0, r0, r2
 800a8c2:	d10d      	bne.n	800a8e0 <__mcmp+0x28>
 800a8c4:	3314      	adds	r3, #20
 800a8c6:	3114      	adds	r1, #20
 800a8c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a8cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a8d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a8d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a8d8:	4295      	cmp	r5, r2
 800a8da:	d002      	beq.n	800a8e2 <__mcmp+0x2a>
 800a8dc:	d304      	bcc.n	800a8e8 <__mcmp+0x30>
 800a8de:	2001      	movs	r0, #1
 800a8e0:	bd30      	pop	{r4, r5, pc}
 800a8e2:	42a3      	cmp	r3, r4
 800a8e4:	d3f4      	bcc.n	800a8d0 <__mcmp+0x18>
 800a8e6:	e7fb      	b.n	800a8e0 <__mcmp+0x28>
 800a8e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ec:	e7f8      	b.n	800a8e0 <__mcmp+0x28>
	...

0800a8f0 <__mdiff>:
 800a8f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f4:	460d      	mov	r5, r1
 800a8f6:	4607      	mov	r7, r0
 800a8f8:	4611      	mov	r1, r2
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	4614      	mov	r4, r2
 800a8fe:	f7ff ffdb 	bl	800a8b8 <__mcmp>
 800a902:	1e06      	subs	r6, r0, #0
 800a904:	d111      	bne.n	800a92a <__mdiff+0x3a>
 800a906:	4631      	mov	r1, r6
 800a908:	4638      	mov	r0, r7
 800a90a:	f7ff fd57 	bl	800a3bc <_Balloc>
 800a90e:	4602      	mov	r2, r0
 800a910:	b928      	cbnz	r0, 800a91e <__mdiff+0x2e>
 800a912:	f240 2132 	movw	r1, #562	; 0x232
 800a916:	4b3a      	ldr	r3, [pc, #232]	; (800aa00 <__mdiff+0x110>)
 800a918:	483a      	ldr	r0, [pc, #232]	; (800aa04 <__mdiff+0x114>)
 800a91a:	f000 fb2d 	bl	800af78 <__assert_func>
 800a91e:	2301      	movs	r3, #1
 800a920:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a924:	4610      	mov	r0, r2
 800a926:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a92a:	bfa4      	itt	ge
 800a92c:	4623      	movge	r3, r4
 800a92e:	462c      	movge	r4, r5
 800a930:	4638      	mov	r0, r7
 800a932:	6861      	ldr	r1, [r4, #4]
 800a934:	bfa6      	itte	ge
 800a936:	461d      	movge	r5, r3
 800a938:	2600      	movge	r6, #0
 800a93a:	2601      	movlt	r6, #1
 800a93c:	f7ff fd3e 	bl	800a3bc <_Balloc>
 800a940:	4602      	mov	r2, r0
 800a942:	b918      	cbnz	r0, 800a94c <__mdiff+0x5c>
 800a944:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a948:	4b2d      	ldr	r3, [pc, #180]	; (800aa00 <__mdiff+0x110>)
 800a94a:	e7e5      	b.n	800a918 <__mdiff+0x28>
 800a94c:	f102 0814 	add.w	r8, r2, #20
 800a950:	46c2      	mov	sl, r8
 800a952:	f04f 0c00 	mov.w	ip, #0
 800a956:	6927      	ldr	r7, [r4, #16]
 800a958:	60c6      	str	r6, [r0, #12]
 800a95a:	692e      	ldr	r6, [r5, #16]
 800a95c:	f104 0014 	add.w	r0, r4, #20
 800a960:	f105 0914 	add.w	r9, r5, #20
 800a964:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a968:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a96c:	3410      	adds	r4, #16
 800a96e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a972:	f859 3b04 	ldr.w	r3, [r9], #4
 800a976:	fa1f f18b 	uxth.w	r1, fp
 800a97a:	448c      	add	ip, r1
 800a97c:	b299      	uxth	r1, r3
 800a97e:	0c1b      	lsrs	r3, r3, #16
 800a980:	ebac 0101 	sub.w	r1, ip, r1
 800a984:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a988:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a98c:	b289      	uxth	r1, r1
 800a98e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a992:	454e      	cmp	r6, r9
 800a994:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a998:	f84a 3b04 	str.w	r3, [sl], #4
 800a99c:	d8e7      	bhi.n	800a96e <__mdiff+0x7e>
 800a99e:	1b73      	subs	r3, r6, r5
 800a9a0:	3b15      	subs	r3, #21
 800a9a2:	f023 0303 	bic.w	r3, r3, #3
 800a9a6:	3515      	adds	r5, #21
 800a9a8:	3304      	adds	r3, #4
 800a9aa:	42ae      	cmp	r6, r5
 800a9ac:	bf38      	it	cc
 800a9ae:	2304      	movcc	r3, #4
 800a9b0:	4418      	add	r0, r3
 800a9b2:	4443      	add	r3, r8
 800a9b4:	461e      	mov	r6, r3
 800a9b6:	4605      	mov	r5, r0
 800a9b8:	4575      	cmp	r5, lr
 800a9ba:	d30e      	bcc.n	800a9da <__mdiff+0xea>
 800a9bc:	f10e 0103 	add.w	r1, lr, #3
 800a9c0:	1a09      	subs	r1, r1, r0
 800a9c2:	f021 0103 	bic.w	r1, r1, #3
 800a9c6:	3803      	subs	r0, #3
 800a9c8:	4586      	cmp	lr, r0
 800a9ca:	bf38      	it	cc
 800a9cc:	2100      	movcc	r1, #0
 800a9ce:	4419      	add	r1, r3
 800a9d0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a9d4:	b18b      	cbz	r3, 800a9fa <__mdiff+0x10a>
 800a9d6:	6117      	str	r7, [r2, #16]
 800a9d8:	e7a4      	b.n	800a924 <__mdiff+0x34>
 800a9da:	f855 8b04 	ldr.w	r8, [r5], #4
 800a9de:	fa1f f188 	uxth.w	r1, r8
 800a9e2:	4461      	add	r1, ip
 800a9e4:	140c      	asrs	r4, r1, #16
 800a9e6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a9ea:	b289      	uxth	r1, r1
 800a9ec:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a9f0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a9f4:	f846 1b04 	str.w	r1, [r6], #4
 800a9f8:	e7de      	b.n	800a9b8 <__mdiff+0xc8>
 800a9fa:	3f01      	subs	r7, #1
 800a9fc:	e7e8      	b.n	800a9d0 <__mdiff+0xe0>
 800a9fe:	bf00      	nop
 800aa00:	0800cffb 	.word	0x0800cffb
 800aa04:	0800d00c 	.word	0x0800d00c

0800aa08 <__d2b>:
 800aa08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800aa0c:	2101      	movs	r1, #1
 800aa0e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800aa12:	4690      	mov	r8, r2
 800aa14:	461d      	mov	r5, r3
 800aa16:	f7ff fcd1 	bl	800a3bc <_Balloc>
 800aa1a:	4604      	mov	r4, r0
 800aa1c:	b930      	cbnz	r0, 800aa2c <__d2b+0x24>
 800aa1e:	4602      	mov	r2, r0
 800aa20:	f240 310a 	movw	r1, #778	; 0x30a
 800aa24:	4b24      	ldr	r3, [pc, #144]	; (800aab8 <__d2b+0xb0>)
 800aa26:	4825      	ldr	r0, [pc, #148]	; (800aabc <__d2b+0xb4>)
 800aa28:	f000 faa6 	bl	800af78 <__assert_func>
 800aa2c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800aa30:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800aa34:	bb2d      	cbnz	r5, 800aa82 <__d2b+0x7a>
 800aa36:	9301      	str	r3, [sp, #4]
 800aa38:	f1b8 0300 	subs.w	r3, r8, #0
 800aa3c:	d026      	beq.n	800aa8c <__d2b+0x84>
 800aa3e:	4668      	mov	r0, sp
 800aa40:	9300      	str	r3, [sp, #0]
 800aa42:	f7ff fd83 	bl	800a54c <__lo0bits>
 800aa46:	9900      	ldr	r1, [sp, #0]
 800aa48:	b1f0      	cbz	r0, 800aa88 <__d2b+0x80>
 800aa4a:	9a01      	ldr	r2, [sp, #4]
 800aa4c:	f1c0 0320 	rsb	r3, r0, #32
 800aa50:	fa02 f303 	lsl.w	r3, r2, r3
 800aa54:	430b      	orrs	r3, r1
 800aa56:	40c2      	lsrs	r2, r0
 800aa58:	6163      	str	r3, [r4, #20]
 800aa5a:	9201      	str	r2, [sp, #4]
 800aa5c:	9b01      	ldr	r3, [sp, #4]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	bf14      	ite	ne
 800aa62:	2102      	movne	r1, #2
 800aa64:	2101      	moveq	r1, #1
 800aa66:	61a3      	str	r3, [r4, #24]
 800aa68:	6121      	str	r1, [r4, #16]
 800aa6a:	b1c5      	cbz	r5, 800aa9e <__d2b+0x96>
 800aa6c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aa70:	4405      	add	r5, r0
 800aa72:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aa76:	603d      	str	r5, [r7, #0]
 800aa78:	6030      	str	r0, [r6, #0]
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	b002      	add	sp, #8
 800aa7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa86:	e7d6      	b.n	800aa36 <__d2b+0x2e>
 800aa88:	6161      	str	r1, [r4, #20]
 800aa8a:	e7e7      	b.n	800aa5c <__d2b+0x54>
 800aa8c:	a801      	add	r0, sp, #4
 800aa8e:	f7ff fd5d 	bl	800a54c <__lo0bits>
 800aa92:	2101      	movs	r1, #1
 800aa94:	9b01      	ldr	r3, [sp, #4]
 800aa96:	6121      	str	r1, [r4, #16]
 800aa98:	6163      	str	r3, [r4, #20]
 800aa9a:	3020      	adds	r0, #32
 800aa9c:	e7e5      	b.n	800aa6a <__d2b+0x62>
 800aa9e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800aaa2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aaa6:	6038      	str	r0, [r7, #0]
 800aaa8:	6918      	ldr	r0, [r3, #16]
 800aaaa:	f7ff fd2f 	bl	800a50c <__hi0bits>
 800aaae:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800aab2:	6031      	str	r1, [r6, #0]
 800aab4:	e7e1      	b.n	800aa7a <__d2b+0x72>
 800aab6:	bf00      	nop
 800aab8:	0800cffb 	.word	0x0800cffb
 800aabc:	0800d00c 	.word	0x0800d00c

0800aac0 <_calloc_r>:
 800aac0:	b570      	push	{r4, r5, r6, lr}
 800aac2:	fba1 5402 	umull	r5, r4, r1, r2
 800aac6:	b934      	cbnz	r4, 800aad6 <_calloc_r+0x16>
 800aac8:	4629      	mov	r1, r5
 800aaca:	f000 f875 	bl	800abb8 <_malloc_r>
 800aace:	4606      	mov	r6, r0
 800aad0:	b928      	cbnz	r0, 800aade <_calloc_r+0x1e>
 800aad2:	4630      	mov	r0, r6
 800aad4:	bd70      	pop	{r4, r5, r6, pc}
 800aad6:	220c      	movs	r2, #12
 800aad8:	2600      	movs	r6, #0
 800aada:	6002      	str	r2, [r0, #0]
 800aadc:	e7f9      	b.n	800aad2 <_calloc_r+0x12>
 800aade:	462a      	mov	r2, r5
 800aae0:	4621      	mov	r1, r4
 800aae2:	f7fe f92d 	bl	8008d40 <memset>
 800aae6:	e7f4      	b.n	800aad2 <_calloc_r+0x12>

0800aae8 <_free_r>:
 800aae8:	b538      	push	{r3, r4, r5, lr}
 800aaea:	4605      	mov	r5, r0
 800aaec:	2900      	cmp	r1, #0
 800aaee:	d040      	beq.n	800ab72 <_free_r+0x8a>
 800aaf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaf4:	1f0c      	subs	r4, r1, #4
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	bfb8      	it	lt
 800aafa:	18e4      	addlt	r4, r4, r3
 800aafc:	f000 fa98 	bl	800b030 <__malloc_lock>
 800ab00:	4a1c      	ldr	r2, [pc, #112]	; (800ab74 <_free_r+0x8c>)
 800ab02:	6813      	ldr	r3, [r2, #0]
 800ab04:	b933      	cbnz	r3, 800ab14 <_free_r+0x2c>
 800ab06:	6063      	str	r3, [r4, #4]
 800ab08:	6014      	str	r4, [r2, #0]
 800ab0a:	4628      	mov	r0, r5
 800ab0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab10:	f000 ba94 	b.w	800b03c <__malloc_unlock>
 800ab14:	42a3      	cmp	r3, r4
 800ab16:	d908      	bls.n	800ab2a <_free_r+0x42>
 800ab18:	6820      	ldr	r0, [r4, #0]
 800ab1a:	1821      	adds	r1, r4, r0
 800ab1c:	428b      	cmp	r3, r1
 800ab1e:	bf01      	itttt	eq
 800ab20:	6819      	ldreq	r1, [r3, #0]
 800ab22:	685b      	ldreq	r3, [r3, #4]
 800ab24:	1809      	addeq	r1, r1, r0
 800ab26:	6021      	streq	r1, [r4, #0]
 800ab28:	e7ed      	b.n	800ab06 <_free_r+0x1e>
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	b10b      	cbz	r3, 800ab34 <_free_r+0x4c>
 800ab30:	42a3      	cmp	r3, r4
 800ab32:	d9fa      	bls.n	800ab2a <_free_r+0x42>
 800ab34:	6811      	ldr	r1, [r2, #0]
 800ab36:	1850      	adds	r0, r2, r1
 800ab38:	42a0      	cmp	r0, r4
 800ab3a:	d10b      	bne.n	800ab54 <_free_r+0x6c>
 800ab3c:	6820      	ldr	r0, [r4, #0]
 800ab3e:	4401      	add	r1, r0
 800ab40:	1850      	adds	r0, r2, r1
 800ab42:	4283      	cmp	r3, r0
 800ab44:	6011      	str	r1, [r2, #0]
 800ab46:	d1e0      	bne.n	800ab0a <_free_r+0x22>
 800ab48:	6818      	ldr	r0, [r3, #0]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	4401      	add	r1, r0
 800ab4e:	6011      	str	r1, [r2, #0]
 800ab50:	6053      	str	r3, [r2, #4]
 800ab52:	e7da      	b.n	800ab0a <_free_r+0x22>
 800ab54:	d902      	bls.n	800ab5c <_free_r+0x74>
 800ab56:	230c      	movs	r3, #12
 800ab58:	602b      	str	r3, [r5, #0]
 800ab5a:	e7d6      	b.n	800ab0a <_free_r+0x22>
 800ab5c:	6820      	ldr	r0, [r4, #0]
 800ab5e:	1821      	adds	r1, r4, r0
 800ab60:	428b      	cmp	r3, r1
 800ab62:	bf01      	itttt	eq
 800ab64:	6819      	ldreq	r1, [r3, #0]
 800ab66:	685b      	ldreq	r3, [r3, #4]
 800ab68:	1809      	addeq	r1, r1, r0
 800ab6a:	6021      	streq	r1, [r4, #0]
 800ab6c:	6063      	str	r3, [r4, #4]
 800ab6e:	6054      	str	r4, [r2, #4]
 800ab70:	e7cb      	b.n	800ab0a <_free_r+0x22>
 800ab72:	bd38      	pop	{r3, r4, r5, pc}
 800ab74:	20002624 	.word	0x20002624

0800ab78 <sbrk_aligned>:
 800ab78:	b570      	push	{r4, r5, r6, lr}
 800ab7a:	4e0e      	ldr	r6, [pc, #56]	; (800abb4 <sbrk_aligned+0x3c>)
 800ab7c:	460c      	mov	r4, r1
 800ab7e:	6831      	ldr	r1, [r6, #0]
 800ab80:	4605      	mov	r5, r0
 800ab82:	b911      	cbnz	r1, 800ab8a <sbrk_aligned+0x12>
 800ab84:	f000 f9e8 	bl	800af58 <_sbrk_r>
 800ab88:	6030      	str	r0, [r6, #0]
 800ab8a:	4621      	mov	r1, r4
 800ab8c:	4628      	mov	r0, r5
 800ab8e:	f000 f9e3 	bl	800af58 <_sbrk_r>
 800ab92:	1c43      	adds	r3, r0, #1
 800ab94:	d00a      	beq.n	800abac <sbrk_aligned+0x34>
 800ab96:	1cc4      	adds	r4, r0, #3
 800ab98:	f024 0403 	bic.w	r4, r4, #3
 800ab9c:	42a0      	cmp	r0, r4
 800ab9e:	d007      	beq.n	800abb0 <sbrk_aligned+0x38>
 800aba0:	1a21      	subs	r1, r4, r0
 800aba2:	4628      	mov	r0, r5
 800aba4:	f000 f9d8 	bl	800af58 <_sbrk_r>
 800aba8:	3001      	adds	r0, #1
 800abaa:	d101      	bne.n	800abb0 <sbrk_aligned+0x38>
 800abac:	f04f 34ff 	mov.w	r4, #4294967295
 800abb0:	4620      	mov	r0, r4
 800abb2:	bd70      	pop	{r4, r5, r6, pc}
 800abb4:	20002628 	.word	0x20002628

0800abb8 <_malloc_r>:
 800abb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abbc:	1ccd      	adds	r5, r1, #3
 800abbe:	f025 0503 	bic.w	r5, r5, #3
 800abc2:	3508      	adds	r5, #8
 800abc4:	2d0c      	cmp	r5, #12
 800abc6:	bf38      	it	cc
 800abc8:	250c      	movcc	r5, #12
 800abca:	2d00      	cmp	r5, #0
 800abcc:	4607      	mov	r7, r0
 800abce:	db01      	blt.n	800abd4 <_malloc_r+0x1c>
 800abd0:	42a9      	cmp	r1, r5
 800abd2:	d905      	bls.n	800abe0 <_malloc_r+0x28>
 800abd4:	230c      	movs	r3, #12
 800abd6:	2600      	movs	r6, #0
 800abd8:	603b      	str	r3, [r7, #0]
 800abda:	4630      	mov	r0, r6
 800abdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abe0:	4e2e      	ldr	r6, [pc, #184]	; (800ac9c <_malloc_r+0xe4>)
 800abe2:	f000 fa25 	bl	800b030 <__malloc_lock>
 800abe6:	6833      	ldr	r3, [r6, #0]
 800abe8:	461c      	mov	r4, r3
 800abea:	bb34      	cbnz	r4, 800ac3a <_malloc_r+0x82>
 800abec:	4629      	mov	r1, r5
 800abee:	4638      	mov	r0, r7
 800abf0:	f7ff ffc2 	bl	800ab78 <sbrk_aligned>
 800abf4:	1c43      	adds	r3, r0, #1
 800abf6:	4604      	mov	r4, r0
 800abf8:	d14d      	bne.n	800ac96 <_malloc_r+0xde>
 800abfa:	6834      	ldr	r4, [r6, #0]
 800abfc:	4626      	mov	r6, r4
 800abfe:	2e00      	cmp	r6, #0
 800ac00:	d140      	bne.n	800ac84 <_malloc_r+0xcc>
 800ac02:	6823      	ldr	r3, [r4, #0]
 800ac04:	4631      	mov	r1, r6
 800ac06:	4638      	mov	r0, r7
 800ac08:	eb04 0803 	add.w	r8, r4, r3
 800ac0c:	f000 f9a4 	bl	800af58 <_sbrk_r>
 800ac10:	4580      	cmp	r8, r0
 800ac12:	d13a      	bne.n	800ac8a <_malloc_r+0xd2>
 800ac14:	6821      	ldr	r1, [r4, #0]
 800ac16:	3503      	adds	r5, #3
 800ac18:	1a6d      	subs	r5, r5, r1
 800ac1a:	f025 0503 	bic.w	r5, r5, #3
 800ac1e:	3508      	adds	r5, #8
 800ac20:	2d0c      	cmp	r5, #12
 800ac22:	bf38      	it	cc
 800ac24:	250c      	movcc	r5, #12
 800ac26:	4638      	mov	r0, r7
 800ac28:	4629      	mov	r1, r5
 800ac2a:	f7ff ffa5 	bl	800ab78 <sbrk_aligned>
 800ac2e:	3001      	adds	r0, #1
 800ac30:	d02b      	beq.n	800ac8a <_malloc_r+0xd2>
 800ac32:	6823      	ldr	r3, [r4, #0]
 800ac34:	442b      	add	r3, r5
 800ac36:	6023      	str	r3, [r4, #0]
 800ac38:	e00e      	b.n	800ac58 <_malloc_r+0xa0>
 800ac3a:	6822      	ldr	r2, [r4, #0]
 800ac3c:	1b52      	subs	r2, r2, r5
 800ac3e:	d41e      	bmi.n	800ac7e <_malloc_r+0xc6>
 800ac40:	2a0b      	cmp	r2, #11
 800ac42:	d916      	bls.n	800ac72 <_malloc_r+0xba>
 800ac44:	1961      	adds	r1, r4, r5
 800ac46:	42a3      	cmp	r3, r4
 800ac48:	6025      	str	r5, [r4, #0]
 800ac4a:	bf18      	it	ne
 800ac4c:	6059      	strne	r1, [r3, #4]
 800ac4e:	6863      	ldr	r3, [r4, #4]
 800ac50:	bf08      	it	eq
 800ac52:	6031      	streq	r1, [r6, #0]
 800ac54:	5162      	str	r2, [r4, r5]
 800ac56:	604b      	str	r3, [r1, #4]
 800ac58:	4638      	mov	r0, r7
 800ac5a:	f104 060b 	add.w	r6, r4, #11
 800ac5e:	f000 f9ed 	bl	800b03c <__malloc_unlock>
 800ac62:	f026 0607 	bic.w	r6, r6, #7
 800ac66:	1d23      	adds	r3, r4, #4
 800ac68:	1af2      	subs	r2, r6, r3
 800ac6a:	d0b6      	beq.n	800abda <_malloc_r+0x22>
 800ac6c:	1b9b      	subs	r3, r3, r6
 800ac6e:	50a3      	str	r3, [r4, r2]
 800ac70:	e7b3      	b.n	800abda <_malloc_r+0x22>
 800ac72:	6862      	ldr	r2, [r4, #4]
 800ac74:	42a3      	cmp	r3, r4
 800ac76:	bf0c      	ite	eq
 800ac78:	6032      	streq	r2, [r6, #0]
 800ac7a:	605a      	strne	r2, [r3, #4]
 800ac7c:	e7ec      	b.n	800ac58 <_malloc_r+0xa0>
 800ac7e:	4623      	mov	r3, r4
 800ac80:	6864      	ldr	r4, [r4, #4]
 800ac82:	e7b2      	b.n	800abea <_malloc_r+0x32>
 800ac84:	4634      	mov	r4, r6
 800ac86:	6876      	ldr	r6, [r6, #4]
 800ac88:	e7b9      	b.n	800abfe <_malloc_r+0x46>
 800ac8a:	230c      	movs	r3, #12
 800ac8c:	4638      	mov	r0, r7
 800ac8e:	603b      	str	r3, [r7, #0]
 800ac90:	f000 f9d4 	bl	800b03c <__malloc_unlock>
 800ac94:	e7a1      	b.n	800abda <_malloc_r+0x22>
 800ac96:	6025      	str	r5, [r4, #0]
 800ac98:	e7de      	b.n	800ac58 <_malloc_r+0xa0>
 800ac9a:	bf00      	nop
 800ac9c:	20002624 	.word	0x20002624

0800aca0 <__ssputs_r>:
 800aca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aca4:	688e      	ldr	r6, [r1, #8]
 800aca6:	4682      	mov	sl, r0
 800aca8:	429e      	cmp	r6, r3
 800acaa:	460c      	mov	r4, r1
 800acac:	4690      	mov	r8, r2
 800acae:	461f      	mov	r7, r3
 800acb0:	d838      	bhi.n	800ad24 <__ssputs_r+0x84>
 800acb2:	898a      	ldrh	r2, [r1, #12]
 800acb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800acb8:	d032      	beq.n	800ad20 <__ssputs_r+0x80>
 800acba:	6825      	ldr	r5, [r4, #0]
 800acbc:	6909      	ldr	r1, [r1, #16]
 800acbe:	3301      	adds	r3, #1
 800acc0:	eba5 0901 	sub.w	r9, r5, r1
 800acc4:	6965      	ldr	r5, [r4, #20]
 800acc6:	444b      	add	r3, r9
 800acc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800accc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800acd0:	106d      	asrs	r5, r5, #1
 800acd2:	429d      	cmp	r5, r3
 800acd4:	bf38      	it	cc
 800acd6:	461d      	movcc	r5, r3
 800acd8:	0553      	lsls	r3, r2, #21
 800acda:	d531      	bpl.n	800ad40 <__ssputs_r+0xa0>
 800acdc:	4629      	mov	r1, r5
 800acde:	f7ff ff6b 	bl	800abb8 <_malloc_r>
 800ace2:	4606      	mov	r6, r0
 800ace4:	b950      	cbnz	r0, 800acfc <__ssputs_r+0x5c>
 800ace6:	230c      	movs	r3, #12
 800ace8:	f04f 30ff 	mov.w	r0, #4294967295
 800acec:	f8ca 3000 	str.w	r3, [sl]
 800acf0:	89a3      	ldrh	r3, [r4, #12]
 800acf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acf6:	81a3      	strh	r3, [r4, #12]
 800acf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acfc:	464a      	mov	r2, r9
 800acfe:	6921      	ldr	r1, [r4, #16]
 800ad00:	f7ff fb4e 	bl	800a3a0 <memcpy>
 800ad04:	89a3      	ldrh	r3, [r4, #12]
 800ad06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ad0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad0e:	81a3      	strh	r3, [r4, #12]
 800ad10:	6126      	str	r6, [r4, #16]
 800ad12:	444e      	add	r6, r9
 800ad14:	6026      	str	r6, [r4, #0]
 800ad16:	463e      	mov	r6, r7
 800ad18:	6165      	str	r5, [r4, #20]
 800ad1a:	eba5 0509 	sub.w	r5, r5, r9
 800ad1e:	60a5      	str	r5, [r4, #8]
 800ad20:	42be      	cmp	r6, r7
 800ad22:	d900      	bls.n	800ad26 <__ssputs_r+0x86>
 800ad24:	463e      	mov	r6, r7
 800ad26:	4632      	mov	r2, r6
 800ad28:	4641      	mov	r1, r8
 800ad2a:	6820      	ldr	r0, [r4, #0]
 800ad2c:	f000 f966 	bl	800affc <memmove>
 800ad30:	68a3      	ldr	r3, [r4, #8]
 800ad32:	2000      	movs	r0, #0
 800ad34:	1b9b      	subs	r3, r3, r6
 800ad36:	60a3      	str	r3, [r4, #8]
 800ad38:	6823      	ldr	r3, [r4, #0]
 800ad3a:	4433      	add	r3, r6
 800ad3c:	6023      	str	r3, [r4, #0]
 800ad3e:	e7db      	b.n	800acf8 <__ssputs_r+0x58>
 800ad40:	462a      	mov	r2, r5
 800ad42:	f000 f981 	bl	800b048 <_realloc_r>
 800ad46:	4606      	mov	r6, r0
 800ad48:	2800      	cmp	r0, #0
 800ad4a:	d1e1      	bne.n	800ad10 <__ssputs_r+0x70>
 800ad4c:	4650      	mov	r0, sl
 800ad4e:	6921      	ldr	r1, [r4, #16]
 800ad50:	f7ff feca 	bl	800aae8 <_free_r>
 800ad54:	e7c7      	b.n	800ace6 <__ssputs_r+0x46>
	...

0800ad58 <_svfiprintf_r>:
 800ad58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad5c:	4698      	mov	r8, r3
 800ad5e:	898b      	ldrh	r3, [r1, #12]
 800ad60:	4607      	mov	r7, r0
 800ad62:	061b      	lsls	r3, r3, #24
 800ad64:	460d      	mov	r5, r1
 800ad66:	4614      	mov	r4, r2
 800ad68:	b09d      	sub	sp, #116	; 0x74
 800ad6a:	d50e      	bpl.n	800ad8a <_svfiprintf_r+0x32>
 800ad6c:	690b      	ldr	r3, [r1, #16]
 800ad6e:	b963      	cbnz	r3, 800ad8a <_svfiprintf_r+0x32>
 800ad70:	2140      	movs	r1, #64	; 0x40
 800ad72:	f7ff ff21 	bl	800abb8 <_malloc_r>
 800ad76:	6028      	str	r0, [r5, #0]
 800ad78:	6128      	str	r0, [r5, #16]
 800ad7a:	b920      	cbnz	r0, 800ad86 <_svfiprintf_r+0x2e>
 800ad7c:	230c      	movs	r3, #12
 800ad7e:	603b      	str	r3, [r7, #0]
 800ad80:	f04f 30ff 	mov.w	r0, #4294967295
 800ad84:	e0d1      	b.n	800af2a <_svfiprintf_r+0x1d2>
 800ad86:	2340      	movs	r3, #64	; 0x40
 800ad88:	616b      	str	r3, [r5, #20]
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	9309      	str	r3, [sp, #36]	; 0x24
 800ad8e:	2320      	movs	r3, #32
 800ad90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad94:	2330      	movs	r3, #48	; 0x30
 800ad96:	f04f 0901 	mov.w	r9, #1
 800ad9a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad9e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800af44 <_svfiprintf_r+0x1ec>
 800ada2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ada6:	4623      	mov	r3, r4
 800ada8:	469a      	mov	sl, r3
 800adaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adae:	b10a      	cbz	r2, 800adb4 <_svfiprintf_r+0x5c>
 800adb0:	2a25      	cmp	r2, #37	; 0x25
 800adb2:	d1f9      	bne.n	800ada8 <_svfiprintf_r+0x50>
 800adb4:	ebba 0b04 	subs.w	fp, sl, r4
 800adb8:	d00b      	beq.n	800add2 <_svfiprintf_r+0x7a>
 800adba:	465b      	mov	r3, fp
 800adbc:	4622      	mov	r2, r4
 800adbe:	4629      	mov	r1, r5
 800adc0:	4638      	mov	r0, r7
 800adc2:	f7ff ff6d 	bl	800aca0 <__ssputs_r>
 800adc6:	3001      	adds	r0, #1
 800adc8:	f000 80aa 	beq.w	800af20 <_svfiprintf_r+0x1c8>
 800adcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adce:	445a      	add	r2, fp
 800add0:	9209      	str	r2, [sp, #36]	; 0x24
 800add2:	f89a 3000 	ldrb.w	r3, [sl]
 800add6:	2b00      	cmp	r3, #0
 800add8:	f000 80a2 	beq.w	800af20 <_svfiprintf_r+0x1c8>
 800addc:	2300      	movs	r3, #0
 800adde:	f04f 32ff 	mov.w	r2, #4294967295
 800ade2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ade6:	f10a 0a01 	add.w	sl, sl, #1
 800adea:	9304      	str	r3, [sp, #16]
 800adec:	9307      	str	r3, [sp, #28]
 800adee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800adf2:	931a      	str	r3, [sp, #104]	; 0x68
 800adf4:	4654      	mov	r4, sl
 800adf6:	2205      	movs	r2, #5
 800adf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adfc:	4851      	ldr	r0, [pc, #324]	; (800af44 <_svfiprintf_r+0x1ec>)
 800adfe:	f7ff fac1 	bl	800a384 <memchr>
 800ae02:	9a04      	ldr	r2, [sp, #16]
 800ae04:	b9d8      	cbnz	r0, 800ae3e <_svfiprintf_r+0xe6>
 800ae06:	06d0      	lsls	r0, r2, #27
 800ae08:	bf44      	itt	mi
 800ae0a:	2320      	movmi	r3, #32
 800ae0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae10:	0711      	lsls	r1, r2, #28
 800ae12:	bf44      	itt	mi
 800ae14:	232b      	movmi	r3, #43	; 0x2b
 800ae16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae1a:	f89a 3000 	ldrb.w	r3, [sl]
 800ae1e:	2b2a      	cmp	r3, #42	; 0x2a
 800ae20:	d015      	beq.n	800ae4e <_svfiprintf_r+0xf6>
 800ae22:	4654      	mov	r4, sl
 800ae24:	2000      	movs	r0, #0
 800ae26:	f04f 0c0a 	mov.w	ip, #10
 800ae2a:	9a07      	ldr	r2, [sp, #28]
 800ae2c:	4621      	mov	r1, r4
 800ae2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae32:	3b30      	subs	r3, #48	; 0x30
 800ae34:	2b09      	cmp	r3, #9
 800ae36:	d94e      	bls.n	800aed6 <_svfiprintf_r+0x17e>
 800ae38:	b1b0      	cbz	r0, 800ae68 <_svfiprintf_r+0x110>
 800ae3a:	9207      	str	r2, [sp, #28]
 800ae3c:	e014      	b.n	800ae68 <_svfiprintf_r+0x110>
 800ae3e:	eba0 0308 	sub.w	r3, r0, r8
 800ae42:	fa09 f303 	lsl.w	r3, r9, r3
 800ae46:	4313      	orrs	r3, r2
 800ae48:	46a2      	mov	sl, r4
 800ae4a:	9304      	str	r3, [sp, #16]
 800ae4c:	e7d2      	b.n	800adf4 <_svfiprintf_r+0x9c>
 800ae4e:	9b03      	ldr	r3, [sp, #12]
 800ae50:	1d19      	adds	r1, r3, #4
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	9103      	str	r1, [sp, #12]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	bfbb      	ittet	lt
 800ae5a:	425b      	neglt	r3, r3
 800ae5c:	f042 0202 	orrlt.w	r2, r2, #2
 800ae60:	9307      	strge	r3, [sp, #28]
 800ae62:	9307      	strlt	r3, [sp, #28]
 800ae64:	bfb8      	it	lt
 800ae66:	9204      	strlt	r2, [sp, #16]
 800ae68:	7823      	ldrb	r3, [r4, #0]
 800ae6a:	2b2e      	cmp	r3, #46	; 0x2e
 800ae6c:	d10c      	bne.n	800ae88 <_svfiprintf_r+0x130>
 800ae6e:	7863      	ldrb	r3, [r4, #1]
 800ae70:	2b2a      	cmp	r3, #42	; 0x2a
 800ae72:	d135      	bne.n	800aee0 <_svfiprintf_r+0x188>
 800ae74:	9b03      	ldr	r3, [sp, #12]
 800ae76:	3402      	adds	r4, #2
 800ae78:	1d1a      	adds	r2, r3, #4
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	9203      	str	r2, [sp, #12]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	bfb8      	it	lt
 800ae82:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae86:	9305      	str	r3, [sp, #20]
 800ae88:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800af48 <_svfiprintf_r+0x1f0>
 800ae8c:	2203      	movs	r2, #3
 800ae8e:	4650      	mov	r0, sl
 800ae90:	7821      	ldrb	r1, [r4, #0]
 800ae92:	f7ff fa77 	bl	800a384 <memchr>
 800ae96:	b140      	cbz	r0, 800aeaa <_svfiprintf_r+0x152>
 800ae98:	2340      	movs	r3, #64	; 0x40
 800ae9a:	eba0 000a 	sub.w	r0, r0, sl
 800ae9e:	fa03 f000 	lsl.w	r0, r3, r0
 800aea2:	9b04      	ldr	r3, [sp, #16]
 800aea4:	3401      	adds	r4, #1
 800aea6:	4303      	orrs	r3, r0
 800aea8:	9304      	str	r3, [sp, #16]
 800aeaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeae:	2206      	movs	r2, #6
 800aeb0:	4826      	ldr	r0, [pc, #152]	; (800af4c <_svfiprintf_r+0x1f4>)
 800aeb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aeb6:	f7ff fa65 	bl	800a384 <memchr>
 800aeba:	2800      	cmp	r0, #0
 800aebc:	d038      	beq.n	800af30 <_svfiprintf_r+0x1d8>
 800aebe:	4b24      	ldr	r3, [pc, #144]	; (800af50 <_svfiprintf_r+0x1f8>)
 800aec0:	bb1b      	cbnz	r3, 800af0a <_svfiprintf_r+0x1b2>
 800aec2:	9b03      	ldr	r3, [sp, #12]
 800aec4:	3307      	adds	r3, #7
 800aec6:	f023 0307 	bic.w	r3, r3, #7
 800aeca:	3308      	adds	r3, #8
 800aecc:	9303      	str	r3, [sp, #12]
 800aece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aed0:	4433      	add	r3, r6
 800aed2:	9309      	str	r3, [sp, #36]	; 0x24
 800aed4:	e767      	b.n	800ada6 <_svfiprintf_r+0x4e>
 800aed6:	460c      	mov	r4, r1
 800aed8:	2001      	movs	r0, #1
 800aeda:	fb0c 3202 	mla	r2, ip, r2, r3
 800aede:	e7a5      	b.n	800ae2c <_svfiprintf_r+0xd4>
 800aee0:	2300      	movs	r3, #0
 800aee2:	f04f 0c0a 	mov.w	ip, #10
 800aee6:	4619      	mov	r1, r3
 800aee8:	3401      	adds	r4, #1
 800aeea:	9305      	str	r3, [sp, #20]
 800aeec:	4620      	mov	r0, r4
 800aeee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aef2:	3a30      	subs	r2, #48	; 0x30
 800aef4:	2a09      	cmp	r2, #9
 800aef6:	d903      	bls.n	800af00 <_svfiprintf_r+0x1a8>
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d0c5      	beq.n	800ae88 <_svfiprintf_r+0x130>
 800aefc:	9105      	str	r1, [sp, #20]
 800aefe:	e7c3      	b.n	800ae88 <_svfiprintf_r+0x130>
 800af00:	4604      	mov	r4, r0
 800af02:	2301      	movs	r3, #1
 800af04:	fb0c 2101 	mla	r1, ip, r1, r2
 800af08:	e7f0      	b.n	800aeec <_svfiprintf_r+0x194>
 800af0a:	ab03      	add	r3, sp, #12
 800af0c:	9300      	str	r3, [sp, #0]
 800af0e:	462a      	mov	r2, r5
 800af10:	4638      	mov	r0, r7
 800af12:	4b10      	ldr	r3, [pc, #64]	; (800af54 <_svfiprintf_r+0x1fc>)
 800af14:	a904      	add	r1, sp, #16
 800af16:	f7fd ffb9 	bl	8008e8c <_printf_float>
 800af1a:	1c42      	adds	r2, r0, #1
 800af1c:	4606      	mov	r6, r0
 800af1e:	d1d6      	bne.n	800aece <_svfiprintf_r+0x176>
 800af20:	89ab      	ldrh	r3, [r5, #12]
 800af22:	065b      	lsls	r3, r3, #25
 800af24:	f53f af2c 	bmi.w	800ad80 <_svfiprintf_r+0x28>
 800af28:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af2a:	b01d      	add	sp, #116	; 0x74
 800af2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af30:	ab03      	add	r3, sp, #12
 800af32:	9300      	str	r3, [sp, #0]
 800af34:	462a      	mov	r2, r5
 800af36:	4638      	mov	r0, r7
 800af38:	4b06      	ldr	r3, [pc, #24]	; (800af54 <_svfiprintf_r+0x1fc>)
 800af3a:	a904      	add	r1, sp, #16
 800af3c:	f7fe fa42 	bl	80093c4 <_printf_i>
 800af40:	e7eb      	b.n	800af1a <_svfiprintf_r+0x1c2>
 800af42:	bf00      	nop
 800af44:	0800d164 	.word	0x0800d164
 800af48:	0800d16a 	.word	0x0800d16a
 800af4c:	0800d16e 	.word	0x0800d16e
 800af50:	08008e8d 	.word	0x08008e8d
 800af54:	0800aca1 	.word	0x0800aca1

0800af58 <_sbrk_r>:
 800af58:	b538      	push	{r3, r4, r5, lr}
 800af5a:	2300      	movs	r3, #0
 800af5c:	4d05      	ldr	r5, [pc, #20]	; (800af74 <_sbrk_r+0x1c>)
 800af5e:	4604      	mov	r4, r0
 800af60:	4608      	mov	r0, r1
 800af62:	602b      	str	r3, [r5, #0]
 800af64:	f7f7 fb70 	bl	8002648 <_sbrk>
 800af68:	1c43      	adds	r3, r0, #1
 800af6a:	d102      	bne.n	800af72 <_sbrk_r+0x1a>
 800af6c:	682b      	ldr	r3, [r5, #0]
 800af6e:	b103      	cbz	r3, 800af72 <_sbrk_r+0x1a>
 800af70:	6023      	str	r3, [r4, #0]
 800af72:	bd38      	pop	{r3, r4, r5, pc}
 800af74:	2000262c 	.word	0x2000262c

0800af78 <__assert_func>:
 800af78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af7a:	4614      	mov	r4, r2
 800af7c:	461a      	mov	r2, r3
 800af7e:	4b09      	ldr	r3, [pc, #36]	; (800afa4 <__assert_func+0x2c>)
 800af80:	4605      	mov	r5, r0
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	68d8      	ldr	r0, [r3, #12]
 800af86:	b14c      	cbz	r4, 800af9c <__assert_func+0x24>
 800af88:	4b07      	ldr	r3, [pc, #28]	; (800afa8 <__assert_func+0x30>)
 800af8a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af8e:	9100      	str	r1, [sp, #0]
 800af90:	462b      	mov	r3, r5
 800af92:	4906      	ldr	r1, [pc, #24]	; (800afac <__assert_func+0x34>)
 800af94:	f000 f80e 	bl	800afb4 <fiprintf>
 800af98:	f000 faaa 	bl	800b4f0 <abort>
 800af9c:	4b04      	ldr	r3, [pc, #16]	; (800afb0 <__assert_func+0x38>)
 800af9e:	461c      	mov	r4, r3
 800afa0:	e7f3      	b.n	800af8a <__assert_func+0x12>
 800afa2:	bf00      	nop
 800afa4:	20000024 	.word	0x20000024
 800afa8:	0800d175 	.word	0x0800d175
 800afac:	0800d182 	.word	0x0800d182
 800afb0:	0800d1b0 	.word	0x0800d1b0

0800afb4 <fiprintf>:
 800afb4:	b40e      	push	{r1, r2, r3}
 800afb6:	b503      	push	{r0, r1, lr}
 800afb8:	4601      	mov	r1, r0
 800afba:	ab03      	add	r3, sp, #12
 800afbc:	4805      	ldr	r0, [pc, #20]	; (800afd4 <fiprintf+0x20>)
 800afbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800afc2:	6800      	ldr	r0, [r0, #0]
 800afc4:	9301      	str	r3, [sp, #4]
 800afc6:	f000 f895 	bl	800b0f4 <_vfiprintf_r>
 800afca:	b002      	add	sp, #8
 800afcc:	f85d eb04 	ldr.w	lr, [sp], #4
 800afd0:	b003      	add	sp, #12
 800afd2:	4770      	bx	lr
 800afd4:	20000024 	.word	0x20000024

0800afd8 <__ascii_mbtowc>:
 800afd8:	b082      	sub	sp, #8
 800afda:	b901      	cbnz	r1, 800afde <__ascii_mbtowc+0x6>
 800afdc:	a901      	add	r1, sp, #4
 800afde:	b142      	cbz	r2, 800aff2 <__ascii_mbtowc+0x1a>
 800afe0:	b14b      	cbz	r3, 800aff6 <__ascii_mbtowc+0x1e>
 800afe2:	7813      	ldrb	r3, [r2, #0]
 800afe4:	600b      	str	r3, [r1, #0]
 800afe6:	7812      	ldrb	r2, [r2, #0]
 800afe8:	1e10      	subs	r0, r2, #0
 800afea:	bf18      	it	ne
 800afec:	2001      	movne	r0, #1
 800afee:	b002      	add	sp, #8
 800aff0:	4770      	bx	lr
 800aff2:	4610      	mov	r0, r2
 800aff4:	e7fb      	b.n	800afee <__ascii_mbtowc+0x16>
 800aff6:	f06f 0001 	mvn.w	r0, #1
 800affa:	e7f8      	b.n	800afee <__ascii_mbtowc+0x16>

0800affc <memmove>:
 800affc:	4288      	cmp	r0, r1
 800affe:	b510      	push	{r4, lr}
 800b000:	eb01 0402 	add.w	r4, r1, r2
 800b004:	d902      	bls.n	800b00c <memmove+0x10>
 800b006:	4284      	cmp	r4, r0
 800b008:	4623      	mov	r3, r4
 800b00a:	d807      	bhi.n	800b01c <memmove+0x20>
 800b00c:	1e43      	subs	r3, r0, #1
 800b00e:	42a1      	cmp	r1, r4
 800b010:	d008      	beq.n	800b024 <memmove+0x28>
 800b012:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b016:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b01a:	e7f8      	b.n	800b00e <memmove+0x12>
 800b01c:	4601      	mov	r1, r0
 800b01e:	4402      	add	r2, r0
 800b020:	428a      	cmp	r2, r1
 800b022:	d100      	bne.n	800b026 <memmove+0x2a>
 800b024:	bd10      	pop	{r4, pc}
 800b026:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b02a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b02e:	e7f7      	b.n	800b020 <memmove+0x24>

0800b030 <__malloc_lock>:
 800b030:	4801      	ldr	r0, [pc, #4]	; (800b038 <__malloc_lock+0x8>)
 800b032:	f000 bc19 	b.w	800b868 <__retarget_lock_acquire_recursive>
 800b036:	bf00      	nop
 800b038:	20002630 	.word	0x20002630

0800b03c <__malloc_unlock>:
 800b03c:	4801      	ldr	r0, [pc, #4]	; (800b044 <__malloc_unlock+0x8>)
 800b03e:	f000 bc14 	b.w	800b86a <__retarget_lock_release_recursive>
 800b042:	bf00      	nop
 800b044:	20002630 	.word	0x20002630

0800b048 <_realloc_r>:
 800b048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b04c:	4680      	mov	r8, r0
 800b04e:	4614      	mov	r4, r2
 800b050:	460e      	mov	r6, r1
 800b052:	b921      	cbnz	r1, 800b05e <_realloc_r+0x16>
 800b054:	4611      	mov	r1, r2
 800b056:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b05a:	f7ff bdad 	b.w	800abb8 <_malloc_r>
 800b05e:	b92a      	cbnz	r2, 800b06c <_realloc_r+0x24>
 800b060:	f7ff fd42 	bl	800aae8 <_free_r>
 800b064:	4625      	mov	r5, r4
 800b066:	4628      	mov	r0, r5
 800b068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b06c:	f000 fc64 	bl	800b938 <_malloc_usable_size_r>
 800b070:	4284      	cmp	r4, r0
 800b072:	4607      	mov	r7, r0
 800b074:	d802      	bhi.n	800b07c <_realloc_r+0x34>
 800b076:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b07a:	d812      	bhi.n	800b0a2 <_realloc_r+0x5a>
 800b07c:	4621      	mov	r1, r4
 800b07e:	4640      	mov	r0, r8
 800b080:	f7ff fd9a 	bl	800abb8 <_malloc_r>
 800b084:	4605      	mov	r5, r0
 800b086:	2800      	cmp	r0, #0
 800b088:	d0ed      	beq.n	800b066 <_realloc_r+0x1e>
 800b08a:	42bc      	cmp	r4, r7
 800b08c:	4622      	mov	r2, r4
 800b08e:	4631      	mov	r1, r6
 800b090:	bf28      	it	cs
 800b092:	463a      	movcs	r2, r7
 800b094:	f7ff f984 	bl	800a3a0 <memcpy>
 800b098:	4631      	mov	r1, r6
 800b09a:	4640      	mov	r0, r8
 800b09c:	f7ff fd24 	bl	800aae8 <_free_r>
 800b0a0:	e7e1      	b.n	800b066 <_realloc_r+0x1e>
 800b0a2:	4635      	mov	r5, r6
 800b0a4:	e7df      	b.n	800b066 <_realloc_r+0x1e>

0800b0a6 <__sfputc_r>:
 800b0a6:	6893      	ldr	r3, [r2, #8]
 800b0a8:	b410      	push	{r4}
 800b0aa:	3b01      	subs	r3, #1
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	6093      	str	r3, [r2, #8]
 800b0b0:	da07      	bge.n	800b0c2 <__sfputc_r+0x1c>
 800b0b2:	6994      	ldr	r4, [r2, #24]
 800b0b4:	42a3      	cmp	r3, r4
 800b0b6:	db01      	blt.n	800b0bc <__sfputc_r+0x16>
 800b0b8:	290a      	cmp	r1, #10
 800b0ba:	d102      	bne.n	800b0c2 <__sfputc_r+0x1c>
 800b0bc:	bc10      	pop	{r4}
 800b0be:	f000 b949 	b.w	800b354 <__swbuf_r>
 800b0c2:	6813      	ldr	r3, [r2, #0]
 800b0c4:	1c58      	adds	r0, r3, #1
 800b0c6:	6010      	str	r0, [r2, #0]
 800b0c8:	7019      	strb	r1, [r3, #0]
 800b0ca:	4608      	mov	r0, r1
 800b0cc:	bc10      	pop	{r4}
 800b0ce:	4770      	bx	lr

0800b0d0 <__sfputs_r>:
 800b0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0d2:	4606      	mov	r6, r0
 800b0d4:	460f      	mov	r7, r1
 800b0d6:	4614      	mov	r4, r2
 800b0d8:	18d5      	adds	r5, r2, r3
 800b0da:	42ac      	cmp	r4, r5
 800b0dc:	d101      	bne.n	800b0e2 <__sfputs_r+0x12>
 800b0de:	2000      	movs	r0, #0
 800b0e0:	e007      	b.n	800b0f2 <__sfputs_r+0x22>
 800b0e2:	463a      	mov	r2, r7
 800b0e4:	4630      	mov	r0, r6
 800b0e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0ea:	f7ff ffdc 	bl	800b0a6 <__sfputc_r>
 800b0ee:	1c43      	adds	r3, r0, #1
 800b0f0:	d1f3      	bne.n	800b0da <__sfputs_r+0xa>
 800b0f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b0f4 <_vfiprintf_r>:
 800b0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f8:	460d      	mov	r5, r1
 800b0fa:	4614      	mov	r4, r2
 800b0fc:	4698      	mov	r8, r3
 800b0fe:	4606      	mov	r6, r0
 800b100:	b09d      	sub	sp, #116	; 0x74
 800b102:	b118      	cbz	r0, 800b10c <_vfiprintf_r+0x18>
 800b104:	6983      	ldr	r3, [r0, #24]
 800b106:	b90b      	cbnz	r3, 800b10c <_vfiprintf_r+0x18>
 800b108:	f000 fb10 	bl	800b72c <__sinit>
 800b10c:	4b89      	ldr	r3, [pc, #548]	; (800b334 <_vfiprintf_r+0x240>)
 800b10e:	429d      	cmp	r5, r3
 800b110:	d11b      	bne.n	800b14a <_vfiprintf_r+0x56>
 800b112:	6875      	ldr	r5, [r6, #4]
 800b114:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b116:	07d9      	lsls	r1, r3, #31
 800b118:	d405      	bmi.n	800b126 <_vfiprintf_r+0x32>
 800b11a:	89ab      	ldrh	r3, [r5, #12]
 800b11c:	059a      	lsls	r2, r3, #22
 800b11e:	d402      	bmi.n	800b126 <_vfiprintf_r+0x32>
 800b120:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b122:	f000 fba1 	bl	800b868 <__retarget_lock_acquire_recursive>
 800b126:	89ab      	ldrh	r3, [r5, #12]
 800b128:	071b      	lsls	r3, r3, #28
 800b12a:	d501      	bpl.n	800b130 <_vfiprintf_r+0x3c>
 800b12c:	692b      	ldr	r3, [r5, #16]
 800b12e:	b9eb      	cbnz	r3, 800b16c <_vfiprintf_r+0x78>
 800b130:	4629      	mov	r1, r5
 800b132:	4630      	mov	r0, r6
 800b134:	f000 f96e 	bl	800b414 <__swsetup_r>
 800b138:	b1c0      	cbz	r0, 800b16c <_vfiprintf_r+0x78>
 800b13a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b13c:	07dc      	lsls	r4, r3, #31
 800b13e:	d50e      	bpl.n	800b15e <_vfiprintf_r+0x6a>
 800b140:	f04f 30ff 	mov.w	r0, #4294967295
 800b144:	b01d      	add	sp, #116	; 0x74
 800b146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b14a:	4b7b      	ldr	r3, [pc, #492]	; (800b338 <_vfiprintf_r+0x244>)
 800b14c:	429d      	cmp	r5, r3
 800b14e:	d101      	bne.n	800b154 <_vfiprintf_r+0x60>
 800b150:	68b5      	ldr	r5, [r6, #8]
 800b152:	e7df      	b.n	800b114 <_vfiprintf_r+0x20>
 800b154:	4b79      	ldr	r3, [pc, #484]	; (800b33c <_vfiprintf_r+0x248>)
 800b156:	429d      	cmp	r5, r3
 800b158:	bf08      	it	eq
 800b15a:	68f5      	ldreq	r5, [r6, #12]
 800b15c:	e7da      	b.n	800b114 <_vfiprintf_r+0x20>
 800b15e:	89ab      	ldrh	r3, [r5, #12]
 800b160:	0598      	lsls	r0, r3, #22
 800b162:	d4ed      	bmi.n	800b140 <_vfiprintf_r+0x4c>
 800b164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b166:	f000 fb80 	bl	800b86a <__retarget_lock_release_recursive>
 800b16a:	e7e9      	b.n	800b140 <_vfiprintf_r+0x4c>
 800b16c:	2300      	movs	r3, #0
 800b16e:	9309      	str	r3, [sp, #36]	; 0x24
 800b170:	2320      	movs	r3, #32
 800b172:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b176:	2330      	movs	r3, #48	; 0x30
 800b178:	f04f 0901 	mov.w	r9, #1
 800b17c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b180:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b340 <_vfiprintf_r+0x24c>
 800b184:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b188:	4623      	mov	r3, r4
 800b18a:	469a      	mov	sl, r3
 800b18c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b190:	b10a      	cbz	r2, 800b196 <_vfiprintf_r+0xa2>
 800b192:	2a25      	cmp	r2, #37	; 0x25
 800b194:	d1f9      	bne.n	800b18a <_vfiprintf_r+0x96>
 800b196:	ebba 0b04 	subs.w	fp, sl, r4
 800b19a:	d00b      	beq.n	800b1b4 <_vfiprintf_r+0xc0>
 800b19c:	465b      	mov	r3, fp
 800b19e:	4622      	mov	r2, r4
 800b1a0:	4629      	mov	r1, r5
 800b1a2:	4630      	mov	r0, r6
 800b1a4:	f7ff ff94 	bl	800b0d0 <__sfputs_r>
 800b1a8:	3001      	adds	r0, #1
 800b1aa:	f000 80aa 	beq.w	800b302 <_vfiprintf_r+0x20e>
 800b1ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1b0:	445a      	add	r2, fp
 800b1b2:	9209      	str	r2, [sp, #36]	; 0x24
 800b1b4:	f89a 3000 	ldrb.w	r3, [sl]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	f000 80a2 	beq.w	800b302 <_vfiprintf_r+0x20e>
 800b1be:	2300      	movs	r3, #0
 800b1c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b1c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1c8:	f10a 0a01 	add.w	sl, sl, #1
 800b1cc:	9304      	str	r3, [sp, #16]
 800b1ce:	9307      	str	r3, [sp, #28]
 800b1d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b1d4:	931a      	str	r3, [sp, #104]	; 0x68
 800b1d6:	4654      	mov	r4, sl
 800b1d8:	2205      	movs	r2, #5
 800b1da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1de:	4858      	ldr	r0, [pc, #352]	; (800b340 <_vfiprintf_r+0x24c>)
 800b1e0:	f7ff f8d0 	bl	800a384 <memchr>
 800b1e4:	9a04      	ldr	r2, [sp, #16]
 800b1e6:	b9d8      	cbnz	r0, 800b220 <_vfiprintf_r+0x12c>
 800b1e8:	06d1      	lsls	r1, r2, #27
 800b1ea:	bf44      	itt	mi
 800b1ec:	2320      	movmi	r3, #32
 800b1ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1f2:	0713      	lsls	r3, r2, #28
 800b1f4:	bf44      	itt	mi
 800b1f6:	232b      	movmi	r3, #43	; 0x2b
 800b1f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1fc:	f89a 3000 	ldrb.w	r3, [sl]
 800b200:	2b2a      	cmp	r3, #42	; 0x2a
 800b202:	d015      	beq.n	800b230 <_vfiprintf_r+0x13c>
 800b204:	4654      	mov	r4, sl
 800b206:	2000      	movs	r0, #0
 800b208:	f04f 0c0a 	mov.w	ip, #10
 800b20c:	9a07      	ldr	r2, [sp, #28]
 800b20e:	4621      	mov	r1, r4
 800b210:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b214:	3b30      	subs	r3, #48	; 0x30
 800b216:	2b09      	cmp	r3, #9
 800b218:	d94e      	bls.n	800b2b8 <_vfiprintf_r+0x1c4>
 800b21a:	b1b0      	cbz	r0, 800b24a <_vfiprintf_r+0x156>
 800b21c:	9207      	str	r2, [sp, #28]
 800b21e:	e014      	b.n	800b24a <_vfiprintf_r+0x156>
 800b220:	eba0 0308 	sub.w	r3, r0, r8
 800b224:	fa09 f303 	lsl.w	r3, r9, r3
 800b228:	4313      	orrs	r3, r2
 800b22a:	46a2      	mov	sl, r4
 800b22c:	9304      	str	r3, [sp, #16]
 800b22e:	e7d2      	b.n	800b1d6 <_vfiprintf_r+0xe2>
 800b230:	9b03      	ldr	r3, [sp, #12]
 800b232:	1d19      	adds	r1, r3, #4
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	9103      	str	r1, [sp, #12]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	bfbb      	ittet	lt
 800b23c:	425b      	neglt	r3, r3
 800b23e:	f042 0202 	orrlt.w	r2, r2, #2
 800b242:	9307      	strge	r3, [sp, #28]
 800b244:	9307      	strlt	r3, [sp, #28]
 800b246:	bfb8      	it	lt
 800b248:	9204      	strlt	r2, [sp, #16]
 800b24a:	7823      	ldrb	r3, [r4, #0]
 800b24c:	2b2e      	cmp	r3, #46	; 0x2e
 800b24e:	d10c      	bne.n	800b26a <_vfiprintf_r+0x176>
 800b250:	7863      	ldrb	r3, [r4, #1]
 800b252:	2b2a      	cmp	r3, #42	; 0x2a
 800b254:	d135      	bne.n	800b2c2 <_vfiprintf_r+0x1ce>
 800b256:	9b03      	ldr	r3, [sp, #12]
 800b258:	3402      	adds	r4, #2
 800b25a:	1d1a      	adds	r2, r3, #4
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	9203      	str	r2, [sp, #12]
 800b260:	2b00      	cmp	r3, #0
 800b262:	bfb8      	it	lt
 800b264:	f04f 33ff 	movlt.w	r3, #4294967295
 800b268:	9305      	str	r3, [sp, #20]
 800b26a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800b344 <_vfiprintf_r+0x250>
 800b26e:	2203      	movs	r2, #3
 800b270:	4650      	mov	r0, sl
 800b272:	7821      	ldrb	r1, [r4, #0]
 800b274:	f7ff f886 	bl	800a384 <memchr>
 800b278:	b140      	cbz	r0, 800b28c <_vfiprintf_r+0x198>
 800b27a:	2340      	movs	r3, #64	; 0x40
 800b27c:	eba0 000a 	sub.w	r0, r0, sl
 800b280:	fa03 f000 	lsl.w	r0, r3, r0
 800b284:	9b04      	ldr	r3, [sp, #16]
 800b286:	3401      	adds	r4, #1
 800b288:	4303      	orrs	r3, r0
 800b28a:	9304      	str	r3, [sp, #16]
 800b28c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b290:	2206      	movs	r2, #6
 800b292:	482d      	ldr	r0, [pc, #180]	; (800b348 <_vfiprintf_r+0x254>)
 800b294:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b298:	f7ff f874 	bl	800a384 <memchr>
 800b29c:	2800      	cmp	r0, #0
 800b29e:	d03f      	beq.n	800b320 <_vfiprintf_r+0x22c>
 800b2a0:	4b2a      	ldr	r3, [pc, #168]	; (800b34c <_vfiprintf_r+0x258>)
 800b2a2:	bb1b      	cbnz	r3, 800b2ec <_vfiprintf_r+0x1f8>
 800b2a4:	9b03      	ldr	r3, [sp, #12]
 800b2a6:	3307      	adds	r3, #7
 800b2a8:	f023 0307 	bic.w	r3, r3, #7
 800b2ac:	3308      	adds	r3, #8
 800b2ae:	9303      	str	r3, [sp, #12]
 800b2b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2b2:	443b      	add	r3, r7
 800b2b4:	9309      	str	r3, [sp, #36]	; 0x24
 800b2b6:	e767      	b.n	800b188 <_vfiprintf_r+0x94>
 800b2b8:	460c      	mov	r4, r1
 800b2ba:	2001      	movs	r0, #1
 800b2bc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2c0:	e7a5      	b.n	800b20e <_vfiprintf_r+0x11a>
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	f04f 0c0a 	mov.w	ip, #10
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	3401      	adds	r4, #1
 800b2cc:	9305      	str	r3, [sp, #20]
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2d4:	3a30      	subs	r2, #48	; 0x30
 800b2d6:	2a09      	cmp	r2, #9
 800b2d8:	d903      	bls.n	800b2e2 <_vfiprintf_r+0x1ee>
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d0c5      	beq.n	800b26a <_vfiprintf_r+0x176>
 800b2de:	9105      	str	r1, [sp, #20]
 800b2e0:	e7c3      	b.n	800b26a <_vfiprintf_r+0x176>
 800b2e2:	4604      	mov	r4, r0
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2ea:	e7f0      	b.n	800b2ce <_vfiprintf_r+0x1da>
 800b2ec:	ab03      	add	r3, sp, #12
 800b2ee:	9300      	str	r3, [sp, #0]
 800b2f0:	462a      	mov	r2, r5
 800b2f2:	4630      	mov	r0, r6
 800b2f4:	4b16      	ldr	r3, [pc, #88]	; (800b350 <_vfiprintf_r+0x25c>)
 800b2f6:	a904      	add	r1, sp, #16
 800b2f8:	f7fd fdc8 	bl	8008e8c <_printf_float>
 800b2fc:	4607      	mov	r7, r0
 800b2fe:	1c78      	adds	r0, r7, #1
 800b300:	d1d6      	bne.n	800b2b0 <_vfiprintf_r+0x1bc>
 800b302:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b304:	07d9      	lsls	r1, r3, #31
 800b306:	d405      	bmi.n	800b314 <_vfiprintf_r+0x220>
 800b308:	89ab      	ldrh	r3, [r5, #12]
 800b30a:	059a      	lsls	r2, r3, #22
 800b30c:	d402      	bmi.n	800b314 <_vfiprintf_r+0x220>
 800b30e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b310:	f000 faab 	bl	800b86a <__retarget_lock_release_recursive>
 800b314:	89ab      	ldrh	r3, [r5, #12]
 800b316:	065b      	lsls	r3, r3, #25
 800b318:	f53f af12 	bmi.w	800b140 <_vfiprintf_r+0x4c>
 800b31c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b31e:	e711      	b.n	800b144 <_vfiprintf_r+0x50>
 800b320:	ab03      	add	r3, sp, #12
 800b322:	9300      	str	r3, [sp, #0]
 800b324:	462a      	mov	r2, r5
 800b326:	4630      	mov	r0, r6
 800b328:	4b09      	ldr	r3, [pc, #36]	; (800b350 <_vfiprintf_r+0x25c>)
 800b32a:	a904      	add	r1, sp, #16
 800b32c:	f7fe f84a 	bl	80093c4 <_printf_i>
 800b330:	e7e4      	b.n	800b2fc <_vfiprintf_r+0x208>
 800b332:	bf00      	nop
 800b334:	0800d2dc 	.word	0x0800d2dc
 800b338:	0800d2fc 	.word	0x0800d2fc
 800b33c:	0800d2bc 	.word	0x0800d2bc
 800b340:	0800d164 	.word	0x0800d164
 800b344:	0800d16a 	.word	0x0800d16a
 800b348:	0800d16e 	.word	0x0800d16e
 800b34c:	08008e8d 	.word	0x08008e8d
 800b350:	0800b0d1 	.word	0x0800b0d1

0800b354 <__swbuf_r>:
 800b354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b356:	460e      	mov	r6, r1
 800b358:	4614      	mov	r4, r2
 800b35a:	4605      	mov	r5, r0
 800b35c:	b118      	cbz	r0, 800b366 <__swbuf_r+0x12>
 800b35e:	6983      	ldr	r3, [r0, #24]
 800b360:	b90b      	cbnz	r3, 800b366 <__swbuf_r+0x12>
 800b362:	f000 f9e3 	bl	800b72c <__sinit>
 800b366:	4b21      	ldr	r3, [pc, #132]	; (800b3ec <__swbuf_r+0x98>)
 800b368:	429c      	cmp	r4, r3
 800b36a:	d12b      	bne.n	800b3c4 <__swbuf_r+0x70>
 800b36c:	686c      	ldr	r4, [r5, #4]
 800b36e:	69a3      	ldr	r3, [r4, #24]
 800b370:	60a3      	str	r3, [r4, #8]
 800b372:	89a3      	ldrh	r3, [r4, #12]
 800b374:	071a      	lsls	r2, r3, #28
 800b376:	d52f      	bpl.n	800b3d8 <__swbuf_r+0x84>
 800b378:	6923      	ldr	r3, [r4, #16]
 800b37a:	b36b      	cbz	r3, 800b3d8 <__swbuf_r+0x84>
 800b37c:	6923      	ldr	r3, [r4, #16]
 800b37e:	6820      	ldr	r0, [r4, #0]
 800b380:	b2f6      	uxtb	r6, r6
 800b382:	1ac0      	subs	r0, r0, r3
 800b384:	6963      	ldr	r3, [r4, #20]
 800b386:	4637      	mov	r7, r6
 800b388:	4283      	cmp	r3, r0
 800b38a:	dc04      	bgt.n	800b396 <__swbuf_r+0x42>
 800b38c:	4621      	mov	r1, r4
 800b38e:	4628      	mov	r0, r5
 800b390:	f000 f938 	bl	800b604 <_fflush_r>
 800b394:	bb30      	cbnz	r0, 800b3e4 <__swbuf_r+0x90>
 800b396:	68a3      	ldr	r3, [r4, #8]
 800b398:	3001      	adds	r0, #1
 800b39a:	3b01      	subs	r3, #1
 800b39c:	60a3      	str	r3, [r4, #8]
 800b39e:	6823      	ldr	r3, [r4, #0]
 800b3a0:	1c5a      	adds	r2, r3, #1
 800b3a2:	6022      	str	r2, [r4, #0]
 800b3a4:	701e      	strb	r6, [r3, #0]
 800b3a6:	6963      	ldr	r3, [r4, #20]
 800b3a8:	4283      	cmp	r3, r0
 800b3aa:	d004      	beq.n	800b3b6 <__swbuf_r+0x62>
 800b3ac:	89a3      	ldrh	r3, [r4, #12]
 800b3ae:	07db      	lsls	r3, r3, #31
 800b3b0:	d506      	bpl.n	800b3c0 <__swbuf_r+0x6c>
 800b3b2:	2e0a      	cmp	r6, #10
 800b3b4:	d104      	bne.n	800b3c0 <__swbuf_r+0x6c>
 800b3b6:	4621      	mov	r1, r4
 800b3b8:	4628      	mov	r0, r5
 800b3ba:	f000 f923 	bl	800b604 <_fflush_r>
 800b3be:	b988      	cbnz	r0, 800b3e4 <__swbuf_r+0x90>
 800b3c0:	4638      	mov	r0, r7
 800b3c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3c4:	4b0a      	ldr	r3, [pc, #40]	; (800b3f0 <__swbuf_r+0x9c>)
 800b3c6:	429c      	cmp	r4, r3
 800b3c8:	d101      	bne.n	800b3ce <__swbuf_r+0x7a>
 800b3ca:	68ac      	ldr	r4, [r5, #8]
 800b3cc:	e7cf      	b.n	800b36e <__swbuf_r+0x1a>
 800b3ce:	4b09      	ldr	r3, [pc, #36]	; (800b3f4 <__swbuf_r+0xa0>)
 800b3d0:	429c      	cmp	r4, r3
 800b3d2:	bf08      	it	eq
 800b3d4:	68ec      	ldreq	r4, [r5, #12]
 800b3d6:	e7ca      	b.n	800b36e <__swbuf_r+0x1a>
 800b3d8:	4621      	mov	r1, r4
 800b3da:	4628      	mov	r0, r5
 800b3dc:	f000 f81a 	bl	800b414 <__swsetup_r>
 800b3e0:	2800      	cmp	r0, #0
 800b3e2:	d0cb      	beq.n	800b37c <__swbuf_r+0x28>
 800b3e4:	f04f 37ff 	mov.w	r7, #4294967295
 800b3e8:	e7ea      	b.n	800b3c0 <__swbuf_r+0x6c>
 800b3ea:	bf00      	nop
 800b3ec:	0800d2dc 	.word	0x0800d2dc
 800b3f0:	0800d2fc 	.word	0x0800d2fc
 800b3f4:	0800d2bc 	.word	0x0800d2bc

0800b3f8 <__ascii_wctomb>:
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	4608      	mov	r0, r1
 800b3fc:	b141      	cbz	r1, 800b410 <__ascii_wctomb+0x18>
 800b3fe:	2aff      	cmp	r2, #255	; 0xff
 800b400:	d904      	bls.n	800b40c <__ascii_wctomb+0x14>
 800b402:	228a      	movs	r2, #138	; 0x8a
 800b404:	f04f 30ff 	mov.w	r0, #4294967295
 800b408:	601a      	str	r2, [r3, #0]
 800b40a:	4770      	bx	lr
 800b40c:	2001      	movs	r0, #1
 800b40e:	700a      	strb	r2, [r1, #0]
 800b410:	4770      	bx	lr
	...

0800b414 <__swsetup_r>:
 800b414:	4b32      	ldr	r3, [pc, #200]	; (800b4e0 <__swsetup_r+0xcc>)
 800b416:	b570      	push	{r4, r5, r6, lr}
 800b418:	681d      	ldr	r5, [r3, #0]
 800b41a:	4606      	mov	r6, r0
 800b41c:	460c      	mov	r4, r1
 800b41e:	b125      	cbz	r5, 800b42a <__swsetup_r+0x16>
 800b420:	69ab      	ldr	r3, [r5, #24]
 800b422:	b913      	cbnz	r3, 800b42a <__swsetup_r+0x16>
 800b424:	4628      	mov	r0, r5
 800b426:	f000 f981 	bl	800b72c <__sinit>
 800b42a:	4b2e      	ldr	r3, [pc, #184]	; (800b4e4 <__swsetup_r+0xd0>)
 800b42c:	429c      	cmp	r4, r3
 800b42e:	d10f      	bne.n	800b450 <__swsetup_r+0x3c>
 800b430:	686c      	ldr	r4, [r5, #4]
 800b432:	89a3      	ldrh	r3, [r4, #12]
 800b434:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b438:	0719      	lsls	r1, r3, #28
 800b43a:	d42c      	bmi.n	800b496 <__swsetup_r+0x82>
 800b43c:	06dd      	lsls	r5, r3, #27
 800b43e:	d411      	bmi.n	800b464 <__swsetup_r+0x50>
 800b440:	2309      	movs	r3, #9
 800b442:	6033      	str	r3, [r6, #0]
 800b444:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b448:	f04f 30ff 	mov.w	r0, #4294967295
 800b44c:	81a3      	strh	r3, [r4, #12]
 800b44e:	e03e      	b.n	800b4ce <__swsetup_r+0xba>
 800b450:	4b25      	ldr	r3, [pc, #148]	; (800b4e8 <__swsetup_r+0xd4>)
 800b452:	429c      	cmp	r4, r3
 800b454:	d101      	bne.n	800b45a <__swsetup_r+0x46>
 800b456:	68ac      	ldr	r4, [r5, #8]
 800b458:	e7eb      	b.n	800b432 <__swsetup_r+0x1e>
 800b45a:	4b24      	ldr	r3, [pc, #144]	; (800b4ec <__swsetup_r+0xd8>)
 800b45c:	429c      	cmp	r4, r3
 800b45e:	bf08      	it	eq
 800b460:	68ec      	ldreq	r4, [r5, #12]
 800b462:	e7e6      	b.n	800b432 <__swsetup_r+0x1e>
 800b464:	0758      	lsls	r0, r3, #29
 800b466:	d512      	bpl.n	800b48e <__swsetup_r+0x7a>
 800b468:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b46a:	b141      	cbz	r1, 800b47e <__swsetup_r+0x6a>
 800b46c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b470:	4299      	cmp	r1, r3
 800b472:	d002      	beq.n	800b47a <__swsetup_r+0x66>
 800b474:	4630      	mov	r0, r6
 800b476:	f7ff fb37 	bl	800aae8 <_free_r>
 800b47a:	2300      	movs	r3, #0
 800b47c:	6363      	str	r3, [r4, #52]	; 0x34
 800b47e:	89a3      	ldrh	r3, [r4, #12]
 800b480:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b484:	81a3      	strh	r3, [r4, #12]
 800b486:	2300      	movs	r3, #0
 800b488:	6063      	str	r3, [r4, #4]
 800b48a:	6923      	ldr	r3, [r4, #16]
 800b48c:	6023      	str	r3, [r4, #0]
 800b48e:	89a3      	ldrh	r3, [r4, #12]
 800b490:	f043 0308 	orr.w	r3, r3, #8
 800b494:	81a3      	strh	r3, [r4, #12]
 800b496:	6923      	ldr	r3, [r4, #16]
 800b498:	b94b      	cbnz	r3, 800b4ae <__swsetup_r+0x9a>
 800b49a:	89a3      	ldrh	r3, [r4, #12]
 800b49c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b4a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4a4:	d003      	beq.n	800b4ae <__swsetup_r+0x9a>
 800b4a6:	4621      	mov	r1, r4
 800b4a8:	4630      	mov	r0, r6
 800b4aa:	f000 fa05 	bl	800b8b8 <__smakebuf_r>
 800b4ae:	89a0      	ldrh	r0, [r4, #12]
 800b4b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4b4:	f010 0301 	ands.w	r3, r0, #1
 800b4b8:	d00a      	beq.n	800b4d0 <__swsetup_r+0xbc>
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	60a3      	str	r3, [r4, #8]
 800b4be:	6963      	ldr	r3, [r4, #20]
 800b4c0:	425b      	negs	r3, r3
 800b4c2:	61a3      	str	r3, [r4, #24]
 800b4c4:	6923      	ldr	r3, [r4, #16]
 800b4c6:	b943      	cbnz	r3, 800b4da <__swsetup_r+0xc6>
 800b4c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b4cc:	d1ba      	bne.n	800b444 <__swsetup_r+0x30>
 800b4ce:	bd70      	pop	{r4, r5, r6, pc}
 800b4d0:	0781      	lsls	r1, r0, #30
 800b4d2:	bf58      	it	pl
 800b4d4:	6963      	ldrpl	r3, [r4, #20]
 800b4d6:	60a3      	str	r3, [r4, #8]
 800b4d8:	e7f4      	b.n	800b4c4 <__swsetup_r+0xb0>
 800b4da:	2000      	movs	r0, #0
 800b4dc:	e7f7      	b.n	800b4ce <__swsetup_r+0xba>
 800b4de:	bf00      	nop
 800b4e0:	20000024 	.word	0x20000024
 800b4e4:	0800d2dc 	.word	0x0800d2dc
 800b4e8:	0800d2fc 	.word	0x0800d2fc
 800b4ec:	0800d2bc 	.word	0x0800d2bc

0800b4f0 <abort>:
 800b4f0:	2006      	movs	r0, #6
 800b4f2:	b508      	push	{r3, lr}
 800b4f4:	f000 fa50 	bl	800b998 <raise>
 800b4f8:	2001      	movs	r0, #1
 800b4fa:	f7f7 f832 	bl	8002562 <_exit>
	...

0800b500 <__sflush_r>:
 800b500:	898a      	ldrh	r2, [r1, #12]
 800b502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b504:	4605      	mov	r5, r0
 800b506:	0710      	lsls	r0, r2, #28
 800b508:	460c      	mov	r4, r1
 800b50a:	d457      	bmi.n	800b5bc <__sflush_r+0xbc>
 800b50c:	684b      	ldr	r3, [r1, #4]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	dc04      	bgt.n	800b51c <__sflush_r+0x1c>
 800b512:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b514:	2b00      	cmp	r3, #0
 800b516:	dc01      	bgt.n	800b51c <__sflush_r+0x1c>
 800b518:	2000      	movs	r0, #0
 800b51a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b51c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b51e:	2e00      	cmp	r6, #0
 800b520:	d0fa      	beq.n	800b518 <__sflush_r+0x18>
 800b522:	2300      	movs	r3, #0
 800b524:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b528:	682f      	ldr	r7, [r5, #0]
 800b52a:	602b      	str	r3, [r5, #0]
 800b52c:	d032      	beq.n	800b594 <__sflush_r+0x94>
 800b52e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b530:	89a3      	ldrh	r3, [r4, #12]
 800b532:	075a      	lsls	r2, r3, #29
 800b534:	d505      	bpl.n	800b542 <__sflush_r+0x42>
 800b536:	6863      	ldr	r3, [r4, #4]
 800b538:	1ac0      	subs	r0, r0, r3
 800b53a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b53c:	b10b      	cbz	r3, 800b542 <__sflush_r+0x42>
 800b53e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b540:	1ac0      	subs	r0, r0, r3
 800b542:	2300      	movs	r3, #0
 800b544:	4602      	mov	r2, r0
 800b546:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b548:	4628      	mov	r0, r5
 800b54a:	6a21      	ldr	r1, [r4, #32]
 800b54c:	47b0      	blx	r6
 800b54e:	1c43      	adds	r3, r0, #1
 800b550:	89a3      	ldrh	r3, [r4, #12]
 800b552:	d106      	bne.n	800b562 <__sflush_r+0x62>
 800b554:	6829      	ldr	r1, [r5, #0]
 800b556:	291d      	cmp	r1, #29
 800b558:	d82c      	bhi.n	800b5b4 <__sflush_r+0xb4>
 800b55a:	4a29      	ldr	r2, [pc, #164]	; (800b600 <__sflush_r+0x100>)
 800b55c:	40ca      	lsrs	r2, r1
 800b55e:	07d6      	lsls	r6, r2, #31
 800b560:	d528      	bpl.n	800b5b4 <__sflush_r+0xb4>
 800b562:	2200      	movs	r2, #0
 800b564:	6062      	str	r2, [r4, #4]
 800b566:	6922      	ldr	r2, [r4, #16]
 800b568:	04d9      	lsls	r1, r3, #19
 800b56a:	6022      	str	r2, [r4, #0]
 800b56c:	d504      	bpl.n	800b578 <__sflush_r+0x78>
 800b56e:	1c42      	adds	r2, r0, #1
 800b570:	d101      	bne.n	800b576 <__sflush_r+0x76>
 800b572:	682b      	ldr	r3, [r5, #0]
 800b574:	b903      	cbnz	r3, 800b578 <__sflush_r+0x78>
 800b576:	6560      	str	r0, [r4, #84]	; 0x54
 800b578:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b57a:	602f      	str	r7, [r5, #0]
 800b57c:	2900      	cmp	r1, #0
 800b57e:	d0cb      	beq.n	800b518 <__sflush_r+0x18>
 800b580:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b584:	4299      	cmp	r1, r3
 800b586:	d002      	beq.n	800b58e <__sflush_r+0x8e>
 800b588:	4628      	mov	r0, r5
 800b58a:	f7ff faad 	bl	800aae8 <_free_r>
 800b58e:	2000      	movs	r0, #0
 800b590:	6360      	str	r0, [r4, #52]	; 0x34
 800b592:	e7c2      	b.n	800b51a <__sflush_r+0x1a>
 800b594:	6a21      	ldr	r1, [r4, #32]
 800b596:	2301      	movs	r3, #1
 800b598:	4628      	mov	r0, r5
 800b59a:	47b0      	blx	r6
 800b59c:	1c41      	adds	r1, r0, #1
 800b59e:	d1c7      	bne.n	800b530 <__sflush_r+0x30>
 800b5a0:	682b      	ldr	r3, [r5, #0]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d0c4      	beq.n	800b530 <__sflush_r+0x30>
 800b5a6:	2b1d      	cmp	r3, #29
 800b5a8:	d001      	beq.n	800b5ae <__sflush_r+0xae>
 800b5aa:	2b16      	cmp	r3, #22
 800b5ac:	d101      	bne.n	800b5b2 <__sflush_r+0xb2>
 800b5ae:	602f      	str	r7, [r5, #0]
 800b5b0:	e7b2      	b.n	800b518 <__sflush_r+0x18>
 800b5b2:	89a3      	ldrh	r3, [r4, #12]
 800b5b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5b8:	81a3      	strh	r3, [r4, #12]
 800b5ba:	e7ae      	b.n	800b51a <__sflush_r+0x1a>
 800b5bc:	690f      	ldr	r7, [r1, #16]
 800b5be:	2f00      	cmp	r7, #0
 800b5c0:	d0aa      	beq.n	800b518 <__sflush_r+0x18>
 800b5c2:	0793      	lsls	r3, r2, #30
 800b5c4:	bf18      	it	ne
 800b5c6:	2300      	movne	r3, #0
 800b5c8:	680e      	ldr	r6, [r1, #0]
 800b5ca:	bf08      	it	eq
 800b5cc:	694b      	ldreq	r3, [r1, #20]
 800b5ce:	1bf6      	subs	r6, r6, r7
 800b5d0:	600f      	str	r7, [r1, #0]
 800b5d2:	608b      	str	r3, [r1, #8]
 800b5d4:	2e00      	cmp	r6, #0
 800b5d6:	dd9f      	ble.n	800b518 <__sflush_r+0x18>
 800b5d8:	4633      	mov	r3, r6
 800b5da:	463a      	mov	r2, r7
 800b5dc:	4628      	mov	r0, r5
 800b5de:	6a21      	ldr	r1, [r4, #32]
 800b5e0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b5e4:	47e0      	blx	ip
 800b5e6:	2800      	cmp	r0, #0
 800b5e8:	dc06      	bgt.n	800b5f8 <__sflush_r+0xf8>
 800b5ea:	89a3      	ldrh	r3, [r4, #12]
 800b5ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b5f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5f4:	81a3      	strh	r3, [r4, #12]
 800b5f6:	e790      	b.n	800b51a <__sflush_r+0x1a>
 800b5f8:	4407      	add	r7, r0
 800b5fa:	1a36      	subs	r6, r6, r0
 800b5fc:	e7ea      	b.n	800b5d4 <__sflush_r+0xd4>
 800b5fe:	bf00      	nop
 800b600:	20400001 	.word	0x20400001

0800b604 <_fflush_r>:
 800b604:	b538      	push	{r3, r4, r5, lr}
 800b606:	690b      	ldr	r3, [r1, #16]
 800b608:	4605      	mov	r5, r0
 800b60a:	460c      	mov	r4, r1
 800b60c:	b913      	cbnz	r3, 800b614 <_fflush_r+0x10>
 800b60e:	2500      	movs	r5, #0
 800b610:	4628      	mov	r0, r5
 800b612:	bd38      	pop	{r3, r4, r5, pc}
 800b614:	b118      	cbz	r0, 800b61e <_fflush_r+0x1a>
 800b616:	6983      	ldr	r3, [r0, #24]
 800b618:	b90b      	cbnz	r3, 800b61e <_fflush_r+0x1a>
 800b61a:	f000 f887 	bl	800b72c <__sinit>
 800b61e:	4b14      	ldr	r3, [pc, #80]	; (800b670 <_fflush_r+0x6c>)
 800b620:	429c      	cmp	r4, r3
 800b622:	d11b      	bne.n	800b65c <_fflush_r+0x58>
 800b624:	686c      	ldr	r4, [r5, #4]
 800b626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d0ef      	beq.n	800b60e <_fflush_r+0xa>
 800b62e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b630:	07d0      	lsls	r0, r2, #31
 800b632:	d404      	bmi.n	800b63e <_fflush_r+0x3a>
 800b634:	0599      	lsls	r1, r3, #22
 800b636:	d402      	bmi.n	800b63e <_fflush_r+0x3a>
 800b638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b63a:	f000 f915 	bl	800b868 <__retarget_lock_acquire_recursive>
 800b63e:	4628      	mov	r0, r5
 800b640:	4621      	mov	r1, r4
 800b642:	f7ff ff5d 	bl	800b500 <__sflush_r>
 800b646:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b648:	4605      	mov	r5, r0
 800b64a:	07da      	lsls	r2, r3, #31
 800b64c:	d4e0      	bmi.n	800b610 <_fflush_r+0xc>
 800b64e:	89a3      	ldrh	r3, [r4, #12]
 800b650:	059b      	lsls	r3, r3, #22
 800b652:	d4dd      	bmi.n	800b610 <_fflush_r+0xc>
 800b654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b656:	f000 f908 	bl	800b86a <__retarget_lock_release_recursive>
 800b65a:	e7d9      	b.n	800b610 <_fflush_r+0xc>
 800b65c:	4b05      	ldr	r3, [pc, #20]	; (800b674 <_fflush_r+0x70>)
 800b65e:	429c      	cmp	r4, r3
 800b660:	d101      	bne.n	800b666 <_fflush_r+0x62>
 800b662:	68ac      	ldr	r4, [r5, #8]
 800b664:	e7df      	b.n	800b626 <_fflush_r+0x22>
 800b666:	4b04      	ldr	r3, [pc, #16]	; (800b678 <_fflush_r+0x74>)
 800b668:	429c      	cmp	r4, r3
 800b66a:	bf08      	it	eq
 800b66c:	68ec      	ldreq	r4, [r5, #12]
 800b66e:	e7da      	b.n	800b626 <_fflush_r+0x22>
 800b670:	0800d2dc 	.word	0x0800d2dc
 800b674:	0800d2fc 	.word	0x0800d2fc
 800b678:	0800d2bc 	.word	0x0800d2bc

0800b67c <std>:
 800b67c:	2300      	movs	r3, #0
 800b67e:	b510      	push	{r4, lr}
 800b680:	4604      	mov	r4, r0
 800b682:	e9c0 3300 	strd	r3, r3, [r0]
 800b686:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b68a:	6083      	str	r3, [r0, #8]
 800b68c:	8181      	strh	r1, [r0, #12]
 800b68e:	6643      	str	r3, [r0, #100]	; 0x64
 800b690:	81c2      	strh	r2, [r0, #14]
 800b692:	6183      	str	r3, [r0, #24]
 800b694:	4619      	mov	r1, r3
 800b696:	2208      	movs	r2, #8
 800b698:	305c      	adds	r0, #92	; 0x5c
 800b69a:	f7fd fb51 	bl	8008d40 <memset>
 800b69e:	4b05      	ldr	r3, [pc, #20]	; (800b6b4 <std+0x38>)
 800b6a0:	6224      	str	r4, [r4, #32]
 800b6a2:	6263      	str	r3, [r4, #36]	; 0x24
 800b6a4:	4b04      	ldr	r3, [pc, #16]	; (800b6b8 <std+0x3c>)
 800b6a6:	62a3      	str	r3, [r4, #40]	; 0x28
 800b6a8:	4b04      	ldr	r3, [pc, #16]	; (800b6bc <std+0x40>)
 800b6aa:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b6ac:	4b04      	ldr	r3, [pc, #16]	; (800b6c0 <std+0x44>)
 800b6ae:	6323      	str	r3, [r4, #48]	; 0x30
 800b6b0:	bd10      	pop	{r4, pc}
 800b6b2:	bf00      	nop
 800b6b4:	0800b9d1 	.word	0x0800b9d1
 800b6b8:	0800b9f3 	.word	0x0800b9f3
 800b6bc:	0800ba2b 	.word	0x0800ba2b
 800b6c0:	0800ba4f 	.word	0x0800ba4f

0800b6c4 <_cleanup_r>:
 800b6c4:	4901      	ldr	r1, [pc, #4]	; (800b6cc <_cleanup_r+0x8>)
 800b6c6:	f000 b8af 	b.w	800b828 <_fwalk_reent>
 800b6ca:	bf00      	nop
 800b6cc:	0800b605 	.word	0x0800b605

0800b6d0 <__sfmoreglue>:
 800b6d0:	2268      	movs	r2, #104	; 0x68
 800b6d2:	b570      	push	{r4, r5, r6, lr}
 800b6d4:	1e4d      	subs	r5, r1, #1
 800b6d6:	4355      	muls	r5, r2
 800b6d8:	460e      	mov	r6, r1
 800b6da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b6de:	f7ff fa6b 	bl	800abb8 <_malloc_r>
 800b6e2:	4604      	mov	r4, r0
 800b6e4:	b140      	cbz	r0, 800b6f8 <__sfmoreglue+0x28>
 800b6e6:	2100      	movs	r1, #0
 800b6e8:	e9c0 1600 	strd	r1, r6, [r0]
 800b6ec:	300c      	adds	r0, #12
 800b6ee:	60a0      	str	r0, [r4, #8]
 800b6f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b6f4:	f7fd fb24 	bl	8008d40 <memset>
 800b6f8:	4620      	mov	r0, r4
 800b6fa:	bd70      	pop	{r4, r5, r6, pc}

0800b6fc <__sfp_lock_acquire>:
 800b6fc:	4801      	ldr	r0, [pc, #4]	; (800b704 <__sfp_lock_acquire+0x8>)
 800b6fe:	f000 b8b3 	b.w	800b868 <__retarget_lock_acquire_recursive>
 800b702:	bf00      	nop
 800b704:	20002631 	.word	0x20002631

0800b708 <__sfp_lock_release>:
 800b708:	4801      	ldr	r0, [pc, #4]	; (800b710 <__sfp_lock_release+0x8>)
 800b70a:	f000 b8ae 	b.w	800b86a <__retarget_lock_release_recursive>
 800b70e:	bf00      	nop
 800b710:	20002631 	.word	0x20002631

0800b714 <__sinit_lock_acquire>:
 800b714:	4801      	ldr	r0, [pc, #4]	; (800b71c <__sinit_lock_acquire+0x8>)
 800b716:	f000 b8a7 	b.w	800b868 <__retarget_lock_acquire_recursive>
 800b71a:	bf00      	nop
 800b71c:	20002632 	.word	0x20002632

0800b720 <__sinit_lock_release>:
 800b720:	4801      	ldr	r0, [pc, #4]	; (800b728 <__sinit_lock_release+0x8>)
 800b722:	f000 b8a2 	b.w	800b86a <__retarget_lock_release_recursive>
 800b726:	bf00      	nop
 800b728:	20002632 	.word	0x20002632

0800b72c <__sinit>:
 800b72c:	b510      	push	{r4, lr}
 800b72e:	4604      	mov	r4, r0
 800b730:	f7ff fff0 	bl	800b714 <__sinit_lock_acquire>
 800b734:	69a3      	ldr	r3, [r4, #24]
 800b736:	b11b      	cbz	r3, 800b740 <__sinit+0x14>
 800b738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b73c:	f7ff bff0 	b.w	800b720 <__sinit_lock_release>
 800b740:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b744:	6523      	str	r3, [r4, #80]	; 0x50
 800b746:	4b13      	ldr	r3, [pc, #76]	; (800b794 <__sinit+0x68>)
 800b748:	4a13      	ldr	r2, [pc, #76]	; (800b798 <__sinit+0x6c>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b74e:	42a3      	cmp	r3, r4
 800b750:	bf08      	it	eq
 800b752:	2301      	moveq	r3, #1
 800b754:	4620      	mov	r0, r4
 800b756:	bf08      	it	eq
 800b758:	61a3      	streq	r3, [r4, #24]
 800b75a:	f000 f81f 	bl	800b79c <__sfp>
 800b75e:	6060      	str	r0, [r4, #4]
 800b760:	4620      	mov	r0, r4
 800b762:	f000 f81b 	bl	800b79c <__sfp>
 800b766:	60a0      	str	r0, [r4, #8]
 800b768:	4620      	mov	r0, r4
 800b76a:	f000 f817 	bl	800b79c <__sfp>
 800b76e:	2200      	movs	r2, #0
 800b770:	2104      	movs	r1, #4
 800b772:	60e0      	str	r0, [r4, #12]
 800b774:	6860      	ldr	r0, [r4, #4]
 800b776:	f7ff ff81 	bl	800b67c <std>
 800b77a:	2201      	movs	r2, #1
 800b77c:	2109      	movs	r1, #9
 800b77e:	68a0      	ldr	r0, [r4, #8]
 800b780:	f7ff ff7c 	bl	800b67c <std>
 800b784:	2202      	movs	r2, #2
 800b786:	2112      	movs	r1, #18
 800b788:	68e0      	ldr	r0, [r4, #12]
 800b78a:	f7ff ff77 	bl	800b67c <std>
 800b78e:	2301      	movs	r3, #1
 800b790:	61a3      	str	r3, [r4, #24]
 800b792:	e7d1      	b.n	800b738 <__sinit+0xc>
 800b794:	0800cf44 	.word	0x0800cf44
 800b798:	0800b6c5 	.word	0x0800b6c5

0800b79c <__sfp>:
 800b79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b79e:	4607      	mov	r7, r0
 800b7a0:	f7ff ffac 	bl	800b6fc <__sfp_lock_acquire>
 800b7a4:	4b1e      	ldr	r3, [pc, #120]	; (800b820 <__sfp+0x84>)
 800b7a6:	681e      	ldr	r6, [r3, #0]
 800b7a8:	69b3      	ldr	r3, [r6, #24]
 800b7aa:	b913      	cbnz	r3, 800b7b2 <__sfp+0x16>
 800b7ac:	4630      	mov	r0, r6
 800b7ae:	f7ff ffbd 	bl	800b72c <__sinit>
 800b7b2:	3648      	adds	r6, #72	; 0x48
 800b7b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b7b8:	3b01      	subs	r3, #1
 800b7ba:	d503      	bpl.n	800b7c4 <__sfp+0x28>
 800b7bc:	6833      	ldr	r3, [r6, #0]
 800b7be:	b30b      	cbz	r3, 800b804 <__sfp+0x68>
 800b7c0:	6836      	ldr	r6, [r6, #0]
 800b7c2:	e7f7      	b.n	800b7b4 <__sfp+0x18>
 800b7c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b7c8:	b9d5      	cbnz	r5, 800b800 <__sfp+0x64>
 800b7ca:	4b16      	ldr	r3, [pc, #88]	; (800b824 <__sfp+0x88>)
 800b7cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b7d0:	60e3      	str	r3, [r4, #12]
 800b7d2:	6665      	str	r5, [r4, #100]	; 0x64
 800b7d4:	f000 f847 	bl	800b866 <__retarget_lock_init_recursive>
 800b7d8:	f7ff ff96 	bl	800b708 <__sfp_lock_release>
 800b7dc:	2208      	movs	r2, #8
 800b7de:	4629      	mov	r1, r5
 800b7e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b7e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b7e8:	6025      	str	r5, [r4, #0]
 800b7ea:	61a5      	str	r5, [r4, #24]
 800b7ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b7f0:	f7fd faa6 	bl	8008d40 <memset>
 800b7f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b7f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b7fc:	4620      	mov	r0, r4
 800b7fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b800:	3468      	adds	r4, #104	; 0x68
 800b802:	e7d9      	b.n	800b7b8 <__sfp+0x1c>
 800b804:	2104      	movs	r1, #4
 800b806:	4638      	mov	r0, r7
 800b808:	f7ff ff62 	bl	800b6d0 <__sfmoreglue>
 800b80c:	4604      	mov	r4, r0
 800b80e:	6030      	str	r0, [r6, #0]
 800b810:	2800      	cmp	r0, #0
 800b812:	d1d5      	bne.n	800b7c0 <__sfp+0x24>
 800b814:	f7ff ff78 	bl	800b708 <__sfp_lock_release>
 800b818:	230c      	movs	r3, #12
 800b81a:	603b      	str	r3, [r7, #0]
 800b81c:	e7ee      	b.n	800b7fc <__sfp+0x60>
 800b81e:	bf00      	nop
 800b820:	0800cf44 	.word	0x0800cf44
 800b824:	ffff0001 	.word	0xffff0001

0800b828 <_fwalk_reent>:
 800b828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b82c:	4606      	mov	r6, r0
 800b82e:	4688      	mov	r8, r1
 800b830:	2700      	movs	r7, #0
 800b832:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b836:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b83a:	f1b9 0901 	subs.w	r9, r9, #1
 800b83e:	d505      	bpl.n	800b84c <_fwalk_reent+0x24>
 800b840:	6824      	ldr	r4, [r4, #0]
 800b842:	2c00      	cmp	r4, #0
 800b844:	d1f7      	bne.n	800b836 <_fwalk_reent+0xe>
 800b846:	4638      	mov	r0, r7
 800b848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b84c:	89ab      	ldrh	r3, [r5, #12]
 800b84e:	2b01      	cmp	r3, #1
 800b850:	d907      	bls.n	800b862 <_fwalk_reent+0x3a>
 800b852:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b856:	3301      	adds	r3, #1
 800b858:	d003      	beq.n	800b862 <_fwalk_reent+0x3a>
 800b85a:	4629      	mov	r1, r5
 800b85c:	4630      	mov	r0, r6
 800b85e:	47c0      	blx	r8
 800b860:	4307      	orrs	r7, r0
 800b862:	3568      	adds	r5, #104	; 0x68
 800b864:	e7e9      	b.n	800b83a <_fwalk_reent+0x12>

0800b866 <__retarget_lock_init_recursive>:
 800b866:	4770      	bx	lr

0800b868 <__retarget_lock_acquire_recursive>:
 800b868:	4770      	bx	lr

0800b86a <__retarget_lock_release_recursive>:
 800b86a:	4770      	bx	lr

0800b86c <__swhatbuf_r>:
 800b86c:	b570      	push	{r4, r5, r6, lr}
 800b86e:	460e      	mov	r6, r1
 800b870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b874:	4614      	mov	r4, r2
 800b876:	2900      	cmp	r1, #0
 800b878:	461d      	mov	r5, r3
 800b87a:	b096      	sub	sp, #88	; 0x58
 800b87c:	da08      	bge.n	800b890 <__swhatbuf_r+0x24>
 800b87e:	2200      	movs	r2, #0
 800b880:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b884:	602a      	str	r2, [r5, #0]
 800b886:	061a      	lsls	r2, r3, #24
 800b888:	d410      	bmi.n	800b8ac <__swhatbuf_r+0x40>
 800b88a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b88e:	e00e      	b.n	800b8ae <__swhatbuf_r+0x42>
 800b890:	466a      	mov	r2, sp
 800b892:	f000 f903 	bl	800ba9c <_fstat_r>
 800b896:	2800      	cmp	r0, #0
 800b898:	dbf1      	blt.n	800b87e <__swhatbuf_r+0x12>
 800b89a:	9a01      	ldr	r2, [sp, #4]
 800b89c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b8a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b8a4:	425a      	negs	r2, r3
 800b8a6:	415a      	adcs	r2, r3
 800b8a8:	602a      	str	r2, [r5, #0]
 800b8aa:	e7ee      	b.n	800b88a <__swhatbuf_r+0x1e>
 800b8ac:	2340      	movs	r3, #64	; 0x40
 800b8ae:	2000      	movs	r0, #0
 800b8b0:	6023      	str	r3, [r4, #0]
 800b8b2:	b016      	add	sp, #88	; 0x58
 800b8b4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b8b8 <__smakebuf_r>:
 800b8b8:	898b      	ldrh	r3, [r1, #12]
 800b8ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b8bc:	079d      	lsls	r5, r3, #30
 800b8be:	4606      	mov	r6, r0
 800b8c0:	460c      	mov	r4, r1
 800b8c2:	d507      	bpl.n	800b8d4 <__smakebuf_r+0x1c>
 800b8c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b8c8:	6023      	str	r3, [r4, #0]
 800b8ca:	6123      	str	r3, [r4, #16]
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	6163      	str	r3, [r4, #20]
 800b8d0:	b002      	add	sp, #8
 800b8d2:	bd70      	pop	{r4, r5, r6, pc}
 800b8d4:	466a      	mov	r2, sp
 800b8d6:	ab01      	add	r3, sp, #4
 800b8d8:	f7ff ffc8 	bl	800b86c <__swhatbuf_r>
 800b8dc:	9900      	ldr	r1, [sp, #0]
 800b8de:	4605      	mov	r5, r0
 800b8e0:	4630      	mov	r0, r6
 800b8e2:	f7ff f969 	bl	800abb8 <_malloc_r>
 800b8e6:	b948      	cbnz	r0, 800b8fc <__smakebuf_r+0x44>
 800b8e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8ec:	059a      	lsls	r2, r3, #22
 800b8ee:	d4ef      	bmi.n	800b8d0 <__smakebuf_r+0x18>
 800b8f0:	f023 0303 	bic.w	r3, r3, #3
 800b8f4:	f043 0302 	orr.w	r3, r3, #2
 800b8f8:	81a3      	strh	r3, [r4, #12]
 800b8fa:	e7e3      	b.n	800b8c4 <__smakebuf_r+0xc>
 800b8fc:	4b0d      	ldr	r3, [pc, #52]	; (800b934 <__smakebuf_r+0x7c>)
 800b8fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800b900:	89a3      	ldrh	r3, [r4, #12]
 800b902:	6020      	str	r0, [r4, #0]
 800b904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b908:	81a3      	strh	r3, [r4, #12]
 800b90a:	9b00      	ldr	r3, [sp, #0]
 800b90c:	6120      	str	r0, [r4, #16]
 800b90e:	6163      	str	r3, [r4, #20]
 800b910:	9b01      	ldr	r3, [sp, #4]
 800b912:	b15b      	cbz	r3, 800b92c <__smakebuf_r+0x74>
 800b914:	4630      	mov	r0, r6
 800b916:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b91a:	f000 f8d1 	bl	800bac0 <_isatty_r>
 800b91e:	b128      	cbz	r0, 800b92c <__smakebuf_r+0x74>
 800b920:	89a3      	ldrh	r3, [r4, #12]
 800b922:	f023 0303 	bic.w	r3, r3, #3
 800b926:	f043 0301 	orr.w	r3, r3, #1
 800b92a:	81a3      	strh	r3, [r4, #12]
 800b92c:	89a0      	ldrh	r0, [r4, #12]
 800b92e:	4305      	orrs	r5, r0
 800b930:	81a5      	strh	r5, [r4, #12]
 800b932:	e7cd      	b.n	800b8d0 <__smakebuf_r+0x18>
 800b934:	0800b6c5 	.word	0x0800b6c5

0800b938 <_malloc_usable_size_r>:
 800b938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b93c:	1f18      	subs	r0, r3, #4
 800b93e:	2b00      	cmp	r3, #0
 800b940:	bfbc      	itt	lt
 800b942:	580b      	ldrlt	r3, [r1, r0]
 800b944:	18c0      	addlt	r0, r0, r3
 800b946:	4770      	bx	lr

0800b948 <_raise_r>:
 800b948:	291f      	cmp	r1, #31
 800b94a:	b538      	push	{r3, r4, r5, lr}
 800b94c:	4604      	mov	r4, r0
 800b94e:	460d      	mov	r5, r1
 800b950:	d904      	bls.n	800b95c <_raise_r+0x14>
 800b952:	2316      	movs	r3, #22
 800b954:	6003      	str	r3, [r0, #0]
 800b956:	f04f 30ff 	mov.w	r0, #4294967295
 800b95a:	bd38      	pop	{r3, r4, r5, pc}
 800b95c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b95e:	b112      	cbz	r2, 800b966 <_raise_r+0x1e>
 800b960:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b964:	b94b      	cbnz	r3, 800b97a <_raise_r+0x32>
 800b966:	4620      	mov	r0, r4
 800b968:	f000 f830 	bl	800b9cc <_getpid_r>
 800b96c:	462a      	mov	r2, r5
 800b96e:	4601      	mov	r1, r0
 800b970:	4620      	mov	r0, r4
 800b972:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b976:	f000 b817 	b.w	800b9a8 <_kill_r>
 800b97a:	2b01      	cmp	r3, #1
 800b97c:	d00a      	beq.n	800b994 <_raise_r+0x4c>
 800b97e:	1c59      	adds	r1, r3, #1
 800b980:	d103      	bne.n	800b98a <_raise_r+0x42>
 800b982:	2316      	movs	r3, #22
 800b984:	6003      	str	r3, [r0, #0]
 800b986:	2001      	movs	r0, #1
 800b988:	e7e7      	b.n	800b95a <_raise_r+0x12>
 800b98a:	2400      	movs	r4, #0
 800b98c:	4628      	mov	r0, r5
 800b98e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b992:	4798      	blx	r3
 800b994:	2000      	movs	r0, #0
 800b996:	e7e0      	b.n	800b95a <_raise_r+0x12>

0800b998 <raise>:
 800b998:	4b02      	ldr	r3, [pc, #8]	; (800b9a4 <raise+0xc>)
 800b99a:	4601      	mov	r1, r0
 800b99c:	6818      	ldr	r0, [r3, #0]
 800b99e:	f7ff bfd3 	b.w	800b948 <_raise_r>
 800b9a2:	bf00      	nop
 800b9a4:	20000024 	.word	0x20000024

0800b9a8 <_kill_r>:
 800b9a8:	b538      	push	{r3, r4, r5, lr}
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	4d06      	ldr	r5, [pc, #24]	; (800b9c8 <_kill_r+0x20>)
 800b9ae:	4604      	mov	r4, r0
 800b9b0:	4608      	mov	r0, r1
 800b9b2:	4611      	mov	r1, r2
 800b9b4:	602b      	str	r3, [r5, #0]
 800b9b6:	f7f6 fdc4 	bl	8002542 <_kill>
 800b9ba:	1c43      	adds	r3, r0, #1
 800b9bc:	d102      	bne.n	800b9c4 <_kill_r+0x1c>
 800b9be:	682b      	ldr	r3, [r5, #0]
 800b9c0:	b103      	cbz	r3, 800b9c4 <_kill_r+0x1c>
 800b9c2:	6023      	str	r3, [r4, #0]
 800b9c4:	bd38      	pop	{r3, r4, r5, pc}
 800b9c6:	bf00      	nop
 800b9c8:	2000262c 	.word	0x2000262c

0800b9cc <_getpid_r>:
 800b9cc:	f7f6 bdb2 	b.w	8002534 <_getpid>

0800b9d0 <__sread>:
 800b9d0:	b510      	push	{r4, lr}
 800b9d2:	460c      	mov	r4, r1
 800b9d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9d8:	f000 f894 	bl	800bb04 <_read_r>
 800b9dc:	2800      	cmp	r0, #0
 800b9de:	bfab      	itete	ge
 800b9e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b9e2:	89a3      	ldrhlt	r3, [r4, #12]
 800b9e4:	181b      	addge	r3, r3, r0
 800b9e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b9ea:	bfac      	ite	ge
 800b9ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800b9ee:	81a3      	strhlt	r3, [r4, #12]
 800b9f0:	bd10      	pop	{r4, pc}

0800b9f2 <__swrite>:
 800b9f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9f6:	461f      	mov	r7, r3
 800b9f8:	898b      	ldrh	r3, [r1, #12]
 800b9fa:	4605      	mov	r5, r0
 800b9fc:	05db      	lsls	r3, r3, #23
 800b9fe:	460c      	mov	r4, r1
 800ba00:	4616      	mov	r6, r2
 800ba02:	d505      	bpl.n	800ba10 <__swrite+0x1e>
 800ba04:	2302      	movs	r3, #2
 800ba06:	2200      	movs	r2, #0
 800ba08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba0c:	f000 f868 	bl	800bae0 <_lseek_r>
 800ba10:	89a3      	ldrh	r3, [r4, #12]
 800ba12:	4632      	mov	r2, r6
 800ba14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba18:	81a3      	strh	r3, [r4, #12]
 800ba1a:	4628      	mov	r0, r5
 800ba1c:	463b      	mov	r3, r7
 800ba1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba26:	f000 b817 	b.w	800ba58 <_write_r>

0800ba2a <__sseek>:
 800ba2a:	b510      	push	{r4, lr}
 800ba2c:	460c      	mov	r4, r1
 800ba2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba32:	f000 f855 	bl	800bae0 <_lseek_r>
 800ba36:	1c43      	adds	r3, r0, #1
 800ba38:	89a3      	ldrh	r3, [r4, #12]
 800ba3a:	bf15      	itete	ne
 800ba3c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba46:	81a3      	strheq	r3, [r4, #12]
 800ba48:	bf18      	it	ne
 800ba4a:	81a3      	strhne	r3, [r4, #12]
 800ba4c:	bd10      	pop	{r4, pc}

0800ba4e <__sclose>:
 800ba4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba52:	f000 b813 	b.w	800ba7c <_close_r>
	...

0800ba58 <_write_r>:
 800ba58:	b538      	push	{r3, r4, r5, lr}
 800ba5a:	4604      	mov	r4, r0
 800ba5c:	4608      	mov	r0, r1
 800ba5e:	4611      	mov	r1, r2
 800ba60:	2200      	movs	r2, #0
 800ba62:	4d05      	ldr	r5, [pc, #20]	; (800ba78 <_write_r+0x20>)
 800ba64:	602a      	str	r2, [r5, #0]
 800ba66:	461a      	mov	r2, r3
 800ba68:	f7f6 fda2 	bl	80025b0 <_write>
 800ba6c:	1c43      	adds	r3, r0, #1
 800ba6e:	d102      	bne.n	800ba76 <_write_r+0x1e>
 800ba70:	682b      	ldr	r3, [r5, #0]
 800ba72:	b103      	cbz	r3, 800ba76 <_write_r+0x1e>
 800ba74:	6023      	str	r3, [r4, #0]
 800ba76:	bd38      	pop	{r3, r4, r5, pc}
 800ba78:	2000262c 	.word	0x2000262c

0800ba7c <_close_r>:
 800ba7c:	b538      	push	{r3, r4, r5, lr}
 800ba7e:	2300      	movs	r3, #0
 800ba80:	4d05      	ldr	r5, [pc, #20]	; (800ba98 <_close_r+0x1c>)
 800ba82:	4604      	mov	r4, r0
 800ba84:	4608      	mov	r0, r1
 800ba86:	602b      	str	r3, [r5, #0]
 800ba88:	f7f6 fdae 	bl	80025e8 <_close>
 800ba8c:	1c43      	adds	r3, r0, #1
 800ba8e:	d102      	bne.n	800ba96 <_close_r+0x1a>
 800ba90:	682b      	ldr	r3, [r5, #0]
 800ba92:	b103      	cbz	r3, 800ba96 <_close_r+0x1a>
 800ba94:	6023      	str	r3, [r4, #0]
 800ba96:	bd38      	pop	{r3, r4, r5, pc}
 800ba98:	2000262c 	.word	0x2000262c

0800ba9c <_fstat_r>:
 800ba9c:	b538      	push	{r3, r4, r5, lr}
 800ba9e:	2300      	movs	r3, #0
 800baa0:	4d06      	ldr	r5, [pc, #24]	; (800babc <_fstat_r+0x20>)
 800baa2:	4604      	mov	r4, r0
 800baa4:	4608      	mov	r0, r1
 800baa6:	4611      	mov	r1, r2
 800baa8:	602b      	str	r3, [r5, #0]
 800baaa:	f7f6 fda8 	bl	80025fe <_fstat>
 800baae:	1c43      	adds	r3, r0, #1
 800bab0:	d102      	bne.n	800bab8 <_fstat_r+0x1c>
 800bab2:	682b      	ldr	r3, [r5, #0]
 800bab4:	b103      	cbz	r3, 800bab8 <_fstat_r+0x1c>
 800bab6:	6023      	str	r3, [r4, #0]
 800bab8:	bd38      	pop	{r3, r4, r5, pc}
 800baba:	bf00      	nop
 800babc:	2000262c 	.word	0x2000262c

0800bac0 <_isatty_r>:
 800bac0:	b538      	push	{r3, r4, r5, lr}
 800bac2:	2300      	movs	r3, #0
 800bac4:	4d05      	ldr	r5, [pc, #20]	; (800badc <_isatty_r+0x1c>)
 800bac6:	4604      	mov	r4, r0
 800bac8:	4608      	mov	r0, r1
 800baca:	602b      	str	r3, [r5, #0]
 800bacc:	f7f6 fda6 	bl	800261c <_isatty>
 800bad0:	1c43      	adds	r3, r0, #1
 800bad2:	d102      	bne.n	800bada <_isatty_r+0x1a>
 800bad4:	682b      	ldr	r3, [r5, #0]
 800bad6:	b103      	cbz	r3, 800bada <_isatty_r+0x1a>
 800bad8:	6023      	str	r3, [r4, #0]
 800bada:	bd38      	pop	{r3, r4, r5, pc}
 800badc:	2000262c 	.word	0x2000262c

0800bae0 <_lseek_r>:
 800bae0:	b538      	push	{r3, r4, r5, lr}
 800bae2:	4604      	mov	r4, r0
 800bae4:	4608      	mov	r0, r1
 800bae6:	4611      	mov	r1, r2
 800bae8:	2200      	movs	r2, #0
 800baea:	4d05      	ldr	r5, [pc, #20]	; (800bb00 <_lseek_r+0x20>)
 800baec:	602a      	str	r2, [r5, #0]
 800baee:	461a      	mov	r2, r3
 800baf0:	f7f6 fd9e 	bl	8002630 <_lseek>
 800baf4:	1c43      	adds	r3, r0, #1
 800baf6:	d102      	bne.n	800bafe <_lseek_r+0x1e>
 800baf8:	682b      	ldr	r3, [r5, #0]
 800bafa:	b103      	cbz	r3, 800bafe <_lseek_r+0x1e>
 800bafc:	6023      	str	r3, [r4, #0]
 800bafe:	bd38      	pop	{r3, r4, r5, pc}
 800bb00:	2000262c 	.word	0x2000262c

0800bb04 <_read_r>:
 800bb04:	b538      	push	{r3, r4, r5, lr}
 800bb06:	4604      	mov	r4, r0
 800bb08:	4608      	mov	r0, r1
 800bb0a:	4611      	mov	r1, r2
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	4d05      	ldr	r5, [pc, #20]	; (800bb24 <_read_r+0x20>)
 800bb10:	602a      	str	r2, [r5, #0]
 800bb12:	461a      	mov	r2, r3
 800bb14:	f7f6 fd2f 	bl	8002576 <_read>
 800bb18:	1c43      	adds	r3, r0, #1
 800bb1a:	d102      	bne.n	800bb22 <_read_r+0x1e>
 800bb1c:	682b      	ldr	r3, [r5, #0]
 800bb1e:	b103      	cbz	r3, 800bb22 <_read_r+0x1e>
 800bb20:	6023      	str	r3, [r4, #0]
 800bb22:	bd38      	pop	{r3, r4, r5, pc}
 800bb24:	2000262c 	.word	0x2000262c

0800bb28 <pow>:
 800bb28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb2c:	4614      	mov	r4, r2
 800bb2e:	461d      	mov	r5, r3
 800bb30:	4680      	mov	r8, r0
 800bb32:	4689      	mov	r9, r1
 800bb34:	f000 f860 	bl	800bbf8 <__ieee754_pow>
 800bb38:	4622      	mov	r2, r4
 800bb3a:	4606      	mov	r6, r0
 800bb3c:	460f      	mov	r7, r1
 800bb3e:	462b      	mov	r3, r5
 800bb40:	4620      	mov	r0, r4
 800bb42:	4629      	mov	r1, r5
 800bb44:	f7f4 ff62 	bl	8000a0c <__aeabi_dcmpun>
 800bb48:	bbc8      	cbnz	r0, 800bbbe <pow+0x96>
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	4640      	mov	r0, r8
 800bb50:	4649      	mov	r1, r9
 800bb52:	f7f4 ff29 	bl	80009a8 <__aeabi_dcmpeq>
 800bb56:	b1b8      	cbz	r0, 800bb88 <pow+0x60>
 800bb58:	2200      	movs	r2, #0
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	4620      	mov	r0, r4
 800bb5e:	4629      	mov	r1, r5
 800bb60:	f7f4 ff22 	bl	80009a8 <__aeabi_dcmpeq>
 800bb64:	2800      	cmp	r0, #0
 800bb66:	d141      	bne.n	800bbec <pow+0xc4>
 800bb68:	4620      	mov	r0, r4
 800bb6a:	4629      	mov	r1, r5
 800bb6c:	f000 fe39 	bl	800c7e2 <finite>
 800bb70:	b328      	cbz	r0, 800bbbe <pow+0x96>
 800bb72:	2200      	movs	r2, #0
 800bb74:	2300      	movs	r3, #0
 800bb76:	4620      	mov	r0, r4
 800bb78:	4629      	mov	r1, r5
 800bb7a:	f7f4 ff1f 	bl	80009bc <__aeabi_dcmplt>
 800bb7e:	b1f0      	cbz	r0, 800bbbe <pow+0x96>
 800bb80:	f7fd f8b4 	bl	8008cec <__errno>
 800bb84:	2322      	movs	r3, #34	; 0x22
 800bb86:	e019      	b.n	800bbbc <pow+0x94>
 800bb88:	4630      	mov	r0, r6
 800bb8a:	4639      	mov	r1, r7
 800bb8c:	f000 fe29 	bl	800c7e2 <finite>
 800bb90:	b9c8      	cbnz	r0, 800bbc6 <pow+0x9e>
 800bb92:	4640      	mov	r0, r8
 800bb94:	4649      	mov	r1, r9
 800bb96:	f000 fe24 	bl	800c7e2 <finite>
 800bb9a:	b1a0      	cbz	r0, 800bbc6 <pow+0x9e>
 800bb9c:	4620      	mov	r0, r4
 800bb9e:	4629      	mov	r1, r5
 800bba0:	f000 fe1f 	bl	800c7e2 <finite>
 800bba4:	b178      	cbz	r0, 800bbc6 <pow+0x9e>
 800bba6:	4632      	mov	r2, r6
 800bba8:	463b      	mov	r3, r7
 800bbaa:	4630      	mov	r0, r6
 800bbac:	4639      	mov	r1, r7
 800bbae:	f7f4 ff2d 	bl	8000a0c <__aeabi_dcmpun>
 800bbb2:	2800      	cmp	r0, #0
 800bbb4:	d0e4      	beq.n	800bb80 <pow+0x58>
 800bbb6:	f7fd f899 	bl	8008cec <__errno>
 800bbba:	2321      	movs	r3, #33	; 0x21
 800bbbc:	6003      	str	r3, [r0, #0]
 800bbbe:	4630      	mov	r0, r6
 800bbc0:	4639      	mov	r1, r7
 800bbc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	2300      	movs	r3, #0
 800bbca:	4630      	mov	r0, r6
 800bbcc:	4639      	mov	r1, r7
 800bbce:	f7f4 feeb 	bl	80009a8 <__aeabi_dcmpeq>
 800bbd2:	2800      	cmp	r0, #0
 800bbd4:	d0f3      	beq.n	800bbbe <pow+0x96>
 800bbd6:	4640      	mov	r0, r8
 800bbd8:	4649      	mov	r1, r9
 800bbda:	f000 fe02 	bl	800c7e2 <finite>
 800bbde:	2800      	cmp	r0, #0
 800bbe0:	d0ed      	beq.n	800bbbe <pow+0x96>
 800bbe2:	4620      	mov	r0, r4
 800bbe4:	4629      	mov	r1, r5
 800bbe6:	f000 fdfc 	bl	800c7e2 <finite>
 800bbea:	e7c8      	b.n	800bb7e <pow+0x56>
 800bbec:	2600      	movs	r6, #0
 800bbee:	4f01      	ldr	r7, [pc, #4]	; (800bbf4 <pow+0xcc>)
 800bbf0:	e7e5      	b.n	800bbbe <pow+0x96>
 800bbf2:	bf00      	nop
 800bbf4:	3ff00000 	.word	0x3ff00000

0800bbf8 <__ieee754_pow>:
 800bbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbfc:	b093      	sub	sp, #76	; 0x4c
 800bbfe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc02:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800bc06:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800bc0a:	4689      	mov	r9, r1
 800bc0c:	ea56 0102 	orrs.w	r1, r6, r2
 800bc10:	4680      	mov	r8, r0
 800bc12:	d111      	bne.n	800bc38 <__ieee754_pow+0x40>
 800bc14:	1803      	adds	r3, r0, r0
 800bc16:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800bc1a:	4152      	adcs	r2, r2
 800bc1c:	4299      	cmp	r1, r3
 800bc1e:	4b82      	ldr	r3, [pc, #520]	; (800be28 <__ieee754_pow+0x230>)
 800bc20:	4193      	sbcs	r3, r2
 800bc22:	f080 84b9 	bcs.w	800c598 <__ieee754_pow+0x9a0>
 800bc26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc2a:	4640      	mov	r0, r8
 800bc2c:	4649      	mov	r1, r9
 800bc2e:	f7f4 fa9d 	bl	800016c <__adddf3>
 800bc32:	4683      	mov	fp, r0
 800bc34:	468c      	mov	ip, r1
 800bc36:	e06f      	b.n	800bd18 <__ieee754_pow+0x120>
 800bc38:	4b7c      	ldr	r3, [pc, #496]	; (800be2c <__ieee754_pow+0x234>)
 800bc3a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800bc3e:	429c      	cmp	r4, r3
 800bc40:	464d      	mov	r5, r9
 800bc42:	4682      	mov	sl, r0
 800bc44:	dc06      	bgt.n	800bc54 <__ieee754_pow+0x5c>
 800bc46:	d101      	bne.n	800bc4c <__ieee754_pow+0x54>
 800bc48:	2800      	cmp	r0, #0
 800bc4a:	d1ec      	bne.n	800bc26 <__ieee754_pow+0x2e>
 800bc4c:	429e      	cmp	r6, r3
 800bc4e:	dc01      	bgt.n	800bc54 <__ieee754_pow+0x5c>
 800bc50:	d10f      	bne.n	800bc72 <__ieee754_pow+0x7a>
 800bc52:	b172      	cbz	r2, 800bc72 <__ieee754_pow+0x7a>
 800bc54:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800bc58:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800bc5c:	ea55 050a 	orrs.w	r5, r5, sl
 800bc60:	d1e1      	bne.n	800bc26 <__ieee754_pow+0x2e>
 800bc62:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800bc66:	18db      	adds	r3, r3, r3
 800bc68:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800bc6c:	4152      	adcs	r2, r2
 800bc6e:	429d      	cmp	r5, r3
 800bc70:	e7d5      	b.n	800bc1e <__ieee754_pow+0x26>
 800bc72:	2d00      	cmp	r5, #0
 800bc74:	da39      	bge.n	800bcea <__ieee754_pow+0xf2>
 800bc76:	4b6e      	ldr	r3, [pc, #440]	; (800be30 <__ieee754_pow+0x238>)
 800bc78:	429e      	cmp	r6, r3
 800bc7a:	dc52      	bgt.n	800bd22 <__ieee754_pow+0x12a>
 800bc7c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800bc80:	429e      	cmp	r6, r3
 800bc82:	f340 849c 	ble.w	800c5be <__ieee754_pow+0x9c6>
 800bc86:	1533      	asrs	r3, r6, #20
 800bc88:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bc8c:	2b14      	cmp	r3, #20
 800bc8e:	dd0f      	ble.n	800bcb0 <__ieee754_pow+0xb8>
 800bc90:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800bc94:	fa22 f103 	lsr.w	r1, r2, r3
 800bc98:	fa01 f303 	lsl.w	r3, r1, r3
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	f040 848e 	bne.w	800c5be <__ieee754_pow+0x9c6>
 800bca2:	f001 0101 	and.w	r1, r1, #1
 800bca6:	f1c1 0302 	rsb	r3, r1, #2
 800bcaa:	9300      	str	r3, [sp, #0]
 800bcac:	b182      	cbz	r2, 800bcd0 <__ieee754_pow+0xd8>
 800bcae:	e05d      	b.n	800bd6c <__ieee754_pow+0x174>
 800bcb0:	2a00      	cmp	r2, #0
 800bcb2:	d159      	bne.n	800bd68 <__ieee754_pow+0x170>
 800bcb4:	f1c3 0314 	rsb	r3, r3, #20
 800bcb8:	fa46 f103 	asr.w	r1, r6, r3
 800bcbc:	fa01 f303 	lsl.w	r3, r1, r3
 800bcc0:	42b3      	cmp	r3, r6
 800bcc2:	f040 8479 	bne.w	800c5b8 <__ieee754_pow+0x9c0>
 800bcc6:	f001 0101 	and.w	r1, r1, #1
 800bcca:	f1c1 0302 	rsb	r3, r1, #2
 800bcce:	9300      	str	r3, [sp, #0]
 800bcd0:	4b58      	ldr	r3, [pc, #352]	; (800be34 <__ieee754_pow+0x23c>)
 800bcd2:	429e      	cmp	r6, r3
 800bcd4:	d132      	bne.n	800bd3c <__ieee754_pow+0x144>
 800bcd6:	2f00      	cmp	r7, #0
 800bcd8:	f280 846a 	bge.w	800c5b0 <__ieee754_pow+0x9b8>
 800bcdc:	4642      	mov	r2, r8
 800bcde:	464b      	mov	r3, r9
 800bce0:	2000      	movs	r0, #0
 800bce2:	4954      	ldr	r1, [pc, #336]	; (800be34 <__ieee754_pow+0x23c>)
 800bce4:	f7f4 fd22 	bl	800072c <__aeabi_ddiv>
 800bce8:	e7a3      	b.n	800bc32 <__ieee754_pow+0x3a>
 800bcea:	2300      	movs	r3, #0
 800bcec:	9300      	str	r3, [sp, #0]
 800bcee:	2a00      	cmp	r2, #0
 800bcf0:	d13c      	bne.n	800bd6c <__ieee754_pow+0x174>
 800bcf2:	4b4e      	ldr	r3, [pc, #312]	; (800be2c <__ieee754_pow+0x234>)
 800bcf4:	429e      	cmp	r6, r3
 800bcf6:	d1eb      	bne.n	800bcd0 <__ieee754_pow+0xd8>
 800bcf8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800bcfc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800bd00:	ea53 030a 	orrs.w	r3, r3, sl
 800bd04:	f000 8448 	beq.w	800c598 <__ieee754_pow+0x9a0>
 800bd08:	4b4b      	ldr	r3, [pc, #300]	; (800be38 <__ieee754_pow+0x240>)
 800bd0a:	429c      	cmp	r4, r3
 800bd0c:	dd0b      	ble.n	800bd26 <__ieee754_pow+0x12e>
 800bd0e:	2f00      	cmp	r7, #0
 800bd10:	f2c0 8448 	blt.w	800c5a4 <__ieee754_pow+0x9ac>
 800bd14:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800bd18:	4658      	mov	r0, fp
 800bd1a:	4661      	mov	r1, ip
 800bd1c:	b013      	add	sp, #76	; 0x4c
 800bd1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd22:	2302      	movs	r3, #2
 800bd24:	e7e2      	b.n	800bcec <__ieee754_pow+0xf4>
 800bd26:	2f00      	cmp	r7, #0
 800bd28:	f04f 0b00 	mov.w	fp, #0
 800bd2c:	f04f 0c00 	mov.w	ip, #0
 800bd30:	daf2      	bge.n	800bd18 <__ieee754_pow+0x120>
 800bd32:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800bd36:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800bd3a:	e7ed      	b.n	800bd18 <__ieee754_pow+0x120>
 800bd3c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800bd40:	d106      	bne.n	800bd50 <__ieee754_pow+0x158>
 800bd42:	4642      	mov	r2, r8
 800bd44:	464b      	mov	r3, r9
 800bd46:	4640      	mov	r0, r8
 800bd48:	4649      	mov	r1, r9
 800bd4a:	f7f4 fbc5 	bl	80004d8 <__aeabi_dmul>
 800bd4e:	e770      	b.n	800bc32 <__ieee754_pow+0x3a>
 800bd50:	4b3a      	ldr	r3, [pc, #232]	; (800be3c <__ieee754_pow+0x244>)
 800bd52:	429f      	cmp	r7, r3
 800bd54:	d10a      	bne.n	800bd6c <__ieee754_pow+0x174>
 800bd56:	2d00      	cmp	r5, #0
 800bd58:	db08      	blt.n	800bd6c <__ieee754_pow+0x174>
 800bd5a:	4640      	mov	r0, r8
 800bd5c:	4649      	mov	r1, r9
 800bd5e:	b013      	add	sp, #76	; 0x4c
 800bd60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd64:	f000 bc5e 	b.w	800c624 <__ieee754_sqrt>
 800bd68:	2300      	movs	r3, #0
 800bd6a:	9300      	str	r3, [sp, #0]
 800bd6c:	4640      	mov	r0, r8
 800bd6e:	4649      	mov	r1, r9
 800bd70:	f000 fd34 	bl	800c7dc <fabs>
 800bd74:	4683      	mov	fp, r0
 800bd76:	468c      	mov	ip, r1
 800bd78:	f1ba 0f00 	cmp.w	sl, #0
 800bd7c:	d128      	bne.n	800bdd0 <__ieee754_pow+0x1d8>
 800bd7e:	b124      	cbz	r4, 800bd8a <__ieee754_pow+0x192>
 800bd80:	4b2c      	ldr	r3, [pc, #176]	; (800be34 <__ieee754_pow+0x23c>)
 800bd82:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800bd86:	429a      	cmp	r2, r3
 800bd88:	d122      	bne.n	800bdd0 <__ieee754_pow+0x1d8>
 800bd8a:	2f00      	cmp	r7, #0
 800bd8c:	da07      	bge.n	800bd9e <__ieee754_pow+0x1a6>
 800bd8e:	465a      	mov	r2, fp
 800bd90:	4663      	mov	r3, ip
 800bd92:	2000      	movs	r0, #0
 800bd94:	4927      	ldr	r1, [pc, #156]	; (800be34 <__ieee754_pow+0x23c>)
 800bd96:	f7f4 fcc9 	bl	800072c <__aeabi_ddiv>
 800bd9a:	4683      	mov	fp, r0
 800bd9c:	468c      	mov	ip, r1
 800bd9e:	2d00      	cmp	r5, #0
 800bda0:	daba      	bge.n	800bd18 <__ieee754_pow+0x120>
 800bda2:	9b00      	ldr	r3, [sp, #0]
 800bda4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bda8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bdac:	4323      	orrs	r3, r4
 800bdae:	d108      	bne.n	800bdc2 <__ieee754_pow+0x1ca>
 800bdb0:	465a      	mov	r2, fp
 800bdb2:	4663      	mov	r3, ip
 800bdb4:	4658      	mov	r0, fp
 800bdb6:	4661      	mov	r1, ip
 800bdb8:	f7f4 f9d6 	bl	8000168 <__aeabi_dsub>
 800bdbc:	4602      	mov	r2, r0
 800bdbe:	460b      	mov	r3, r1
 800bdc0:	e790      	b.n	800bce4 <__ieee754_pow+0xec>
 800bdc2:	9b00      	ldr	r3, [sp, #0]
 800bdc4:	2b01      	cmp	r3, #1
 800bdc6:	d1a7      	bne.n	800bd18 <__ieee754_pow+0x120>
 800bdc8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800bdcc:	469c      	mov	ip, r3
 800bdce:	e7a3      	b.n	800bd18 <__ieee754_pow+0x120>
 800bdd0:	0feb      	lsrs	r3, r5, #31
 800bdd2:	3b01      	subs	r3, #1
 800bdd4:	930c      	str	r3, [sp, #48]	; 0x30
 800bdd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bdd8:	9b00      	ldr	r3, [sp, #0]
 800bdda:	4313      	orrs	r3, r2
 800bddc:	d104      	bne.n	800bde8 <__ieee754_pow+0x1f0>
 800bdde:	4642      	mov	r2, r8
 800bde0:	464b      	mov	r3, r9
 800bde2:	4640      	mov	r0, r8
 800bde4:	4649      	mov	r1, r9
 800bde6:	e7e7      	b.n	800bdb8 <__ieee754_pow+0x1c0>
 800bde8:	4b15      	ldr	r3, [pc, #84]	; (800be40 <__ieee754_pow+0x248>)
 800bdea:	429e      	cmp	r6, r3
 800bdec:	f340 80f6 	ble.w	800bfdc <__ieee754_pow+0x3e4>
 800bdf0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800bdf4:	429e      	cmp	r6, r3
 800bdf6:	4b10      	ldr	r3, [pc, #64]	; (800be38 <__ieee754_pow+0x240>)
 800bdf8:	dd09      	ble.n	800be0e <__ieee754_pow+0x216>
 800bdfa:	429c      	cmp	r4, r3
 800bdfc:	dc0c      	bgt.n	800be18 <__ieee754_pow+0x220>
 800bdfe:	2f00      	cmp	r7, #0
 800be00:	da0c      	bge.n	800be1c <__ieee754_pow+0x224>
 800be02:	2000      	movs	r0, #0
 800be04:	b013      	add	sp, #76	; 0x4c
 800be06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be0a:	f000 bce2 	b.w	800c7d2 <__math_oflow>
 800be0e:	429c      	cmp	r4, r3
 800be10:	dbf5      	blt.n	800bdfe <__ieee754_pow+0x206>
 800be12:	4b08      	ldr	r3, [pc, #32]	; (800be34 <__ieee754_pow+0x23c>)
 800be14:	429c      	cmp	r4, r3
 800be16:	dd15      	ble.n	800be44 <__ieee754_pow+0x24c>
 800be18:	2f00      	cmp	r7, #0
 800be1a:	dcf2      	bgt.n	800be02 <__ieee754_pow+0x20a>
 800be1c:	2000      	movs	r0, #0
 800be1e:	b013      	add	sp, #76	; 0x4c
 800be20:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be24:	f000 bcd0 	b.w	800c7c8 <__math_uflow>
 800be28:	fff00000 	.word	0xfff00000
 800be2c:	7ff00000 	.word	0x7ff00000
 800be30:	433fffff 	.word	0x433fffff
 800be34:	3ff00000 	.word	0x3ff00000
 800be38:	3fefffff 	.word	0x3fefffff
 800be3c:	3fe00000 	.word	0x3fe00000
 800be40:	41e00000 	.word	0x41e00000
 800be44:	4661      	mov	r1, ip
 800be46:	2200      	movs	r2, #0
 800be48:	4658      	mov	r0, fp
 800be4a:	4b5f      	ldr	r3, [pc, #380]	; (800bfc8 <__ieee754_pow+0x3d0>)
 800be4c:	f7f4 f98c 	bl	8000168 <__aeabi_dsub>
 800be50:	a355      	add	r3, pc, #340	; (adr r3, 800bfa8 <__ieee754_pow+0x3b0>)
 800be52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be56:	4604      	mov	r4, r0
 800be58:	460d      	mov	r5, r1
 800be5a:	f7f4 fb3d 	bl	80004d8 <__aeabi_dmul>
 800be5e:	a354      	add	r3, pc, #336	; (adr r3, 800bfb0 <__ieee754_pow+0x3b8>)
 800be60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be64:	4606      	mov	r6, r0
 800be66:	460f      	mov	r7, r1
 800be68:	4620      	mov	r0, r4
 800be6a:	4629      	mov	r1, r5
 800be6c:	f7f4 fb34 	bl	80004d8 <__aeabi_dmul>
 800be70:	2200      	movs	r2, #0
 800be72:	4682      	mov	sl, r0
 800be74:	468b      	mov	fp, r1
 800be76:	4620      	mov	r0, r4
 800be78:	4629      	mov	r1, r5
 800be7a:	4b54      	ldr	r3, [pc, #336]	; (800bfcc <__ieee754_pow+0x3d4>)
 800be7c:	f7f4 fb2c 	bl	80004d8 <__aeabi_dmul>
 800be80:	4602      	mov	r2, r0
 800be82:	460b      	mov	r3, r1
 800be84:	a14c      	add	r1, pc, #304	; (adr r1, 800bfb8 <__ieee754_pow+0x3c0>)
 800be86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be8a:	f7f4 f96d 	bl	8000168 <__aeabi_dsub>
 800be8e:	4622      	mov	r2, r4
 800be90:	462b      	mov	r3, r5
 800be92:	f7f4 fb21 	bl	80004d8 <__aeabi_dmul>
 800be96:	4602      	mov	r2, r0
 800be98:	460b      	mov	r3, r1
 800be9a:	2000      	movs	r0, #0
 800be9c:	494c      	ldr	r1, [pc, #304]	; (800bfd0 <__ieee754_pow+0x3d8>)
 800be9e:	f7f4 f963 	bl	8000168 <__aeabi_dsub>
 800bea2:	4622      	mov	r2, r4
 800bea4:	462b      	mov	r3, r5
 800bea6:	4680      	mov	r8, r0
 800bea8:	4689      	mov	r9, r1
 800beaa:	4620      	mov	r0, r4
 800beac:	4629      	mov	r1, r5
 800beae:	f7f4 fb13 	bl	80004d8 <__aeabi_dmul>
 800beb2:	4602      	mov	r2, r0
 800beb4:	460b      	mov	r3, r1
 800beb6:	4640      	mov	r0, r8
 800beb8:	4649      	mov	r1, r9
 800beba:	f7f4 fb0d 	bl	80004d8 <__aeabi_dmul>
 800bebe:	a340      	add	r3, pc, #256	; (adr r3, 800bfc0 <__ieee754_pow+0x3c8>)
 800bec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec4:	f7f4 fb08 	bl	80004d8 <__aeabi_dmul>
 800bec8:	4602      	mov	r2, r0
 800beca:	460b      	mov	r3, r1
 800becc:	4650      	mov	r0, sl
 800bece:	4659      	mov	r1, fp
 800bed0:	f7f4 f94a 	bl	8000168 <__aeabi_dsub>
 800bed4:	f04f 0a00 	mov.w	sl, #0
 800bed8:	4602      	mov	r2, r0
 800beda:	460b      	mov	r3, r1
 800bedc:	4604      	mov	r4, r0
 800bede:	460d      	mov	r5, r1
 800bee0:	4630      	mov	r0, r6
 800bee2:	4639      	mov	r1, r7
 800bee4:	f7f4 f942 	bl	800016c <__adddf3>
 800bee8:	4632      	mov	r2, r6
 800beea:	463b      	mov	r3, r7
 800beec:	4650      	mov	r0, sl
 800beee:	468b      	mov	fp, r1
 800bef0:	f7f4 f93a 	bl	8000168 <__aeabi_dsub>
 800bef4:	4602      	mov	r2, r0
 800bef6:	460b      	mov	r3, r1
 800bef8:	4620      	mov	r0, r4
 800befa:	4629      	mov	r1, r5
 800befc:	f7f4 f934 	bl	8000168 <__aeabi_dsub>
 800bf00:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bf04:	9b00      	ldr	r3, [sp, #0]
 800bf06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf08:	3b01      	subs	r3, #1
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	f04f 0600 	mov.w	r6, #0
 800bf10:	f04f 0200 	mov.w	r2, #0
 800bf14:	bf0c      	ite	eq
 800bf16:	4b2f      	ldreq	r3, [pc, #188]	; (800bfd4 <__ieee754_pow+0x3dc>)
 800bf18:	4b2b      	ldrne	r3, [pc, #172]	; (800bfc8 <__ieee754_pow+0x3d0>)
 800bf1a:	4604      	mov	r4, r0
 800bf1c:	460d      	mov	r5, r1
 800bf1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf22:	e9cd 2300 	strd	r2, r3, [sp]
 800bf26:	4632      	mov	r2, r6
 800bf28:	463b      	mov	r3, r7
 800bf2a:	f7f4 f91d 	bl	8000168 <__aeabi_dsub>
 800bf2e:	4652      	mov	r2, sl
 800bf30:	465b      	mov	r3, fp
 800bf32:	f7f4 fad1 	bl	80004d8 <__aeabi_dmul>
 800bf36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf3a:	4680      	mov	r8, r0
 800bf3c:	4689      	mov	r9, r1
 800bf3e:	4620      	mov	r0, r4
 800bf40:	4629      	mov	r1, r5
 800bf42:	f7f4 fac9 	bl	80004d8 <__aeabi_dmul>
 800bf46:	4602      	mov	r2, r0
 800bf48:	460b      	mov	r3, r1
 800bf4a:	4640      	mov	r0, r8
 800bf4c:	4649      	mov	r1, r9
 800bf4e:	f7f4 f90d 	bl	800016c <__adddf3>
 800bf52:	4632      	mov	r2, r6
 800bf54:	463b      	mov	r3, r7
 800bf56:	4680      	mov	r8, r0
 800bf58:	4689      	mov	r9, r1
 800bf5a:	4650      	mov	r0, sl
 800bf5c:	4659      	mov	r1, fp
 800bf5e:	f7f4 fabb 	bl	80004d8 <__aeabi_dmul>
 800bf62:	4604      	mov	r4, r0
 800bf64:	460d      	mov	r5, r1
 800bf66:	460b      	mov	r3, r1
 800bf68:	4602      	mov	r2, r0
 800bf6a:	4649      	mov	r1, r9
 800bf6c:	4640      	mov	r0, r8
 800bf6e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800bf72:	f7f4 f8fb 	bl	800016c <__adddf3>
 800bf76:	4b18      	ldr	r3, [pc, #96]	; (800bfd8 <__ieee754_pow+0x3e0>)
 800bf78:	4682      	mov	sl, r0
 800bf7a:	4299      	cmp	r1, r3
 800bf7c:	460f      	mov	r7, r1
 800bf7e:	460e      	mov	r6, r1
 800bf80:	f340 82e5 	ble.w	800c54e <__ieee754_pow+0x956>
 800bf84:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800bf88:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800bf8c:	4303      	orrs	r3, r0
 800bf8e:	f000 81df 	beq.w	800c350 <__ieee754_pow+0x758>
 800bf92:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf96:	2200      	movs	r2, #0
 800bf98:	2300      	movs	r3, #0
 800bf9a:	f7f4 fd0f 	bl	80009bc <__aeabi_dcmplt>
 800bf9e:	3800      	subs	r0, #0
 800bfa0:	bf18      	it	ne
 800bfa2:	2001      	movne	r0, #1
 800bfa4:	e72e      	b.n	800be04 <__ieee754_pow+0x20c>
 800bfa6:	bf00      	nop
 800bfa8:	60000000 	.word	0x60000000
 800bfac:	3ff71547 	.word	0x3ff71547
 800bfb0:	f85ddf44 	.word	0xf85ddf44
 800bfb4:	3e54ae0b 	.word	0x3e54ae0b
 800bfb8:	55555555 	.word	0x55555555
 800bfbc:	3fd55555 	.word	0x3fd55555
 800bfc0:	652b82fe 	.word	0x652b82fe
 800bfc4:	3ff71547 	.word	0x3ff71547
 800bfc8:	3ff00000 	.word	0x3ff00000
 800bfcc:	3fd00000 	.word	0x3fd00000
 800bfd0:	3fe00000 	.word	0x3fe00000
 800bfd4:	bff00000 	.word	0xbff00000
 800bfd8:	408fffff 	.word	0x408fffff
 800bfdc:	4bd2      	ldr	r3, [pc, #840]	; (800c328 <__ieee754_pow+0x730>)
 800bfde:	2200      	movs	r2, #0
 800bfe0:	402b      	ands	r3, r5
 800bfe2:	b943      	cbnz	r3, 800bff6 <__ieee754_pow+0x3fe>
 800bfe4:	4658      	mov	r0, fp
 800bfe6:	4661      	mov	r1, ip
 800bfe8:	4bd0      	ldr	r3, [pc, #832]	; (800c32c <__ieee754_pow+0x734>)
 800bfea:	f7f4 fa75 	bl	80004d8 <__aeabi_dmul>
 800bfee:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bff2:	4683      	mov	fp, r0
 800bff4:	460c      	mov	r4, r1
 800bff6:	1523      	asrs	r3, r4, #20
 800bff8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bffc:	4413      	add	r3, r2
 800bffe:	930b      	str	r3, [sp, #44]	; 0x2c
 800c000:	4bcb      	ldr	r3, [pc, #812]	; (800c330 <__ieee754_pow+0x738>)
 800c002:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c006:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c00a:	429c      	cmp	r4, r3
 800c00c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c010:	dd08      	ble.n	800c024 <__ieee754_pow+0x42c>
 800c012:	4bc8      	ldr	r3, [pc, #800]	; (800c334 <__ieee754_pow+0x73c>)
 800c014:	429c      	cmp	r4, r3
 800c016:	f340 8199 	ble.w	800c34c <__ieee754_pow+0x754>
 800c01a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c01c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c020:	3301      	adds	r3, #1
 800c022:	930b      	str	r3, [sp, #44]	; 0x2c
 800c024:	2600      	movs	r6, #0
 800c026:	00f3      	lsls	r3, r6, #3
 800c028:	930d      	str	r3, [sp, #52]	; 0x34
 800c02a:	4bc3      	ldr	r3, [pc, #780]	; (800c338 <__ieee754_pow+0x740>)
 800c02c:	4658      	mov	r0, fp
 800c02e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c032:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c036:	4629      	mov	r1, r5
 800c038:	461a      	mov	r2, r3
 800c03a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800c03e:	4623      	mov	r3, r4
 800c040:	f7f4 f892 	bl	8000168 <__aeabi_dsub>
 800c044:	46da      	mov	sl, fp
 800c046:	462b      	mov	r3, r5
 800c048:	4652      	mov	r2, sl
 800c04a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c04e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c052:	f7f4 f88b 	bl	800016c <__adddf3>
 800c056:	4602      	mov	r2, r0
 800c058:	460b      	mov	r3, r1
 800c05a:	2000      	movs	r0, #0
 800c05c:	49b7      	ldr	r1, [pc, #732]	; (800c33c <__ieee754_pow+0x744>)
 800c05e:	f7f4 fb65 	bl	800072c <__aeabi_ddiv>
 800c062:	4602      	mov	r2, r0
 800c064:	460b      	mov	r3, r1
 800c066:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c06a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c06e:	f7f4 fa33 	bl	80004d8 <__aeabi_dmul>
 800c072:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c076:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800c07a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c07e:	2300      	movs	r3, #0
 800c080:	2200      	movs	r2, #0
 800c082:	46ab      	mov	fp, r5
 800c084:	106d      	asrs	r5, r5, #1
 800c086:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c08a:	9304      	str	r3, [sp, #16]
 800c08c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c090:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c094:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800c098:	4640      	mov	r0, r8
 800c09a:	4649      	mov	r1, r9
 800c09c:	4614      	mov	r4, r2
 800c09e:	461d      	mov	r5, r3
 800c0a0:	f7f4 fa1a 	bl	80004d8 <__aeabi_dmul>
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	460b      	mov	r3, r1
 800c0a8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c0ac:	f7f4 f85c 	bl	8000168 <__aeabi_dsub>
 800c0b0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c0b4:	4606      	mov	r6, r0
 800c0b6:	460f      	mov	r7, r1
 800c0b8:	4620      	mov	r0, r4
 800c0ba:	4629      	mov	r1, r5
 800c0bc:	f7f4 f854 	bl	8000168 <__aeabi_dsub>
 800c0c0:	4602      	mov	r2, r0
 800c0c2:	460b      	mov	r3, r1
 800c0c4:	4650      	mov	r0, sl
 800c0c6:	4659      	mov	r1, fp
 800c0c8:	f7f4 f84e 	bl	8000168 <__aeabi_dsub>
 800c0cc:	4642      	mov	r2, r8
 800c0ce:	464b      	mov	r3, r9
 800c0d0:	f7f4 fa02 	bl	80004d8 <__aeabi_dmul>
 800c0d4:	4602      	mov	r2, r0
 800c0d6:	460b      	mov	r3, r1
 800c0d8:	4630      	mov	r0, r6
 800c0da:	4639      	mov	r1, r7
 800c0dc:	f7f4 f844 	bl	8000168 <__aeabi_dsub>
 800c0e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c0e4:	f7f4 f9f8 	bl	80004d8 <__aeabi_dmul>
 800c0e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c0ec:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c0f0:	4610      	mov	r0, r2
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	f7f4 f9f0 	bl	80004d8 <__aeabi_dmul>
 800c0f8:	a379      	add	r3, pc, #484	; (adr r3, 800c2e0 <__ieee754_pow+0x6e8>)
 800c0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0fe:	4604      	mov	r4, r0
 800c100:	460d      	mov	r5, r1
 800c102:	f7f4 f9e9 	bl	80004d8 <__aeabi_dmul>
 800c106:	a378      	add	r3, pc, #480	; (adr r3, 800c2e8 <__ieee754_pow+0x6f0>)
 800c108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c10c:	f7f4 f82e 	bl	800016c <__adddf3>
 800c110:	4622      	mov	r2, r4
 800c112:	462b      	mov	r3, r5
 800c114:	f7f4 f9e0 	bl	80004d8 <__aeabi_dmul>
 800c118:	a375      	add	r3, pc, #468	; (adr r3, 800c2f0 <__ieee754_pow+0x6f8>)
 800c11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c11e:	f7f4 f825 	bl	800016c <__adddf3>
 800c122:	4622      	mov	r2, r4
 800c124:	462b      	mov	r3, r5
 800c126:	f7f4 f9d7 	bl	80004d8 <__aeabi_dmul>
 800c12a:	a373      	add	r3, pc, #460	; (adr r3, 800c2f8 <__ieee754_pow+0x700>)
 800c12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c130:	f7f4 f81c 	bl	800016c <__adddf3>
 800c134:	4622      	mov	r2, r4
 800c136:	462b      	mov	r3, r5
 800c138:	f7f4 f9ce 	bl	80004d8 <__aeabi_dmul>
 800c13c:	a370      	add	r3, pc, #448	; (adr r3, 800c300 <__ieee754_pow+0x708>)
 800c13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c142:	f7f4 f813 	bl	800016c <__adddf3>
 800c146:	4622      	mov	r2, r4
 800c148:	462b      	mov	r3, r5
 800c14a:	f7f4 f9c5 	bl	80004d8 <__aeabi_dmul>
 800c14e:	a36e      	add	r3, pc, #440	; (adr r3, 800c308 <__ieee754_pow+0x710>)
 800c150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c154:	f7f4 f80a 	bl	800016c <__adddf3>
 800c158:	4622      	mov	r2, r4
 800c15a:	4606      	mov	r6, r0
 800c15c:	460f      	mov	r7, r1
 800c15e:	462b      	mov	r3, r5
 800c160:	4620      	mov	r0, r4
 800c162:	4629      	mov	r1, r5
 800c164:	f7f4 f9b8 	bl	80004d8 <__aeabi_dmul>
 800c168:	4602      	mov	r2, r0
 800c16a:	460b      	mov	r3, r1
 800c16c:	4630      	mov	r0, r6
 800c16e:	4639      	mov	r1, r7
 800c170:	f7f4 f9b2 	bl	80004d8 <__aeabi_dmul>
 800c174:	4604      	mov	r4, r0
 800c176:	460d      	mov	r5, r1
 800c178:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c17c:	4642      	mov	r2, r8
 800c17e:	464b      	mov	r3, r9
 800c180:	f7f3 fff4 	bl	800016c <__adddf3>
 800c184:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c188:	f7f4 f9a6 	bl	80004d8 <__aeabi_dmul>
 800c18c:	4622      	mov	r2, r4
 800c18e:	462b      	mov	r3, r5
 800c190:	f7f3 ffec 	bl	800016c <__adddf3>
 800c194:	4642      	mov	r2, r8
 800c196:	4606      	mov	r6, r0
 800c198:	460f      	mov	r7, r1
 800c19a:	464b      	mov	r3, r9
 800c19c:	4640      	mov	r0, r8
 800c19e:	4649      	mov	r1, r9
 800c1a0:	f7f4 f99a 	bl	80004d8 <__aeabi_dmul>
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	4b66      	ldr	r3, [pc, #408]	; (800c340 <__ieee754_pow+0x748>)
 800c1a8:	4682      	mov	sl, r0
 800c1aa:	468b      	mov	fp, r1
 800c1ac:	f7f3 ffde 	bl	800016c <__adddf3>
 800c1b0:	4632      	mov	r2, r6
 800c1b2:	463b      	mov	r3, r7
 800c1b4:	f7f3 ffda 	bl	800016c <__adddf3>
 800c1b8:	2400      	movs	r4, #0
 800c1ba:	460d      	mov	r5, r1
 800c1bc:	4622      	mov	r2, r4
 800c1be:	460b      	mov	r3, r1
 800c1c0:	4640      	mov	r0, r8
 800c1c2:	4649      	mov	r1, r9
 800c1c4:	f7f4 f988 	bl	80004d8 <__aeabi_dmul>
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	4680      	mov	r8, r0
 800c1cc:	4689      	mov	r9, r1
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	4629      	mov	r1, r5
 800c1d2:	4b5b      	ldr	r3, [pc, #364]	; (800c340 <__ieee754_pow+0x748>)
 800c1d4:	f7f3 ffc8 	bl	8000168 <__aeabi_dsub>
 800c1d8:	4652      	mov	r2, sl
 800c1da:	465b      	mov	r3, fp
 800c1dc:	f7f3 ffc4 	bl	8000168 <__aeabi_dsub>
 800c1e0:	4602      	mov	r2, r0
 800c1e2:	460b      	mov	r3, r1
 800c1e4:	4630      	mov	r0, r6
 800c1e6:	4639      	mov	r1, r7
 800c1e8:	f7f3 ffbe 	bl	8000168 <__aeabi_dsub>
 800c1ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c1f0:	f7f4 f972 	bl	80004d8 <__aeabi_dmul>
 800c1f4:	4622      	mov	r2, r4
 800c1f6:	4606      	mov	r6, r0
 800c1f8:	460f      	mov	r7, r1
 800c1fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c1fe:	462b      	mov	r3, r5
 800c200:	f7f4 f96a 	bl	80004d8 <__aeabi_dmul>
 800c204:	4602      	mov	r2, r0
 800c206:	460b      	mov	r3, r1
 800c208:	4630      	mov	r0, r6
 800c20a:	4639      	mov	r1, r7
 800c20c:	f7f3 ffae 	bl	800016c <__adddf3>
 800c210:	2400      	movs	r4, #0
 800c212:	4606      	mov	r6, r0
 800c214:	460f      	mov	r7, r1
 800c216:	4602      	mov	r2, r0
 800c218:	460b      	mov	r3, r1
 800c21a:	4640      	mov	r0, r8
 800c21c:	4649      	mov	r1, r9
 800c21e:	f7f3 ffa5 	bl	800016c <__adddf3>
 800c222:	a33b      	add	r3, pc, #236	; (adr r3, 800c310 <__ieee754_pow+0x718>)
 800c224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c228:	4620      	mov	r0, r4
 800c22a:	460d      	mov	r5, r1
 800c22c:	f7f4 f954 	bl	80004d8 <__aeabi_dmul>
 800c230:	4642      	mov	r2, r8
 800c232:	464b      	mov	r3, r9
 800c234:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c238:	4620      	mov	r0, r4
 800c23a:	4629      	mov	r1, r5
 800c23c:	f7f3 ff94 	bl	8000168 <__aeabi_dsub>
 800c240:	4602      	mov	r2, r0
 800c242:	460b      	mov	r3, r1
 800c244:	4630      	mov	r0, r6
 800c246:	4639      	mov	r1, r7
 800c248:	f7f3 ff8e 	bl	8000168 <__aeabi_dsub>
 800c24c:	a332      	add	r3, pc, #200	; (adr r3, 800c318 <__ieee754_pow+0x720>)
 800c24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c252:	f7f4 f941 	bl	80004d8 <__aeabi_dmul>
 800c256:	a332      	add	r3, pc, #200	; (adr r3, 800c320 <__ieee754_pow+0x728>)
 800c258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25c:	4606      	mov	r6, r0
 800c25e:	460f      	mov	r7, r1
 800c260:	4620      	mov	r0, r4
 800c262:	4629      	mov	r1, r5
 800c264:	f7f4 f938 	bl	80004d8 <__aeabi_dmul>
 800c268:	4602      	mov	r2, r0
 800c26a:	460b      	mov	r3, r1
 800c26c:	4630      	mov	r0, r6
 800c26e:	4639      	mov	r1, r7
 800c270:	f7f3 ff7c 	bl	800016c <__adddf3>
 800c274:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c276:	4b33      	ldr	r3, [pc, #204]	; (800c344 <__ieee754_pow+0x74c>)
 800c278:	f04f 0a00 	mov.w	sl, #0
 800c27c:	4413      	add	r3, r2
 800c27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c282:	f7f3 ff73 	bl	800016c <__adddf3>
 800c286:	4680      	mov	r8, r0
 800c288:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c28a:	4689      	mov	r9, r1
 800c28c:	f7f4 f8ba 	bl	8000404 <__aeabi_i2d>
 800c290:	4604      	mov	r4, r0
 800c292:	460d      	mov	r5, r1
 800c294:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c296:	4b2c      	ldr	r3, [pc, #176]	; (800c348 <__ieee754_pow+0x750>)
 800c298:	4413      	add	r3, r2
 800c29a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c29e:	4642      	mov	r2, r8
 800c2a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c2a4:	464b      	mov	r3, r9
 800c2a6:	f7f3 ff61 	bl	800016c <__adddf3>
 800c2aa:	4632      	mov	r2, r6
 800c2ac:	463b      	mov	r3, r7
 800c2ae:	f7f3 ff5d 	bl	800016c <__adddf3>
 800c2b2:	4622      	mov	r2, r4
 800c2b4:	462b      	mov	r3, r5
 800c2b6:	f7f3 ff59 	bl	800016c <__adddf3>
 800c2ba:	4622      	mov	r2, r4
 800c2bc:	462b      	mov	r3, r5
 800c2be:	4650      	mov	r0, sl
 800c2c0:	468b      	mov	fp, r1
 800c2c2:	f7f3 ff51 	bl	8000168 <__aeabi_dsub>
 800c2c6:	4632      	mov	r2, r6
 800c2c8:	463b      	mov	r3, r7
 800c2ca:	f7f3 ff4d 	bl	8000168 <__aeabi_dsub>
 800c2ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c2d2:	f7f3 ff49 	bl	8000168 <__aeabi_dsub>
 800c2d6:	4602      	mov	r2, r0
 800c2d8:	460b      	mov	r3, r1
 800c2da:	4640      	mov	r0, r8
 800c2dc:	4649      	mov	r1, r9
 800c2de:	e60d      	b.n	800befc <__ieee754_pow+0x304>
 800c2e0:	4a454eef 	.word	0x4a454eef
 800c2e4:	3fca7e28 	.word	0x3fca7e28
 800c2e8:	93c9db65 	.word	0x93c9db65
 800c2ec:	3fcd864a 	.word	0x3fcd864a
 800c2f0:	a91d4101 	.word	0xa91d4101
 800c2f4:	3fd17460 	.word	0x3fd17460
 800c2f8:	518f264d 	.word	0x518f264d
 800c2fc:	3fd55555 	.word	0x3fd55555
 800c300:	db6fabff 	.word	0xdb6fabff
 800c304:	3fdb6db6 	.word	0x3fdb6db6
 800c308:	33333303 	.word	0x33333303
 800c30c:	3fe33333 	.word	0x3fe33333
 800c310:	e0000000 	.word	0xe0000000
 800c314:	3feec709 	.word	0x3feec709
 800c318:	dc3a03fd 	.word	0xdc3a03fd
 800c31c:	3feec709 	.word	0x3feec709
 800c320:	145b01f5 	.word	0x145b01f5
 800c324:	be3e2fe0 	.word	0xbe3e2fe0
 800c328:	7ff00000 	.word	0x7ff00000
 800c32c:	43400000 	.word	0x43400000
 800c330:	0003988e 	.word	0x0003988e
 800c334:	000bb679 	.word	0x000bb679
 800c338:	0800d320 	.word	0x0800d320
 800c33c:	3ff00000 	.word	0x3ff00000
 800c340:	40080000 	.word	0x40080000
 800c344:	0800d340 	.word	0x0800d340
 800c348:	0800d330 	.word	0x0800d330
 800c34c:	2601      	movs	r6, #1
 800c34e:	e66a      	b.n	800c026 <__ieee754_pow+0x42e>
 800c350:	a39d      	add	r3, pc, #628	; (adr r3, 800c5c8 <__ieee754_pow+0x9d0>)
 800c352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c356:	4640      	mov	r0, r8
 800c358:	4649      	mov	r1, r9
 800c35a:	f7f3 ff07 	bl	800016c <__adddf3>
 800c35e:	4622      	mov	r2, r4
 800c360:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c364:	462b      	mov	r3, r5
 800c366:	4650      	mov	r0, sl
 800c368:	4639      	mov	r1, r7
 800c36a:	f7f3 fefd 	bl	8000168 <__aeabi_dsub>
 800c36e:	4602      	mov	r2, r0
 800c370:	460b      	mov	r3, r1
 800c372:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c376:	f7f4 fb3f 	bl	80009f8 <__aeabi_dcmpgt>
 800c37a:	2800      	cmp	r0, #0
 800c37c:	f47f ae09 	bne.w	800bf92 <__ieee754_pow+0x39a>
 800c380:	4aa3      	ldr	r2, [pc, #652]	; (800c610 <__ieee754_pow+0xa18>)
 800c382:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800c386:	4293      	cmp	r3, r2
 800c388:	f340 8101 	ble.w	800c58e <__ieee754_pow+0x996>
 800c38c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c390:	2000      	movs	r0, #0
 800c392:	151b      	asrs	r3, r3, #20
 800c394:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c398:	fa4a f303 	asr.w	r3, sl, r3
 800c39c:	4433      	add	r3, r6
 800c39e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c3a2:	4f9c      	ldr	r7, [pc, #624]	; (800c614 <__ieee754_pow+0xa1c>)
 800c3a4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c3a8:	4117      	asrs	r7, r2
 800c3aa:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c3ae:	ea23 0107 	bic.w	r1, r3, r7
 800c3b2:	f1c2 0214 	rsb	r2, r2, #20
 800c3b6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c3ba:	460b      	mov	r3, r1
 800c3bc:	fa4a fa02 	asr.w	sl, sl, r2
 800c3c0:	2e00      	cmp	r6, #0
 800c3c2:	4602      	mov	r2, r0
 800c3c4:	4629      	mov	r1, r5
 800c3c6:	4620      	mov	r0, r4
 800c3c8:	bfb8      	it	lt
 800c3ca:	f1ca 0a00 	rsblt	sl, sl, #0
 800c3ce:	f7f3 fecb 	bl	8000168 <__aeabi_dsub>
 800c3d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3da:	2400      	movs	r4, #0
 800c3dc:	4642      	mov	r2, r8
 800c3de:	464b      	mov	r3, r9
 800c3e0:	f7f3 fec4 	bl	800016c <__adddf3>
 800c3e4:	a37a      	add	r3, pc, #488	; (adr r3, 800c5d0 <__ieee754_pow+0x9d8>)
 800c3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ea:	4620      	mov	r0, r4
 800c3ec:	460d      	mov	r5, r1
 800c3ee:	f7f4 f873 	bl	80004d8 <__aeabi_dmul>
 800c3f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3f6:	4606      	mov	r6, r0
 800c3f8:	460f      	mov	r7, r1
 800c3fa:	4620      	mov	r0, r4
 800c3fc:	4629      	mov	r1, r5
 800c3fe:	f7f3 feb3 	bl	8000168 <__aeabi_dsub>
 800c402:	4602      	mov	r2, r0
 800c404:	460b      	mov	r3, r1
 800c406:	4640      	mov	r0, r8
 800c408:	4649      	mov	r1, r9
 800c40a:	f7f3 fead 	bl	8000168 <__aeabi_dsub>
 800c40e:	a372      	add	r3, pc, #456	; (adr r3, 800c5d8 <__ieee754_pow+0x9e0>)
 800c410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c414:	f7f4 f860 	bl	80004d8 <__aeabi_dmul>
 800c418:	a371      	add	r3, pc, #452	; (adr r3, 800c5e0 <__ieee754_pow+0x9e8>)
 800c41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c41e:	4680      	mov	r8, r0
 800c420:	4689      	mov	r9, r1
 800c422:	4620      	mov	r0, r4
 800c424:	4629      	mov	r1, r5
 800c426:	f7f4 f857 	bl	80004d8 <__aeabi_dmul>
 800c42a:	4602      	mov	r2, r0
 800c42c:	460b      	mov	r3, r1
 800c42e:	4640      	mov	r0, r8
 800c430:	4649      	mov	r1, r9
 800c432:	f7f3 fe9b 	bl	800016c <__adddf3>
 800c436:	4604      	mov	r4, r0
 800c438:	460d      	mov	r5, r1
 800c43a:	4602      	mov	r2, r0
 800c43c:	460b      	mov	r3, r1
 800c43e:	4630      	mov	r0, r6
 800c440:	4639      	mov	r1, r7
 800c442:	f7f3 fe93 	bl	800016c <__adddf3>
 800c446:	4632      	mov	r2, r6
 800c448:	463b      	mov	r3, r7
 800c44a:	4680      	mov	r8, r0
 800c44c:	4689      	mov	r9, r1
 800c44e:	f7f3 fe8b 	bl	8000168 <__aeabi_dsub>
 800c452:	4602      	mov	r2, r0
 800c454:	460b      	mov	r3, r1
 800c456:	4620      	mov	r0, r4
 800c458:	4629      	mov	r1, r5
 800c45a:	f7f3 fe85 	bl	8000168 <__aeabi_dsub>
 800c45e:	4642      	mov	r2, r8
 800c460:	4606      	mov	r6, r0
 800c462:	460f      	mov	r7, r1
 800c464:	464b      	mov	r3, r9
 800c466:	4640      	mov	r0, r8
 800c468:	4649      	mov	r1, r9
 800c46a:	f7f4 f835 	bl	80004d8 <__aeabi_dmul>
 800c46e:	a35e      	add	r3, pc, #376	; (adr r3, 800c5e8 <__ieee754_pow+0x9f0>)
 800c470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c474:	4604      	mov	r4, r0
 800c476:	460d      	mov	r5, r1
 800c478:	f7f4 f82e 	bl	80004d8 <__aeabi_dmul>
 800c47c:	a35c      	add	r3, pc, #368	; (adr r3, 800c5f0 <__ieee754_pow+0x9f8>)
 800c47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c482:	f7f3 fe71 	bl	8000168 <__aeabi_dsub>
 800c486:	4622      	mov	r2, r4
 800c488:	462b      	mov	r3, r5
 800c48a:	f7f4 f825 	bl	80004d8 <__aeabi_dmul>
 800c48e:	a35a      	add	r3, pc, #360	; (adr r3, 800c5f8 <__ieee754_pow+0xa00>)
 800c490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c494:	f7f3 fe6a 	bl	800016c <__adddf3>
 800c498:	4622      	mov	r2, r4
 800c49a:	462b      	mov	r3, r5
 800c49c:	f7f4 f81c 	bl	80004d8 <__aeabi_dmul>
 800c4a0:	a357      	add	r3, pc, #348	; (adr r3, 800c600 <__ieee754_pow+0xa08>)
 800c4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a6:	f7f3 fe5f 	bl	8000168 <__aeabi_dsub>
 800c4aa:	4622      	mov	r2, r4
 800c4ac:	462b      	mov	r3, r5
 800c4ae:	f7f4 f813 	bl	80004d8 <__aeabi_dmul>
 800c4b2:	a355      	add	r3, pc, #340	; (adr r3, 800c608 <__ieee754_pow+0xa10>)
 800c4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b8:	f7f3 fe58 	bl	800016c <__adddf3>
 800c4bc:	4622      	mov	r2, r4
 800c4be:	462b      	mov	r3, r5
 800c4c0:	f7f4 f80a 	bl	80004d8 <__aeabi_dmul>
 800c4c4:	4602      	mov	r2, r0
 800c4c6:	460b      	mov	r3, r1
 800c4c8:	4640      	mov	r0, r8
 800c4ca:	4649      	mov	r1, r9
 800c4cc:	f7f3 fe4c 	bl	8000168 <__aeabi_dsub>
 800c4d0:	4604      	mov	r4, r0
 800c4d2:	460d      	mov	r5, r1
 800c4d4:	4602      	mov	r2, r0
 800c4d6:	460b      	mov	r3, r1
 800c4d8:	4640      	mov	r0, r8
 800c4da:	4649      	mov	r1, r9
 800c4dc:	f7f3 fffc 	bl	80004d8 <__aeabi_dmul>
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c4ea:	4620      	mov	r0, r4
 800c4ec:	4629      	mov	r1, r5
 800c4ee:	f7f3 fe3b 	bl	8000168 <__aeabi_dsub>
 800c4f2:	4602      	mov	r2, r0
 800c4f4:	460b      	mov	r3, r1
 800c4f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4fa:	f7f4 f917 	bl	800072c <__aeabi_ddiv>
 800c4fe:	4632      	mov	r2, r6
 800c500:	4604      	mov	r4, r0
 800c502:	460d      	mov	r5, r1
 800c504:	463b      	mov	r3, r7
 800c506:	4640      	mov	r0, r8
 800c508:	4649      	mov	r1, r9
 800c50a:	f7f3 ffe5 	bl	80004d8 <__aeabi_dmul>
 800c50e:	4632      	mov	r2, r6
 800c510:	463b      	mov	r3, r7
 800c512:	f7f3 fe2b 	bl	800016c <__adddf3>
 800c516:	4602      	mov	r2, r0
 800c518:	460b      	mov	r3, r1
 800c51a:	4620      	mov	r0, r4
 800c51c:	4629      	mov	r1, r5
 800c51e:	f7f3 fe23 	bl	8000168 <__aeabi_dsub>
 800c522:	4642      	mov	r2, r8
 800c524:	464b      	mov	r3, r9
 800c526:	f7f3 fe1f 	bl	8000168 <__aeabi_dsub>
 800c52a:	4602      	mov	r2, r0
 800c52c:	460b      	mov	r3, r1
 800c52e:	2000      	movs	r0, #0
 800c530:	4939      	ldr	r1, [pc, #228]	; (800c618 <__ieee754_pow+0xa20>)
 800c532:	f7f3 fe19 	bl	8000168 <__aeabi_dsub>
 800c536:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800c53a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800c53e:	da29      	bge.n	800c594 <__ieee754_pow+0x99c>
 800c540:	4652      	mov	r2, sl
 800c542:	f000 f955 	bl	800c7f0 <scalbn>
 800c546:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c54a:	f7ff bbfe 	b.w	800bd4a <__ieee754_pow+0x152>
 800c54e:	4b33      	ldr	r3, [pc, #204]	; (800c61c <__ieee754_pow+0xa24>)
 800c550:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800c554:	429f      	cmp	r7, r3
 800c556:	f77f af13 	ble.w	800c380 <__ieee754_pow+0x788>
 800c55a:	4b31      	ldr	r3, [pc, #196]	; (800c620 <__ieee754_pow+0xa28>)
 800c55c:	440b      	add	r3, r1
 800c55e:	4303      	orrs	r3, r0
 800c560:	d009      	beq.n	800c576 <__ieee754_pow+0x97e>
 800c562:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c566:	2200      	movs	r2, #0
 800c568:	2300      	movs	r3, #0
 800c56a:	f7f4 fa27 	bl	80009bc <__aeabi_dcmplt>
 800c56e:	3800      	subs	r0, #0
 800c570:	bf18      	it	ne
 800c572:	2001      	movne	r0, #1
 800c574:	e453      	b.n	800be1e <__ieee754_pow+0x226>
 800c576:	4622      	mov	r2, r4
 800c578:	462b      	mov	r3, r5
 800c57a:	f7f3 fdf5 	bl	8000168 <__aeabi_dsub>
 800c57e:	4642      	mov	r2, r8
 800c580:	464b      	mov	r3, r9
 800c582:	f7f4 fa2f 	bl	80009e4 <__aeabi_dcmpge>
 800c586:	2800      	cmp	r0, #0
 800c588:	f43f aefa 	beq.w	800c380 <__ieee754_pow+0x788>
 800c58c:	e7e9      	b.n	800c562 <__ieee754_pow+0x96a>
 800c58e:	f04f 0a00 	mov.w	sl, #0
 800c592:	e720      	b.n	800c3d6 <__ieee754_pow+0x7de>
 800c594:	4621      	mov	r1, r4
 800c596:	e7d6      	b.n	800c546 <__ieee754_pow+0x94e>
 800c598:	f04f 0b00 	mov.w	fp, #0
 800c59c:	f8df c078 	ldr.w	ip, [pc, #120]	; 800c618 <__ieee754_pow+0xa20>
 800c5a0:	f7ff bbba 	b.w	800bd18 <__ieee754_pow+0x120>
 800c5a4:	f04f 0b00 	mov.w	fp, #0
 800c5a8:	f04f 0c00 	mov.w	ip, #0
 800c5ac:	f7ff bbb4 	b.w	800bd18 <__ieee754_pow+0x120>
 800c5b0:	4640      	mov	r0, r8
 800c5b2:	4649      	mov	r1, r9
 800c5b4:	f7ff bb3d 	b.w	800bc32 <__ieee754_pow+0x3a>
 800c5b8:	9200      	str	r2, [sp, #0]
 800c5ba:	f7ff bb89 	b.w	800bcd0 <__ieee754_pow+0xd8>
 800c5be:	2300      	movs	r3, #0
 800c5c0:	f7ff bb73 	b.w	800bcaa <__ieee754_pow+0xb2>
 800c5c4:	f3af 8000 	nop.w
 800c5c8:	652b82fe 	.word	0x652b82fe
 800c5cc:	3c971547 	.word	0x3c971547
 800c5d0:	00000000 	.word	0x00000000
 800c5d4:	3fe62e43 	.word	0x3fe62e43
 800c5d8:	fefa39ef 	.word	0xfefa39ef
 800c5dc:	3fe62e42 	.word	0x3fe62e42
 800c5e0:	0ca86c39 	.word	0x0ca86c39
 800c5e4:	be205c61 	.word	0xbe205c61
 800c5e8:	72bea4d0 	.word	0x72bea4d0
 800c5ec:	3e663769 	.word	0x3e663769
 800c5f0:	c5d26bf1 	.word	0xc5d26bf1
 800c5f4:	3ebbbd41 	.word	0x3ebbbd41
 800c5f8:	af25de2c 	.word	0xaf25de2c
 800c5fc:	3f11566a 	.word	0x3f11566a
 800c600:	16bebd93 	.word	0x16bebd93
 800c604:	3f66c16c 	.word	0x3f66c16c
 800c608:	5555553e 	.word	0x5555553e
 800c60c:	3fc55555 	.word	0x3fc55555
 800c610:	3fe00000 	.word	0x3fe00000
 800c614:	000fffff 	.word	0x000fffff
 800c618:	3ff00000 	.word	0x3ff00000
 800c61c:	4090cbff 	.word	0x4090cbff
 800c620:	3f6f3400 	.word	0x3f6f3400

0800c624 <__ieee754_sqrt>:
 800c624:	f8df c158 	ldr.w	ip, [pc, #344]	; 800c780 <__ieee754_sqrt+0x15c>
 800c628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c62c:	ea3c 0c01 	bics.w	ip, ip, r1
 800c630:	4606      	mov	r6, r0
 800c632:	460d      	mov	r5, r1
 800c634:	460c      	mov	r4, r1
 800c636:	460a      	mov	r2, r1
 800c638:	4607      	mov	r7, r0
 800c63a:	4603      	mov	r3, r0
 800c63c:	d10f      	bne.n	800c65e <__ieee754_sqrt+0x3a>
 800c63e:	4602      	mov	r2, r0
 800c640:	460b      	mov	r3, r1
 800c642:	f7f3 ff49 	bl	80004d8 <__aeabi_dmul>
 800c646:	4602      	mov	r2, r0
 800c648:	460b      	mov	r3, r1
 800c64a:	4630      	mov	r0, r6
 800c64c:	4629      	mov	r1, r5
 800c64e:	f7f3 fd8d 	bl	800016c <__adddf3>
 800c652:	4606      	mov	r6, r0
 800c654:	460d      	mov	r5, r1
 800c656:	4630      	mov	r0, r6
 800c658:	4629      	mov	r1, r5
 800c65a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c65e:	2900      	cmp	r1, #0
 800c660:	dc0e      	bgt.n	800c680 <__ieee754_sqrt+0x5c>
 800c662:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800c666:	ea5c 0707 	orrs.w	r7, ip, r7
 800c66a:	d0f4      	beq.n	800c656 <__ieee754_sqrt+0x32>
 800c66c:	b141      	cbz	r1, 800c680 <__ieee754_sqrt+0x5c>
 800c66e:	4602      	mov	r2, r0
 800c670:	460b      	mov	r3, r1
 800c672:	f7f3 fd79 	bl	8000168 <__aeabi_dsub>
 800c676:	4602      	mov	r2, r0
 800c678:	460b      	mov	r3, r1
 800c67a:	f7f4 f857 	bl	800072c <__aeabi_ddiv>
 800c67e:	e7e8      	b.n	800c652 <__ieee754_sqrt+0x2e>
 800c680:	1521      	asrs	r1, r4, #20
 800c682:	d075      	beq.n	800c770 <__ieee754_sqrt+0x14c>
 800c684:	07cc      	lsls	r4, r1, #31
 800c686:	f04f 0400 	mov.w	r4, #0
 800c68a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c68e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800c692:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c696:	bf5e      	ittt	pl
 800c698:	0fd9      	lsrpl	r1, r3, #31
 800c69a:	005b      	lslpl	r3, r3, #1
 800c69c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800c6a0:	0fd9      	lsrs	r1, r3, #31
 800c6a2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800c6a6:	2516      	movs	r5, #22
 800c6a8:	4620      	mov	r0, r4
 800c6aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c6ae:	107f      	asrs	r7, r7, #1
 800c6b0:	005b      	lsls	r3, r3, #1
 800c6b2:	1846      	adds	r6, r0, r1
 800c6b4:	4296      	cmp	r6, r2
 800c6b6:	bfde      	ittt	le
 800c6b8:	1b92      	suble	r2, r2, r6
 800c6ba:	1870      	addle	r0, r6, r1
 800c6bc:	1864      	addle	r4, r4, r1
 800c6be:	0052      	lsls	r2, r2, #1
 800c6c0:	3d01      	subs	r5, #1
 800c6c2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c6c6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c6ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c6ce:	d1f0      	bne.n	800c6b2 <__ieee754_sqrt+0x8e>
 800c6d0:	4629      	mov	r1, r5
 800c6d2:	f04f 0e20 	mov.w	lr, #32
 800c6d6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c6da:	4282      	cmp	r2, r0
 800c6dc:	eb06 0c05 	add.w	ip, r6, r5
 800c6e0:	dc02      	bgt.n	800c6e8 <__ieee754_sqrt+0xc4>
 800c6e2:	d113      	bne.n	800c70c <__ieee754_sqrt+0xe8>
 800c6e4:	459c      	cmp	ip, r3
 800c6e6:	d811      	bhi.n	800c70c <__ieee754_sqrt+0xe8>
 800c6e8:	f1bc 0f00 	cmp.w	ip, #0
 800c6ec:	eb0c 0506 	add.w	r5, ip, r6
 800c6f0:	da43      	bge.n	800c77a <__ieee754_sqrt+0x156>
 800c6f2:	2d00      	cmp	r5, #0
 800c6f4:	db41      	blt.n	800c77a <__ieee754_sqrt+0x156>
 800c6f6:	f100 0801 	add.w	r8, r0, #1
 800c6fa:	1a12      	subs	r2, r2, r0
 800c6fc:	4640      	mov	r0, r8
 800c6fe:	459c      	cmp	ip, r3
 800c700:	bf88      	it	hi
 800c702:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c706:	eba3 030c 	sub.w	r3, r3, ip
 800c70a:	4431      	add	r1, r6
 800c70c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c710:	f1be 0e01 	subs.w	lr, lr, #1
 800c714:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800c718:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c71c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c720:	d1db      	bne.n	800c6da <__ieee754_sqrt+0xb6>
 800c722:	4313      	orrs	r3, r2
 800c724:	d006      	beq.n	800c734 <__ieee754_sqrt+0x110>
 800c726:	1c48      	adds	r0, r1, #1
 800c728:	bf0b      	itete	eq
 800c72a:	4671      	moveq	r1, lr
 800c72c:	3101      	addne	r1, #1
 800c72e:	3401      	addeq	r4, #1
 800c730:	f021 0101 	bicne.w	r1, r1, #1
 800c734:	1063      	asrs	r3, r4, #1
 800c736:	0849      	lsrs	r1, r1, #1
 800c738:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c73c:	07e2      	lsls	r2, r4, #31
 800c73e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c742:	bf48      	it	mi
 800c744:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800c748:	460e      	mov	r6, r1
 800c74a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c74e:	e782      	b.n	800c656 <__ieee754_sqrt+0x32>
 800c750:	0ada      	lsrs	r2, r3, #11
 800c752:	3815      	subs	r0, #21
 800c754:	055b      	lsls	r3, r3, #21
 800c756:	2a00      	cmp	r2, #0
 800c758:	d0fa      	beq.n	800c750 <__ieee754_sqrt+0x12c>
 800c75a:	02d5      	lsls	r5, r2, #11
 800c75c:	d50a      	bpl.n	800c774 <__ieee754_sqrt+0x150>
 800c75e:	f1c1 0420 	rsb	r4, r1, #32
 800c762:	fa23 f404 	lsr.w	r4, r3, r4
 800c766:	1e4d      	subs	r5, r1, #1
 800c768:	408b      	lsls	r3, r1
 800c76a:	4322      	orrs	r2, r4
 800c76c:	1b41      	subs	r1, r0, r5
 800c76e:	e789      	b.n	800c684 <__ieee754_sqrt+0x60>
 800c770:	4608      	mov	r0, r1
 800c772:	e7f0      	b.n	800c756 <__ieee754_sqrt+0x132>
 800c774:	0052      	lsls	r2, r2, #1
 800c776:	3101      	adds	r1, #1
 800c778:	e7ef      	b.n	800c75a <__ieee754_sqrt+0x136>
 800c77a:	4680      	mov	r8, r0
 800c77c:	e7bd      	b.n	800c6fa <__ieee754_sqrt+0xd6>
 800c77e:	bf00      	nop
 800c780:	7ff00000 	.word	0x7ff00000

0800c784 <with_errno>:
 800c784:	b570      	push	{r4, r5, r6, lr}
 800c786:	4604      	mov	r4, r0
 800c788:	460d      	mov	r5, r1
 800c78a:	4616      	mov	r6, r2
 800c78c:	f7fc faae 	bl	8008cec <__errno>
 800c790:	4629      	mov	r1, r5
 800c792:	6006      	str	r6, [r0, #0]
 800c794:	4620      	mov	r0, r4
 800c796:	bd70      	pop	{r4, r5, r6, pc}

0800c798 <xflow>:
 800c798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c79a:	4615      	mov	r5, r2
 800c79c:	461c      	mov	r4, r3
 800c79e:	b180      	cbz	r0, 800c7c2 <xflow+0x2a>
 800c7a0:	4610      	mov	r0, r2
 800c7a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c7a6:	e9cd 0100 	strd	r0, r1, [sp]
 800c7aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c7ae:	4628      	mov	r0, r5
 800c7b0:	4621      	mov	r1, r4
 800c7b2:	f7f3 fe91 	bl	80004d8 <__aeabi_dmul>
 800c7b6:	2222      	movs	r2, #34	; 0x22
 800c7b8:	b003      	add	sp, #12
 800c7ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c7be:	f7ff bfe1 	b.w	800c784 <with_errno>
 800c7c2:	4610      	mov	r0, r2
 800c7c4:	4619      	mov	r1, r3
 800c7c6:	e7ee      	b.n	800c7a6 <xflow+0xe>

0800c7c8 <__math_uflow>:
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c7ce:	f7ff bfe3 	b.w	800c798 <xflow>

0800c7d2 <__math_oflow>:
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c7d8:	f7ff bfde 	b.w	800c798 <xflow>

0800c7dc <fabs>:
 800c7dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c7e0:	4770      	bx	lr

0800c7e2 <finite>:
 800c7e2:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800c7e6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c7ea:	0fc0      	lsrs	r0, r0, #31
 800c7ec:	4770      	bx	lr
	...

0800c7f0 <scalbn>:
 800c7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7f2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800c7f6:	4604      	mov	r4, r0
 800c7f8:	460d      	mov	r5, r1
 800c7fa:	4617      	mov	r7, r2
 800c7fc:	460b      	mov	r3, r1
 800c7fe:	b996      	cbnz	r6, 800c826 <scalbn+0x36>
 800c800:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c804:	4303      	orrs	r3, r0
 800c806:	d039      	beq.n	800c87c <scalbn+0x8c>
 800c808:	4b33      	ldr	r3, [pc, #204]	; (800c8d8 <scalbn+0xe8>)
 800c80a:	2200      	movs	r2, #0
 800c80c:	f7f3 fe64 	bl	80004d8 <__aeabi_dmul>
 800c810:	4b32      	ldr	r3, [pc, #200]	; (800c8dc <scalbn+0xec>)
 800c812:	4604      	mov	r4, r0
 800c814:	429f      	cmp	r7, r3
 800c816:	460d      	mov	r5, r1
 800c818:	da0f      	bge.n	800c83a <scalbn+0x4a>
 800c81a:	a32b      	add	r3, pc, #172	; (adr r3, 800c8c8 <scalbn+0xd8>)
 800c81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c820:	f7f3 fe5a 	bl	80004d8 <__aeabi_dmul>
 800c824:	e006      	b.n	800c834 <scalbn+0x44>
 800c826:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c82a:	4296      	cmp	r6, r2
 800c82c:	d10a      	bne.n	800c844 <scalbn+0x54>
 800c82e:	4602      	mov	r2, r0
 800c830:	f7f3 fc9c 	bl	800016c <__adddf3>
 800c834:	4604      	mov	r4, r0
 800c836:	460d      	mov	r5, r1
 800c838:	e020      	b.n	800c87c <scalbn+0x8c>
 800c83a:	460b      	mov	r3, r1
 800c83c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c840:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800c844:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800c848:	19b9      	adds	r1, r7, r6
 800c84a:	4291      	cmp	r1, r2
 800c84c:	dd0e      	ble.n	800c86c <scalbn+0x7c>
 800c84e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800c852:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800c856:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800c85a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800c85e:	4820      	ldr	r0, [pc, #128]	; (800c8e0 <scalbn+0xf0>)
 800c860:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800c864:	a31a      	add	r3, pc, #104	; (adr r3, 800c8d0 <scalbn+0xe0>)
 800c866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86a:	e7d9      	b.n	800c820 <scalbn+0x30>
 800c86c:	2900      	cmp	r1, #0
 800c86e:	dd08      	ble.n	800c882 <scalbn+0x92>
 800c870:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c874:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c878:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800c87c:	4620      	mov	r0, r4
 800c87e:	4629      	mov	r1, r5
 800c880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c882:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800c886:	da12      	bge.n	800c8ae <scalbn+0xbe>
 800c888:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c88c:	429f      	cmp	r7, r3
 800c88e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800c892:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800c896:	dcdc      	bgt.n	800c852 <scalbn+0x62>
 800c898:	a30b      	add	r3, pc, #44	; (adr r3, 800c8c8 <scalbn+0xd8>)
 800c89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c89e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800c8a2:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800c8a6:	480f      	ldr	r0, [pc, #60]	; (800c8e4 <scalbn+0xf4>)
 800c8a8:	f041 011f 	orr.w	r1, r1, #31
 800c8ac:	e7b8      	b.n	800c820 <scalbn+0x30>
 800c8ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c8b2:	3136      	adds	r1, #54	; 0x36
 800c8b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c8b8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800c8bc:	4620      	mov	r0, r4
 800c8be:	4629      	mov	r1, r5
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	4b09      	ldr	r3, [pc, #36]	; (800c8e8 <scalbn+0xf8>)
 800c8c4:	e7ac      	b.n	800c820 <scalbn+0x30>
 800c8c6:	bf00      	nop
 800c8c8:	c2f8f359 	.word	0xc2f8f359
 800c8cc:	01a56e1f 	.word	0x01a56e1f
 800c8d0:	8800759c 	.word	0x8800759c
 800c8d4:	7e37e43c 	.word	0x7e37e43c
 800c8d8:	43500000 	.word	0x43500000
 800c8dc:	ffff3cb0 	.word	0xffff3cb0
 800c8e0:	8800759c 	.word	0x8800759c
 800c8e4:	c2f8f359 	.word	0xc2f8f359
 800c8e8:	3c900000 	.word	0x3c900000

0800c8ec <_init>:
 800c8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ee:	bf00      	nop
 800c8f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8f2:	bc08      	pop	{r3}
 800c8f4:	469e      	mov	lr, r3
 800c8f6:	4770      	bx	lr

0800c8f8 <_fini>:
 800c8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8fa:	bf00      	nop
 800c8fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8fe:	bc08      	pop	{r3}
 800c900:	469e      	mov	lr, r3
 800c902:	4770      	bx	lr
